
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  passwordHash: 'passwordHash',
  avatar: 'avatar',
  bio: 'bio',
  role: 'role',
  credits: 'credits',
  subscriptionTier: 'subscriptionTier',
  subscriptionExpiresAt: 'subscriptionExpiresAt',
  isActive: 'isActive',
  isVerified: 'isVerified',
  verificationToken: 'verificationToken',
  resetPasswordToken: 'resetPasswordToken',
  resetPasswordExpires: 'resetPasswordExpires',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OAuthAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  providerId: 'providerId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.CharacterScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  name: 'name',
  description: 'description',
  fullDescription: 'fullDescription',
  personality: 'personality',
  backstory: 'backstory',
  speakingStyle: 'speakingStyle',
  scenario: 'scenario',
  firstMessage: 'firstMessage',
  systemPrompt: 'systemPrompt',
  exampleDialogs: 'exampleDialogs',
  avatar: 'avatar',
  coverImage: 'coverImage',
  category: 'category',
  tags: 'tags',
  language: 'language',
  model: 'model',
  temperature: 'temperature',
  maxTokens: 'maxTokens',
  isPublic: 'isPublic',
  isNSFW: 'isNSFW',
  isFeatured: 'isFeatured',
  rating: 'rating',
  ratingCount: 'ratingCount',
  chatCount: 'chatCount',
  favoriteCount: 'favoriteCount',
  importedFrom: 'importedFrom',
  version: 'version',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  characterId: 'characterId',
  title: 'title',
  model: 'model',
  presetId: 'presetId',
  worldInfoId: 'worldInfoId',
  lastMessageAt: 'lastMessageAt',
  messageCount: 'messageCount',
  totalTokens: 'totalTokens',
  isArchived: 'isArchived',
  isPinned: 'isPinned',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatRoomScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  ownerId: 'ownerId',
  maxParticipants: 'maxParticipants',
  isPrivate: 'isPrivate',
  allowSpectators: 'allowSpectators',
  roomType: 'roomType',
  settings: 'settings',
  lastMessageAt: 'lastMessageAt',
  messageCount: 'messageCount',
  totalTokens: 'totalTokens',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatParticipantScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  userId: 'userId',
  characterId: 'characterId',
  role: 'role',
  permissions: 'permissions',
  joinedAt: 'joinedAt',
  lastSeenAt: 'lastSeenAt',
  isActive: 'isActive',
  isMuted: 'isMuted'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  senderId: 'senderId',
  characterId: 'characterId',
  content: 'content',
  messageType: 'messageType',
  replyToId: 'replyToId',
  tokens: 'tokens',
  isEdited: 'isEdited',
  isDeleted: 'isDeleted',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  method: 'method',
  externalId: 'externalId',
  description: 'description',
  metadata: 'metadata',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  characterId: 'characterId',
  role: 'role',
  content: 'content',
  tokens: 'tokens',
  edited: 'edited',
  deleted: 'deleted',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CharacterFavoriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  characterId: 'characterId',
  createdAt: 'createdAt'
};

exports.Prisma.CharacterRatingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  characterId: 'characterId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminLogScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  action: 'action',
  targetType: 'targetType',
  targetId: 'targetId',
  details: 'details',
  ip: 'ip',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.UsageLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  endpoint: 'endpoint',
  method: 'method',
  statusCode: 'statusCode',
  responseTime: 'responseTime',
  ip: 'ip',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  type: 'type',
  severity: 'severity',
  title: 'title',
  message: 'message',
  source: 'source',
  metadata: 'metadata',
  isRead: 'isRead',
  isResolved: 'isResolved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChannelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  provider: 'provider',
  apiKey: 'apiKey',
  baseUrl: 'baseUrl',
  models: 'models',
  isActive: 'isActive',
  priority: 'priority',
  weight: 'weight',
  maxTokens: 'maxTokens',
  rpmLimit: 'rpmLimit',
  tpmLimit: 'tpmLimit',
  usageCount: 'usageCount',
  errorCount: 'errorCount',
  lastUsedAt: 'lastUsedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkflowScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  creatorId: 'creatorId',
  version: 'version',
  status: 'status',
  isTemplate: 'isTemplate',
  isPublic: 'isPublic',
  category: 'category',
  tags: 'tags',
  definition: 'definition',
  variables: 'variables',
  settings: 'settings',
  usageCount: 'usageCount',
  rating: 'rating',
  ratingCount: 'ratingCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkflowInstanceScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  executorId: 'executorId',
  name: 'name',
  status: 'status',
  priority: 'priority',
  input: 'input',
  output: 'output',
  variables: 'variables',
  currentStep: 'currentStep',
  progress: 'progress',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  failureReason: 'failureReason',
  retryCount: 'retryCount',
  maxRetries: 'maxRetries',
  timeout: 'timeout',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StepExecutionScalarFieldEnum = {
  id: 'id',
  instanceId: 'instanceId',
  stepId: 'stepId',
  stepType: 'stepType',
  status: 'status',
  input: 'input',
  output: 'output',
  error: 'error',
  duration: 'duration',
  retryCount: 'retryCount',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkflowLogScalarFieldEnum = {
  id: 'id',
  instanceId: 'instanceId',
  level: 'level',
  message: 'message',
  data: 'data',
  stepId: 'stepId',
  timestamp: 'timestamp'
};

exports.Prisma.WorkflowTemplateScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  name: 'name',
  description: 'description',
  category: 'category',
  tags: 'tags',
  isOfficial: 'isOfficial',
  usageCount: 'usageCount',
  rating: 'rating',
  ratingCount: 'ratingCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkflowRatingScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  userId: 'userId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduledTaskScalarFieldEnum = {
  id: 'id',
  name: 'name',
  workflowId: 'workflowId',
  creatorId: 'creatorId',
  cronExpression: 'cronExpression',
  timezone: 'timezone',
  isEnabled: 'isEnabled',
  input: 'input',
  lastRunAt: 'lastRunAt',
  nextRunAt: 'nextRunAt',
  runCount: 'runCount',
  failureCount: 'failureCount',
  maxRuns: 'maxRuns',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  OAuthAccount: 'OAuthAccount',
  RefreshToken: 'RefreshToken',
  Character: 'Character',
  ChatSession: 'ChatSession',
  ChatRoom: 'ChatRoom',
  ChatParticipant: 'ChatParticipant',
  ChatMessage: 'ChatMessage',
  Transaction: 'Transaction',
  Message: 'Message',
  CharacterFavorite: 'CharacterFavorite',
  CharacterRating: 'CharacterRating',
  AdminLog: 'AdminLog',
  UsageLog: 'UsageLog',
  Alert: 'Alert',
  Channel: 'Channel',
  Workflow: 'Workflow',
  WorkflowInstance: 'WorkflowInstance',
  StepExecution: 'StepExecution',
  WorkflowLog: 'WorkflowLog',
  WorkflowTemplate: 'WorkflowTemplate',
  WorkflowRating: 'WorkflowRating',
  ScheduledTask: 'ScheduledTask'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
