
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model OAuthAccount
 * 
 */
export type OAuthAccount = $Result.DefaultSelection<Prisma.$OAuthAccountPayload>
/**
 * Model RefreshToken
 * 
 */
export type RefreshToken = $Result.DefaultSelection<Prisma.$RefreshTokenPayload>
/**
 * Model Character
 * 
 */
export type Character = $Result.DefaultSelection<Prisma.$CharacterPayload>
/**
 * Model ChatSession
 * 
 */
export type ChatSession = $Result.DefaultSelection<Prisma.$ChatSessionPayload>
/**
 * Model ChatRoom
 * 
 */
export type ChatRoom = $Result.DefaultSelection<Prisma.$ChatRoomPayload>
/**
 * Model ChatParticipant
 * 
 */
export type ChatParticipant = $Result.DefaultSelection<Prisma.$ChatParticipantPayload>
/**
 * Model ChatMessage
 * 
 */
export type ChatMessage = $Result.DefaultSelection<Prisma.$ChatMessagePayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model CharacterFavorite
 * 
 */
export type CharacterFavorite = $Result.DefaultSelection<Prisma.$CharacterFavoritePayload>
/**
 * Model CharacterRating
 * 
 */
export type CharacterRating = $Result.DefaultSelection<Prisma.$CharacterRatingPayload>
/**
 * Model AdminLog
 * 
 */
export type AdminLog = $Result.DefaultSelection<Prisma.$AdminLogPayload>
/**
 * Model UsageLog
 * 
 */
export type UsageLog = $Result.DefaultSelection<Prisma.$UsageLogPayload>
/**
 * Model Alert
 * 
 */
export type Alert = $Result.DefaultSelection<Prisma.$AlertPayload>
/**
 * Model Channel
 * 
 */
export type Channel = $Result.DefaultSelection<Prisma.$ChannelPayload>
/**
 * Model Workflow
 * 
 */
export type Workflow = $Result.DefaultSelection<Prisma.$WorkflowPayload>
/**
 * Model WorkflowInstance
 * 
 */
export type WorkflowInstance = $Result.DefaultSelection<Prisma.$WorkflowInstancePayload>
/**
 * Model StepExecution
 * 
 */
export type StepExecution = $Result.DefaultSelection<Prisma.$StepExecutionPayload>
/**
 * Model WorkflowLog
 * 
 */
export type WorkflowLog = $Result.DefaultSelection<Prisma.$WorkflowLogPayload>
/**
 * Model WorkflowTemplate
 * 
 */
export type WorkflowTemplate = $Result.DefaultSelection<Prisma.$WorkflowTemplatePayload>
/**
 * Model WorkflowRating
 * 
 */
export type WorkflowRating = $Result.DefaultSelection<Prisma.$WorkflowRatingPayload>
/**
 * Model ScheduledTask
 * 
 */
export type ScheduledTask = $Result.DefaultSelection<Prisma.$ScheduledTaskPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.oAuthAccount`: Exposes CRUD operations for the **OAuthAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OAuthAccounts
    * const oAuthAccounts = await prisma.oAuthAccount.findMany()
    * ```
    */
  get oAuthAccount(): Prisma.OAuthAccountDelegate<ExtArgs>;

  /**
   * `prisma.refreshToken`: Exposes CRUD operations for the **RefreshToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefreshTokens
    * const refreshTokens = await prisma.refreshToken.findMany()
    * ```
    */
  get refreshToken(): Prisma.RefreshTokenDelegate<ExtArgs>;

  /**
   * `prisma.character`: Exposes CRUD operations for the **Character** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Characters
    * const characters = await prisma.character.findMany()
    * ```
    */
  get character(): Prisma.CharacterDelegate<ExtArgs>;

  /**
   * `prisma.chatSession`: Exposes CRUD operations for the **ChatSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatSessions
    * const chatSessions = await prisma.chatSession.findMany()
    * ```
    */
  get chatSession(): Prisma.ChatSessionDelegate<ExtArgs>;

  /**
   * `prisma.chatRoom`: Exposes CRUD operations for the **ChatRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatRooms
    * const chatRooms = await prisma.chatRoom.findMany()
    * ```
    */
  get chatRoom(): Prisma.ChatRoomDelegate<ExtArgs>;

  /**
   * `prisma.chatParticipant`: Exposes CRUD operations for the **ChatParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatParticipants
    * const chatParticipants = await prisma.chatParticipant.findMany()
    * ```
    */
  get chatParticipant(): Prisma.ChatParticipantDelegate<ExtArgs>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessage.findMany()
    * ```
    */
  get chatMessage(): Prisma.ChatMessageDelegate<ExtArgs>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.characterFavorite`: Exposes CRUD operations for the **CharacterFavorite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CharacterFavorites
    * const characterFavorites = await prisma.characterFavorite.findMany()
    * ```
    */
  get characterFavorite(): Prisma.CharacterFavoriteDelegate<ExtArgs>;

  /**
   * `prisma.characterRating`: Exposes CRUD operations for the **CharacterRating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CharacterRatings
    * const characterRatings = await prisma.characterRating.findMany()
    * ```
    */
  get characterRating(): Prisma.CharacterRatingDelegate<ExtArgs>;

  /**
   * `prisma.adminLog`: Exposes CRUD operations for the **AdminLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminLogs
    * const adminLogs = await prisma.adminLog.findMany()
    * ```
    */
  get adminLog(): Prisma.AdminLogDelegate<ExtArgs>;

  /**
   * `prisma.usageLog`: Exposes CRUD operations for the **UsageLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsageLogs
    * const usageLogs = await prisma.usageLog.findMany()
    * ```
    */
  get usageLog(): Prisma.UsageLogDelegate<ExtArgs>;

  /**
   * `prisma.alert`: Exposes CRUD operations for the **Alert** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alerts
    * const alerts = await prisma.alert.findMany()
    * ```
    */
  get alert(): Prisma.AlertDelegate<ExtArgs>;

  /**
   * `prisma.channel`: Exposes CRUD operations for the **Channel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Channels
    * const channels = await prisma.channel.findMany()
    * ```
    */
  get channel(): Prisma.ChannelDelegate<ExtArgs>;

  /**
   * `prisma.workflow`: Exposes CRUD operations for the **Workflow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workflows
    * const workflows = await prisma.workflow.findMany()
    * ```
    */
  get workflow(): Prisma.WorkflowDelegate<ExtArgs>;

  /**
   * `prisma.workflowInstance`: Exposes CRUD operations for the **WorkflowInstance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkflowInstances
    * const workflowInstances = await prisma.workflowInstance.findMany()
    * ```
    */
  get workflowInstance(): Prisma.WorkflowInstanceDelegate<ExtArgs>;

  /**
   * `prisma.stepExecution`: Exposes CRUD operations for the **StepExecution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StepExecutions
    * const stepExecutions = await prisma.stepExecution.findMany()
    * ```
    */
  get stepExecution(): Prisma.StepExecutionDelegate<ExtArgs>;

  /**
   * `prisma.workflowLog`: Exposes CRUD operations for the **WorkflowLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkflowLogs
    * const workflowLogs = await prisma.workflowLog.findMany()
    * ```
    */
  get workflowLog(): Prisma.WorkflowLogDelegate<ExtArgs>;

  /**
   * `prisma.workflowTemplate`: Exposes CRUD operations for the **WorkflowTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkflowTemplates
    * const workflowTemplates = await prisma.workflowTemplate.findMany()
    * ```
    */
  get workflowTemplate(): Prisma.WorkflowTemplateDelegate<ExtArgs>;

  /**
   * `prisma.workflowRating`: Exposes CRUD operations for the **WorkflowRating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkflowRatings
    * const workflowRatings = await prisma.workflowRating.findMany()
    * ```
    */
  get workflowRating(): Prisma.WorkflowRatingDelegate<ExtArgs>;

  /**
   * `prisma.scheduledTask`: Exposes CRUD operations for the **ScheduledTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScheduledTasks
    * const scheduledTasks = await prisma.scheduledTask.findMany()
    * ```
    */
  get scheduledTask(): Prisma.ScheduledTaskDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    OAuthAccount: 'OAuthAccount',
    RefreshToken: 'RefreshToken',
    Character: 'Character',
    ChatSession: 'ChatSession',
    ChatRoom: 'ChatRoom',
    ChatParticipant: 'ChatParticipant',
    ChatMessage: 'ChatMessage',
    Transaction: 'Transaction',
    Message: 'Message',
    CharacterFavorite: 'CharacterFavorite',
    CharacterRating: 'CharacterRating',
    AdminLog: 'AdminLog',
    UsageLog: 'UsageLog',
    Alert: 'Alert',
    Channel: 'Channel',
    Workflow: 'Workflow',
    WorkflowInstance: 'WorkflowInstance',
    StepExecution: 'StepExecution',
    WorkflowLog: 'WorkflowLog',
    WorkflowTemplate: 'WorkflowTemplate',
    WorkflowRating: 'WorkflowRating',
    ScheduledTask: 'ScheduledTask'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "oAuthAccount" | "refreshToken" | "character" | "chatSession" | "chatRoom" | "chatParticipant" | "chatMessage" | "transaction" | "message" | "characterFavorite" | "characterRating" | "adminLog" | "usageLog" | "alert" | "channel" | "workflow" | "workflowInstance" | "stepExecution" | "workflowLog" | "workflowTemplate" | "workflowRating" | "scheduledTask"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      OAuthAccount: {
        payload: Prisma.$OAuthAccountPayload<ExtArgs>
        fields: Prisma.OAuthAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OAuthAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OAuthAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>
          }
          findFirst: {
            args: Prisma.OAuthAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OAuthAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>
          }
          findMany: {
            args: Prisma.OAuthAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>[]
          }
          create: {
            args: Prisma.OAuthAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>
          }
          createMany: {
            args: Prisma.OAuthAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OAuthAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>[]
          }
          delete: {
            args: Prisma.OAuthAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>
          }
          update: {
            args: Prisma.OAuthAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>
          }
          deleteMany: {
            args: Prisma.OAuthAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OAuthAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OAuthAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>
          }
          aggregate: {
            args: Prisma.OAuthAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOAuthAccount>
          }
          groupBy: {
            args: Prisma.OAuthAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<OAuthAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.OAuthAccountCountArgs<ExtArgs>
            result: $Utils.Optional<OAuthAccountCountAggregateOutputType> | number
          }
        }
      }
      RefreshToken: {
        payload: Prisma.$RefreshTokenPayload<ExtArgs>
        fields: Prisma.RefreshTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefreshTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefreshTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findFirst: {
            args: Prisma.RefreshTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefreshTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findMany: {
            args: Prisma.RefreshTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          create: {
            args: Prisma.RefreshTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          createMany: {
            args: Prisma.RefreshTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefreshTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          delete: {
            args: Prisma.RefreshTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          update: {
            args: Prisma.RefreshTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          deleteMany: {
            args: Prisma.RefreshTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefreshTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefreshTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          aggregate: {
            args: Prisma.RefreshTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefreshToken>
          }
          groupBy: {
            args: Prisma.RefreshTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefreshTokenCountArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenCountAggregateOutputType> | number
          }
        }
      }
      Character: {
        payload: Prisma.$CharacterPayload<ExtArgs>
        fields: Prisma.CharacterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CharacterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CharacterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          findFirst: {
            args: Prisma.CharacterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CharacterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          findMany: {
            args: Prisma.CharacterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>[]
          }
          create: {
            args: Prisma.CharacterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          createMany: {
            args: Prisma.CharacterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CharacterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>[]
          }
          delete: {
            args: Prisma.CharacterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          update: {
            args: Prisma.CharacterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          deleteMany: {
            args: Prisma.CharacterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CharacterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CharacterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          aggregate: {
            args: Prisma.CharacterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCharacter>
          }
          groupBy: {
            args: Prisma.CharacterGroupByArgs<ExtArgs>
            result: $Utils.Optional<CharacterGroupByOutputType>[]
          }
          count: {
            args: Prisma.CharacterCountArgs<ExtArgs>
            result: $Utils.Optional<CharacterCountAggregateOutputType> | number
          }
        }
      }
      ChatSession: {
        payload: Prisma.$ChatSessionPayload<ExtArgs>
        fields: Prisma.ChatSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          findFirst: {
            args: Prisma.ChatSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          findMany: {
            args: Prisma.ChatSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          create: {
            args: Prisma.ChatSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          createMany: {
            args: Prisma.ChatSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          delete: {
            args: Prisma.ChatSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          update: {
            args: Prisma.ChatSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          deleteMany: {
            args: Prisma.ChatSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          aggregate: {
            args: Prisma.ChatSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatSession>
          }
          groupBy: {
            args: Prisma.ChatSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatSessionCountArgs<ExtArgs>
            result: $Utils.Optional<ChatSessionCountAggregateOutputType> | number
          }
        }
      }
      ChatRoom: {
        payload: Prisma.$ChatRoomPayload<ExtArgs>
        fields: Prisma.ChatRoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatRoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatRoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          findFirst: {
            args: Prisma.ChatRoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatRoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          findMany: {
            args: Prisma.ChatRoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>[]
          }
          create: {
            args: Prisma.ChatRoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          createMany: {
            args: Prisma.ChatRoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatRoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>[]
          }
          delete: {
            args: Prisma.ChatRoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          update: {
            args: Prisma.ChatRoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          deleteMany: {
            args: Prisma.ChatRoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatRoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatRoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          aggregate: {
            args: Prisma.ChatRoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatRoom>
          }
          groupBy: {
            args: Prisma.ChatRoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatRoomCountArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomCountAggregateOutputType> | number
          }
        }
      }
      ChatParticipant: {
        payload: Prisma.$ChatParticipantPayload<ExtArgs>
        fields: Prisma.ChatParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatParticipantPayload>
          }
          findFirst: {
            args: Prisma.ChatParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatParticipantPayload>
          }
          findMany: {
            args: Prisma.ChatParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatParticipantPayload>[]
          }
          create: {
            args: Prisma.ChatParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatParticipantPayload>
          }
          createMany: {
            args: Prisma.ChatParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatParticipantPayload>[]
          }
          delete: {
            args: Prisma.ChatParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatParticipantPayload>
          }
          update: {
            args: Prisma.ChatParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatParticipantPayload>
          }
          deleteMany: {
            args: Prisma.ChatParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatParticipantPayload>
          }
          aggregate: {
            args: Prisma.ChatParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatParticipant>
          }
          groupBy: {
            args: Prisma.ChatParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<ChatParticipantCountAggregateOutputType> | number
          }
        }
      }
      ChatMessage: {
        payload: Prisma.$ChatMessagePayload<ExtArgs>
        fields: Prisma.ChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findFirst: {
            args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findMany: {
            args: Prisma.ChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          create: {
            args: Prisma.ChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          createMany: {
            args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          delete: {
            args: Prisma.ChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          update: {
            args: Prisma.ChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          aggregate: {
            args: Prisma.ChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatMessage>
          }
          groupBy: {
            args: Prisma.ChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      CharacterFavorite: {
        payload: Prisma.$CharacterFavoritePayload<ExtArgs>
        fields: Prisma.CharacterFavoriteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CharacterFavoriteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterFavoritePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CharacterFavoriteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterFavoritePayload>
          }
          findFirst: {
            args: Prisma.CharacterFavoriteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterFavoritePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CharacterFavoriteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterFavoritePayload>
          }
          findMany: {
            args: Prisma.CharacterFavoriteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterFavoritePayload>[]
          }
          create: {
            args: Prisma.CharacterFavoriteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterFavoritePayload>
          }
          createMany: {
            args: Prisma.CharacterFavoriteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CharacterFavoriteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterFavoritePayload>[]
          }
          delete: {
            args: Prisma.CharacterFavoriteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterFavoritePayload>
          }
          update: {
            args: Prisma.CharacterFavoriteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterFavoritePayload>
          }
          deleteMany: {
            args: Prisma.CharacterFavoriteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CharacterFavoriteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CharacterFavoriteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterFavoritePayload>
          }
          aggregate: {
            args: Prisma.CharacterFavoriteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCharacterFavorite>
          }
          groupBy: {
            args: Prisma.CharacterFavoriteGroupByArgs<ExtArgs>
            result: $Utils.Optional<CharacterFavoriteGroupByOutputType>[]
          }
          count: {
            args: Prisma.CharacterFavoriteCountArgs<ExtArgs>
            result: $Utils.Optional<CharacterFavoriteCountAggregateOutputType> | number
          }
        }
      }
      CharacterRating: {
        payload: Prisma.$CharacterRatingPayload<ExtArgs>
        fields: Prisma.CharacterRatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CharacterRatingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterRatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CharacterRatingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterRatingPayload>
          }
          findFirst: {
            args: Prisma.CharacterRatingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterRatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CharacterRatingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterRatingPayload>
          }
          findMany: {
            args: Prisma.CharacterRatingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterRatingPayload>[]
          }
          create: {
            args: Prisma.CharacterRatingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterRatingPayload>
          }
          createMany: {
            args: Prisma.CharacterRatingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CharacterRatingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterRatingPayload>[]
          }
          delete: {
            args: Prisma.CharacterRatingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterRatingPayload>
          }
          update: {
            args: Prisma.CharacterRatingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterRatingPayload>
          }
          deleteMany: {
            args: Prisma.CharacterRatingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CharacterRatingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CharacterRatingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterRatingPayload>
          }
          aggregate: {
            args: Prisma.CharacterRatingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCharacterRating>
          }
          groupBy: {
            args: Prisma.CharacterRatingGroupByArgs<ExtArgs>
            result: $Utils.Optional<CharacterRatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.CharacterRatingCountArgs<ExtArgs>
            result: $Utils.Optional<CharacterRatingCountAggregateOutputType> | number
          }
        }
      }
      AdminLog: {
        payload: Prisma.$AdminLogPayload<ExtArgs>
        fields: Prisma.AdminLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          findFirst: {
            args: Prisma.AdminLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          findMany: {
            args: Prisma.AdminLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>[]
          }
          create: {
            args: Prisma.AdminLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          createMany: {
            args: Prisma.AdminLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>[]
          }
          delete: {
            args: Prisma.AdminLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          update: {
            args: Prisma.AdminLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          deleteMany: {
            args: Prisma.AdminLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          aggregate: {
            args: Prisma.AdminLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminLog>
          }
          groupBy: {
            args: Prisma.AdminLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminLogCountArgs<ExtArgs>
            result: $Utils.Optional<AdminLogCountAggregateOutputType> | number
          }
        }
      }
      UsageLog: {
        payload: Prisma.$UsageLogPayload<ExtArgs>
        fields: Prisma.UsageLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsageLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsageLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageLogPayload>
          }
          findFirst: {
            args: Prisma.UsageLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsageLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageLogPayload>
          }
          findMany: {
            args: Prisma.UsageLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageLogPayload>[]
          }
          create: {
            args: Prisma.UsageLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageLogPayload>
          }
          createMany: {
            args: Prisma.UsageLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsageLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageLogPayload>[]
          }
          delete: {
            args: Prisma.UsageLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageLogPayload>
          }
          update: {
            args: Prisma.UsageLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageLogPayload>
          }
          deleteMany: {
            args: Prisma.UsageLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsageLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsageLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageLogPayload>
          }
          aggregate: {
            args: Prisma.UsageLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsageLog>
          }
          groupBy: {
            args: Prisma.UsageLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsageLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsageLogCountArgs<ExtArgs>
            result: $Utils.Optional<UsageLogCountAggregateOutputType> | number
          }
        }
      }
      Alert: {
        payload: Prisma.$AlertPayload<ExtArgs>
        fields: Prisma.AlertFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlertFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlertFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          findFirst: {
            args: Prisma.AlertFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlertFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          findMany: {
            args: Prisma.AlertFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>[]
          }
          create: {
            args: Prisma.AlertCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          createMany: {
            args: Prisma.AlertCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlertCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>[]
          }
          delete: {
            args: Prisma.AlertDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          update: {
            args: Prisma.AlertUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          deleteMany: {
            args: Prisma.AlertDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlertUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlertUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          aggregate: {
            args: Prisma.AlertAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlert>
          }
          groupBy: {
            args: Prisma.AlertGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlertGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlertCountArgs<ExtArgs>
            result: $Utils.Optional<AlertCountAggregateOutputType> | number
          }
        }
      }
      Channel: {
        payload: Prisma.$ChannelPayload<ExtArgs>
        fields: Prisma.ChannelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChannelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChannelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          findFirst: {
            args: Prisma.ChannelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChannelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          findMany: {
            args: Prisma.ChannelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>[]
          }
          create: {
            args: Prisma.ChannelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          createMany: {
            args: Prisma.ChannelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChannelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>[]
          }
          delete: {
            args: Prisma.ChannelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          update: {
            args: Prisma.ChannelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          deleteMany: {
            args: Prisma.ChannelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChannelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChannelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          aggregate: {
            args: Prisma.ChannelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChannel>
          }
          groupBy: {
            args: Prisma.ChannelGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChannelGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChannelCountArgs<ExtArgs>
            result: $Utils.Optional<ChannelCountAggregateOutputType> | number
          }
        }
      }
      Workflow: {
        payload: Prisma.$WorkflowPayload<ExtArgs>
        fields: Prisma.WorkflowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkflowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkflowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>
          }
          findFirst: {
            args: Prisma.WorkflowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkflowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>
          }
          findMany: {
            args: Prisma.WorkflowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>[]
          }
          create: {
            args: Prisma.WorkflowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>
          }
          createMany: {
            args: Prisma.WorkflowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkflowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>[]
          }
          delete: {
            args: Prisma.WorkflowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>
          }
          update: {
            args: Prisma.WorkflowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>
          }
          deleteMany: {
            args: Prisma.WorkflowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkflowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkflowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>
          }
          aggregate: {
            args: Prisma.WorkflowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflow>
          }
          groupBy: {
            args: Prisma.WorkflowGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkflowGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkflowCountArgs<ExtArgs>
            result: $Utils.Optional<WorkflowCountAggregateOutputType> | number
          }
        }
      }
      WorkflowInstance: {
        payload: Prisma.$WorkflowInstancePayload<ExtArgs>
        fields: Prisma.WorkflowInstanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkflowInstanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowInstancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkflowInstanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowInstancePayload>
          }
          findFirst: {
            args: Prisma.WorkflowInstanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowInstancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkflowInstanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowInstancePayload>
          }
          findMany: {
            args: Prisma.WorkflowInstanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowInstancePayload>[]
          }
          create: {
            args: Prisma.WorkflowInstanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowInstancePayload>
          }
          createMany: {
            args: Prisma.WorkflowInstanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkflowInstanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowInstancePayload>[]
          }
          delete: {
            args: Prisma.WorkflowInstanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowInstancePayload>
          }
          update: {
            args: Prisma.WorkflowInstanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowInstancePayload>
          }
          deleteMany: {
            args: Prisma.WorkflowInstanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkflowInstanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkflowInstanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowInstancePayload>
          }
          aggregate: {
            args: Prisma.WorkflowInstanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflowInstance>
          }
          groupBy: {
            args: Prisma.WorkflowInstanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkflowInstanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkflowInstanceCountArgs<ExtArgs>
            result: $Utils.Optional<WorkflowInstanceCountAggregateOutputType> | number
          }
        }
      }
      StepExecution: {
        payload: Prisma.$StepExecutionPayload<ExtArgs>
        fields: Prisma.StepExecutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StepExecutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StepExecutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>
          }
          findFirst: {
            args: Prisma.StepExecutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StepExecutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>
          }
          findMany: {
            args: Prisma.StepExecutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>[]
          }
          create: {
            args: Prisma.StepExecutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>
          }
          createMany: {
            args: Prisma.StepExecutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StepExecutionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>[]
          }
          delete: {
            args: Prisma.StepExecutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>
          }
          update: {
            args: Prisma.StepExecutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>
          }
          deleteMany: {
            args: Prisma.StepExecutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StepExecutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StepExecutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>
          }
          aggregate: {
            args: Prisma.StepExecutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStepExecution>
          }
          groupBy: {
            args: Prisma.StepExecutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<StepExecutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.StepExecutionCountArgs<ExtArgs>
            result: $Utils.Optional<StepExecutionCountAggregateOutputType> | number
          }
        }
      }
      WorkflowLog: {
        payload: Prisma.$WorkflowLogPayload<ExtArgs>
        fields: Prisma.WorkflowLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkflowLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkflowLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowLogPayload>
          }
          findFirst: {
            args: Prisma.WorkflowLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkflowLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowLogPayload>
          }
          findMany: {
            args: Prisma.WorkflowLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowLogPayload>[]
          }
          create: {
            args: Prisma.WorkflowLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowLogPayload>
          }
          createMany: {
            args: Prisma.WorkflowLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkflowLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowLogPayload>[]
          }
          delete: {
            args: Prisma.WorkflowLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowLogPayload>
          }
          update: {
            args: Prisma.WorkflowLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowLogPayload>
          }
          deleteMany: {
            args: Prisma.WorkflowLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkflowLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkflowLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowLogPayload>
          }
          aggregate: {
            args: Prisma.WorkflowLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflowLog>
          }
          groupBy: {
            args: Prisma.WorkflowLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkflowLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkflowLogCountArgs<ExtArgs>
            result: $Utils.Optional<WorkflowLogCountAggregateOutputType> | number
          }
        }
      }
      WorkflowTemplate: {
        payload: Prisma.$WorkflowTemplatePayload<ExtArgs>
        fields: Prisma.WorkflowTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkflowTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkflowTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          findFirst: {
            args: Prisma.WorkflowTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkflowTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          findMany: {
            args: Prisma.WorkflowTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>[]
          }
          create: {
            args: Prisma.WorkflowTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          createMany: {
            args: Prisma.WorkflowTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkflowTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>[]
          }
          delete: {
            args: Prisma.WorkflowTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          update: {
            args: Prisma.WorkflowTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          deleteMany: {
            args: Prisma.WorkflowTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkflowTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkflowTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          aggregate: {
            args: Prisma.WorkflowTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflowTemplate>
          }
          groupBy: {
            args: Prisma.WorkflowTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkflowTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkflowTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<WorkflowTemplateCountAggregateOutputType> | number
          }
        }
      }
      WorkflowRating: {
        payload: Prisma.$WorkflowRatingPayload<ExtArgs>
        fields: Prisma.WorkflowRatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkflowRatingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkflowRatingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRatingPayload>
          }
          findFirst: {
            args: Prisma.WorkflowRatingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkflowRatingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRatingPayload>
          }
          findMany: {
            args: Prisma.WorkflowRatingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRatingPayload>[]
          }
          create: {
            args: Prisma.WorkflowRatingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRatingPayload>
          }
          createMany: {
            args: Prisma.WorkflowRatingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkflowRatingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRatingPayload>[]
          }
          delete: {
            args: Prisma.WorkflowRatingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRatingPayload>
          }
          update: {
            args: Prisma.WorkflowRatingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRatingPayload>
          }
          deleteMany: {
            args: Prisma.WorkflowRatingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkflowRatingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkflowRatingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRatingPayload>
          }
          aggregate: {
            args: Prisma.WorkflowRatingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflowRating>
          }
          groupBy: {
            args: Prisma.WorkflowRatingGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkflowRatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkflowRatingCountArgs<ExtArgs>
            result: $Utils.Optional<WorkflowRatingCountAggregateOutputType> | number
          }
        }
      }
      ScheduledTask: {
        payload: Prisma.$ScheduledTaskPayload<ExtArgs>
        fields: Prisma.ScheduledTaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduledTaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledTaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduledTaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledTaskPayload>
          }
          findFirst: {
            args: Prisma.ScheduledTaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledTaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduledTaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledTaskPayload>
          }
          findMany: {
            args: Prisma.ScheduledTaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledTaskPayload>[]
          }
          create: {
            args: Prisma.ScheduledTaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledTaskPayload>
          }
          createMany: {
            args: Prisma.ScheduledTaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScheduledTaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledTaskPayload>[]
          }
          delete: {
            args: Prisma.ScheduledTaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledTaskPayload>
          }
          update: {
            args: Prisma.ScheduledTaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledTaskPayload>
          }
          deleteMany: {
            args: Prisma.ScheduledTaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduledTaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScheduledTaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledTaskPayload>
          }
          aggregate: {
            args: Prisma.ScheduledTaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScheduledTask>
          }
          groupBy: {
            args: Prisma.ScheduledTaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduledTaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduledTaskCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduledTaskCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    characters: number
    chatSessions: number
    messages: number
    favorites: number
    ratings: number
    transactions: number
    oauthAccounts: number
    refreshTokens: number
    ownedChatRooms: number
    chatParticipants: number
    chatMessages: number
    workflows: number
    workflowInstances: number
    workflowRatings: number
    scheduledTasks: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    characters?: boolean | UserCountOutputTypeCountCharactersArgs
    chatSessions?: boolean | UserCountOutputTypeCountChatSessionsArgs
    messages?: boolean | UserCountOutputTypeCountMessagesArgs
    favorites?: boolean | UserCountOutputTypeCountFavoritesArgs
    ratings?: boolean | UserCountOutputTypeCountRatingsArgs
    transactions?: boolean | UserCountOutputTypeCountTransactionsArgs
    oauthAccounts?: boolean | UserCountOutputTypeCountOauthAccountsArgs
    refreshTokens?: boolean | UserCountOutputTypeCountRefreshTokensArgs
    ownedChatRooms?: boolean | UserCountOutputTypeCountOwnedChatRoomsArgs
    chatParticipants?: boolean | UserCountOutputTypeCountChatParticipantsArgs
    chatMessages?: boolean | UserCountOutputTypeCountChatMessagesArgs
    workflows?: boolean | UserCountOutputTypeCountWorkflowsArgs
    workflowInstances?: boolean | UserCountOutputTypeCountWorkflowInstancesArgs
    workflowRatings?: boolean | UserCountOutputTypeCountWorkflowRatingsArgs
    scheduledTasks?: boolean | UserCountOutputTypeCountScheduledTasksArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCharactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterFavoriteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterRatingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOauthAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OAuthAccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRefreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedChatRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatParticipantWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkflowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkflowInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowInstanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkflowRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowRatingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountScheduledTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduledTaskWhereInput
  }


  /**
   * Count Type CharacterCountOutputType
   */

  export type CharacterCountOutputType = {
    chatSessions: number
    messages: number
    favorites: number
    ratings: number
    chatParticipants: number
    chatMessages: number
  }

  export type CharacterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatSessions?: boolean | CharacterCountOutputTypeCountChatSessionsArgs
    messages?: boolean | CharacterCountOutputTypeCountMessagesArgs
    favorites?: boolean | CharacterCountOutputTypeCountFavoritesArgs
    ratings?: boolean | CharacterCountOutputTypeCountRatingsArgs
    chatParticipants?: boolean | CharacterCountOutputTypeCountChatParticipantsArgs
    chatMessages?: boolean | CharacterCountOutputTypeCountChatMessagesArgs
  }

  // Custom InputTypes
  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterCountOutputType
     */
    select?: CharacterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountChatSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatSessionWhereInput
  }

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountFavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterFavoriteWhereInput
  }

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterRatingWhereInput
  }

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountChatParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatParticipantWhereInput
  }

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountChatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }


  /**
   * Count Type ChatSessionCountOutputType
   */

  export type ChatSessionCountOutputType = {
    messages: number
  }

  export type ChatSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatSessionCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatSessionCountOutputType without action
   */
  export type ChatSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessionCountOutputType
     */
    select?: ChatSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatSessionCountOutputType without action
   */
  export type ChatSessionCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Count Type ChatRoomCountOutputType
   */

  export type ChatRoomCountOutputType = {
    participants: number
    messages: number
  }

  export type ChatRoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | ChatRoomCountOutputTypeCountParticipantsArgs
    messages?: boolean | ChatRoomCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomCountOutputType
     */
    select?: ChatRoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatParticipantWhereInput
  }

  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }


  /**
   * Count Type ChatMessageCountOutputType
   */

  export type ChatMessageCountOutputType = {
    replies: number
  }

  export type ChatMessageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | ChatMessageCountOutputTypeCountRepliesArgs
  }

  // Custom InputTypes
  /**
   * ChatMessageCountOutputType without action
   */
  export type ChatMessageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessageCountOutputType
     */
    select?: ChatMessageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatMessageCountOutputType without action
   */
  export type ChatMessageCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }


  /**
   * Count Type WorkflowCountOutputType
   */

  export type WorkflowCountOutputType = {
    instances: number
    templates: number
    ratings: number
    scheduledTasks: number
  }

  export type WorkflowCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instances?: boolean | WorkflowCountOutputTypeCountInstancesArgs
    templates?: boolean | WorkflowCountOutputTypeCountTemplatesArgs
    ratings?: boolean | WorkflowCountOutputTypeCountRatingsArgs
    scheduledTasks?: boolean | WorkflowCountOutputTypeCountScheduledTasksArgs
  }

  // Custom InputTypes
  /**
   * WorkflowCountOutputType without action
   */
  export type WorkflowCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowCountOutputType
     */
    select?: WorkflowCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkflowCountOutputType without action
   */
  export type WorkflowCountOutputTypeCountInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowInstanceWhereInput
  }

  /**
   * WorkflowCountOutputType without action
   */
  export type WorkflowCountOutputTypeCountTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowTemplateWhereInput
  }

  /**
   * WorkflowCountOutputType without action
   */
  export type WorkflowCountOutputTypeCountRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowRatingWhereInput
  }

  /**
   * WorkflowCountOutputType without action
   */
  export type WorkflowCountOutputTypeCountScheduledTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduledTaskWhereInput
  }


  /**
   * Count Type WorkflowInstanceCountOutputType
   */

  export type WorkflowInstanceCountOutputType = {
    executions: number
    logs: number
  }

  export type WorkflowInstanceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    executions?: boolean | WorkflowInstanceCountOutputTypeCountExecutionsArgs
    logs?: boolean | WorkflowInstanceCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * WorkflowInstanceCountOutputType without action
   */
  export type WorkflowInstanceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowInstanceCountOutputType
     */
    select?: WorkflowInstanceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkflowInstanceCountOutputType without action
   */
  export type WorkflowInstanceCountOutputTypeCountExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StepExecutionWhereInput
  }

  /**
   * WorkflowInstanceCountOutputType without action
   */
  export type WorkflowInstanceCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    credits: number | null
  }

  export type UserSumAggregateOutputType = {
    credits: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    passwordHash: string | null
    avatar: string | null
    bio: string | null
    role: string | null
    credits: number | null
    subscriptionTier: string | null
    subscriptionExpiresAt: Date | null
    isActive: boolean | null
    isVerified: boolean | null
    verificationToken: string | null
    resetPasswordToken: string | null
    resetPasswordExpires: Date | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    passwordHash: string | null
    avatar: string | null
    bio: string | null
    role: string | null
    credits: number | null
    subscriptionTier: string | null
    subscriptionExpiresAt: Date | null
    isActive: boolean | null
    isVerified: boolean | null
    verificationToken: string | null
    resetPasswordToken: string | null
    resetPasswordExpires: Date | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    passwordHash: number
    avatar: number
    bio: number
    role: number
    credits: number
    subscriptionTier: number
    subscriptionExpiresAt: number
    isActive: number
    isVerified: number
    verificationToken: number
    resetPasswordToken: number
    resetPasswordExpires: number
    lastLoginAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    credits?: true
  }

  export type UserSumAggregateInputType = {
    credits?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    passwordHash?: true
    avatar?: true
    bio?: true
    role?: true
    credits?: true
    subscriptionTier?: true
    subscriptionExpiresAt?: true
    isActive?: true
    isVerified?: true
    verificationToken?: true
    resetPasswordToken?: true
    resetPasswordExpires?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    passwordHash?: true
    avatar?: true
    bio?: true
    role?: true
    credits?: true
    subscriptionTier?: true
    subscriptionExpiresAt?: true
    isActive?: true
    isVerified?: true
    verificationToken?: true
    resetPasswordToken?: true
    resetPasswordExpires?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    passwordHash?: true
    avatar?: true
    bio?: true
    role?: true
    credits?: true
    subscriptionTier?: true
    subscriptionExpiresAt?: true
    isActive?: true
    isVerified?: true
    verificationToken?: true
    resetPasswordToken?: true
    resetPasswordExpires?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string
    passwordHash: string | null
    avatar: string | null
    bio: string | null
    role: string
    credits: number
    subscriptionTier: string
    subscriptionExpiresAt: Date | null
    isActive: boolean
    isVerified: boolean
    verificationToken: string | null
    resetPasswordToken: string | null
    resetPasswordExpires: Date | null
    lastLoginAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    avatar?: boolean
    bio?: boolean
    role?: boolean
    credits?: boolean
    subscriptionTier?: boolean
    subscriptionExpiresAt?: boolean
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    resetPasswordToken?: boolean
    resetPasswordExpires?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    characters?: boolean | User$charactersArgs<ExtArgs>
    chatSessions?: boolean | User$chatSessionsArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    favorites?: boolean | User$favoritesArgs<ExtArgs>
    ratings?: boolean | User$ratingsArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    oauthAccounts?: boolean | User$oauthAccountsArgs<ExtArgs>
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    ownedChatRooms?: boolean | User$ownedChatRoomsArgs<ExtArgs>
    chatParticipants?: boolean | User$chatParticipantsArgs<ExtArgs>
    chatMessages?: boolean | User$chatMessagesArgs<ExtArgs>
    workflows?: boolean | User$workflowsArgs<ExtArgs>
    workflowInstances?: boolean | User$workflowInstancesArgs<ExtArgs>
    workflowRatings?: boolean | User$workflowRatingsArgs<ExtArgs>
    scheduledTasks?: boolean | User$scheduledTasksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    avatar?: boolean
    bio?: boolean
    role?: boolean
    credits?: boolean
    subscriptionTier?: boolean
    subscriptionExpiresAt?: boolean
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    resetPasswordToken?: boolean
    resetPasswordExpires?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    avatar?: boolean
    bio?: boolean
    role?: boolean
    credits?: boolean
    subscriptionTier?: boolean
    subscriptionExpiresAt?: boolean
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    resetPasswordToken?: boolean
    resetPasswordExpires?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    characters?: boolean | User$charactersArgs<ExtArgs>
    chatSessions?: boolean | User$chatSessionsArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    favorites?: boolean | User$favoritesArgs<ExtArgs>
    ratings?: boolean | User$ratingsArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    oauthAccounts?: boolean | User$oauthAccountsArgs<ExtArgs>
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    ownedChatRooms?: boolean | User$ownedChatRoomsArgs<ExtArgs>
    chatParticipants?: boolean | User$chatParticipantsArgs<ExtArgs>
    chatMessages?: boolean | User$chatMessagesArgs<ExtArgs>
    workflows?: boolean | User$workflowsArgs<ExtArgs>
    workflowInstances?: boolean | User$workflowInstancesArgs<ExtArgs>
    workflowRatings?: boolean | User$workflowRatingsArgs<ExtArgs>
    scheduledTasks?: boolean | User$scheduledTasksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      characters: Prisma.$CharacterPayload<ExtArgs>[]
      chatSessions: Prisma.$ChatSessionPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
      favorites: Prisma.$CharacterFavoritePayload<ExtArgs>[]
      ratings: Prisma.$CharacterRatingPayload<ExtArgs>[]
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      oauthAccounts: Prisma.$OAuthAccountPayload<ExtArgs>[]
      refreshTokens: Prisma.$RefreshTokenPayload<ExtArgs>[]
      ownedChatRooms: Prisma.$ChatRoomPayload<ExtArgs>[]
      chatParticipants: Prisma.$ChatParticipantPayload<ExtArgs>[]
      chatMessages: Prisma.$ChatMessagePayload<ExtArgs>[]
      workflows: Prisma.$WorkflowPayload<ExtArgs>[]
      workflowInstances: Prisma.$WorkflowInstancePayload<ExtArgs>[]
      workflowRatings: Prisma.$WorkflowRatingPayload<ExtArgs>[]
      scheduledTasks: Prisma.$ScheduledTaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      email: string
      passwordHash: string | null
      avatar: string | null
      bio: string | null
      role: string
      credits: number
      subscriptionTier: string
      subscriptionExpiresAt: Date | null
      isActive: boolean
      isVerified: boolean
      verificationToken: string | null
      resetPasswordToken: string | null
      resetPasswordExpires: Date | null
      lastLoginAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    characters<T extends User$charactersArgs<ExtArgs> = {}>(args?: Subset<T, User$charactersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findMany"> | Null>
    chatSessions<T extends User$chatSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$chatSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findMany"> | Null>
    messages<T extends User$messagesArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    favorites<T extends User$favoritesArgs<ExtArgs> = {}>(args?: Subset<T, User$favoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterFavoritePayload<ExtArgs>, T, "findMany"> | Null>
    ratings<T extends User$ratingsArgs<ExtArgs> = {}>(args?: Subset<T, User$ratingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterRatingPayload<ExtArgs>, T, "findMany"> | Null>
    transactions<T extends User$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    oauthAccounts<T extends User$oauthAccountsArgs<ExtArgs> = {}>(args?: Subset<T, User$oauthAccountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "findMany"> | Null>
    refreshTokens<T extends User$refreshTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$refreshTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany"> | Null>
    ownedChatRooms<T extends User$ownedChatRoomsArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedChatRoomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findMany"> | Null>
    chatParticipants<T extends User$chatParticipantsArgs<ExtArgs> = {}>(args?: Subset<T, User$chatParticipantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    chatMessages<T extends User$chatMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$chatMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany"> | Null>
    workflows<T extends User$workflowsArgs<ExtArgs> = {}>(args?: Subset<T, User$workflowsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findMany"> | Null>
    workflowInstances<T extends User$workflowInstancesArgs<ExtArgs> = {}>(args?: Subset<T, User$workflowInstancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowInstancePayload<ExtArgs>, T, "findMany"> | Null>
    workflowRatings<T extends User$workflowRatingsArgs<ExtArgs> = {}>(args?: Subset<T, User$workflowRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowRatingPayload<ExtArgs>, T, "findMany"> | Null>
    scheduledTasks<T extends User$scheduledTasksArgs<ExtArgs> = {}>(args?: Subset<T, User$scheduledTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledTaskPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly credits: FieldRef<"User", 'Int'>
    readonly subscriptionTier: FieldRef<"User", 'String'>
    readonly subscriptionExpiresAt: FieldRef<"User", 'DateTime'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly verificationToken: FieldRef<"User", 'String'>
    readonly resetPasswordToken: FieldRef<"User", 'String'>
    readonly resetPasswordExpires: FieldRef<"User", 'DateTime'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.characters
   */
  export type User$charactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    where?: CharacterWhereInput
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    cursor?: CharacterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * User.chatSessions
   */
  export type User$chatSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    where?: ChatSessionWhereInput
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    cursor?: ChatSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * User.messages
   */
  export type User$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.favorites
   */
  export type User$favoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterFavorite
     */
    select?: CharacterFavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterFavoriteInclude<ExtArgs> | null
    where?: CharacterFavoriteWhereInput
    orderBy?: CharacterFavoriteOrderByWithRelationInput | CharacterFavoriteOrderByWithRelationInput[]
    cursor?: CharacterFavoriteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CharacterFavoriteScalarFieldEnum | CharacterFavoriteScalarFieldEnum[]
  }

  /**
   * User.ratings
   */
  export type User$ratingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterRating
     */
    select?: CharacterRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterRatingInclude<ExtArgs> | null
    where?: CharacterRatingWhereInput
    orderBy?: CharacterRatingOrderByWithRelationInput | CharacterRatingOrderByWithRelationInput[]
    cursor?: CharacterRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CharacterRatingScalarFieldEnum | CharacterRatingScalarFieldEnum[]
  }

  /**
   * User.transactions
   */
  export type User$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.oauthAccounts
   */
  export type User$oauthAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    where?: OAuthAccountWhereInput
    orderBy?: OAuthAccountOrderByWithRelationInput | OAuthAccountOrderByWithRelationInput[]
    cursor?: OAuthAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OAuthAccountScalarFieldEnum | OAuthAccountScalarFieldEnum[]
  }

  /**
   * User.refreshTokens
   */
  export type User$refreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    cursor?: RefreshTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * User.ownedChatRooms
   */
  export type User$ownedChatRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    where?: ChatRoomWhereInput
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    cursor?: ChatRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * User.chatParticipants
   */
  export type User$chatParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatParticipant
     */
    select?: ChatParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatParticipantInclude<ExtArgs> | null
    where?: ChatParticipantWhereInput
    orderBy?: ChatParticipantOrderByWithRelationInput | ChatParticipantOrderByWithRelationInput[]
    cursor?: ChatParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatParticipantScalarFieldEnum | ChatParticipantScalarFieldEnum[]
  }

  /**
   * User.chatMessages
   */
  export type User$chatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * User.workflows
   */
  export type User$workflowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    where?: WorkflowWhereInput
    orderBy?: WorkflowOrderByWithRelationInput | WorkflowOrderByWithRelationInput[]
    cursor?: WorkflowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowScalarFieldEnum | WorkflowScalarFieldEnum[]
  }

  /**
   * User.workflowInstances
   */
  export type User$workflowInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowInstance
     */
    select?: WorkflowInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInstanceInclude<ExtArgs> | null
    where?: WorkflowInstanceWhereInput
    orderBy?: WorkflowInstanceOrderByWithRelationInput | WorkflowInstanceOrderByWithRelationInput[]
    cursor?: WorkflowInstanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowInstanceScalarFieldEnum | WorkflowInstanceScalarFieldEnum[]
  }

  /**
   * User.workflowRatings
   */
  export type User$workflowRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRating
     */
    select?: WorkflowRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRatingInclude<ExtArgs> | null
    where?: WorkflowRatingWhereInput
    orderBy?: WorkflowRatingOrderByWithRelationInput | WorkflowRatingOrderByWithRelationInput[]
    cursor?: WorkflowRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowRatingScalarFieldEnum | WorkflowRatingScalarFieldEnum[]
  }

  /**
   * User.scheduledTasks
   */
  export type User$scheduledTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledTask
     */
    select?: ScheduledTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledTaskInclude<ExtArgs> | null
    where?: ScheduledTaskWhereInput
    orderBy?: ScheduledTaskOrderByWithRelationInput | ScheduledTaskOrderByWithRelationInput[]
    cursor?: ScheduledTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduledTaskScalarFieldEnum | ScheduledTaskScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model OAuthAccount
   */

  export type AggregateOAuthAccount = {
    _count: OAuthAccountCountAggregateOutputType | null
    _min: OAuthAccountMinAggregateOutputType | null
    _max: OAuthAccountMaxAggregateOutputType | null
  }

  export type OAuthAccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    provider: string | null
    providerId: string | null
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OAuthAccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    provider: string | null
    providerId: string | null
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OAuthAccountCountAggregateOutputType = {
    id: number
    userId: number
    provider: number
    providerId: number
    accessToken: number
    refreshToken: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OAuthAccountMinAggregateInputType = {
    id?: true
    userId?: true
    provider?: true
    providerId?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OAuthAccountMaxAggregateInputType = {
    id?: true
    userId?: true
    provider?: true
    providerId?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OAuthAccountCountAggregateInputType = {
    id?: true
    userId?: true
    provider?: true
    providerId?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OAuthAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OAuthAccount to aggregate.
     */
    where?: OAuthAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OAuthAccounts to fetch.
     */
    orderBy?: OAuthAccountOrderByWithRelationInput | OAuthAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OAuthAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OAuthAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OAuthAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OAuthAccounts
    **/
    _count?: true | OAuthAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OAuthAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OAuthAccountMaxAggregateInputType
  }

  export type GetOAuthAccountAggregateType<T extends OAuthAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateOAuthAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOAuthAccount[P]>
      : GetScalarType<T[P], AggregateOAuthAccount[P]>
  }




  export type OAuthAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OAuthAccountWhereInput
    orderBy?: OAuthAccountOrderByWithAggregationInput | OAuthAccountOrderByWithAggregationInput[]
    by: OAuthAccountScalarFieldEnum[] | OAuthAccountScalarFieldEnum
    having?: OAuthAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OAuthAccountCountAggregateInputType | true
    _min?: OAuthAccountMinAggregateInputType
    _max?: OAuthAccountMaxAggregateInputType
  }

  export type OAuthAccountGroupByOutputType = {
    id: string
    userId: string
    provider: string
    providerId: string
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: OAuthAccountCountAggregateOutputType | null
    _min: OAuthAccountMinAggregateOutputType | null
    _max: OAuthAccountMaxAggregateOutputType | null
  }

  type GetOAuthAccountGroupByPayload<T extends OAuthAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OAuthAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OAuthAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OAuthAccountGroupByOutputType[P]>
            : GetScalarType<T[P], OAuthAccountGroupByOutputType[P]>
        }
      >
    >


  export type OAuthAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    provider?: boolean
    providerId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oAuthAccount"]>

  export type OAuthAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    provider?: boolean
    providerId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oAuthAccount"]>

  export type OAuthAccountSelectScalar = {
    id?: boolean
    userId?: boolean
    provider?: boolean
    providerId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OAuthAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OAuthAccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OAuthAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OAuthAccount"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      provider: string
      providerId: string
      accessToken: string | null
      refreshToken: string | null
      expiresAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["oAuthAccount"]>
    composites: {}
  }

  type OAuthAccountGetPayload<S extends boolean | null | undefined | OAuthAccountDefaultArgs> = $Result.GetResult<Prisma.$OAuthAccountPayload, S>

  type OAuthAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OAuthAccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OAuthAccountCountAggregateInputType | true
    }

  export interface OAuthAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OAuthAccount'], meta: { name: 'OAuthAccount' } }
    /**
     * Find zero or one OAuthAccount that matches the filter.
     * @param {OAuthAccountFindUniqueArgs} args - Arguments to find a OAuthAccount
     * @example
     * // Get one OAuthAccount
     * const oAuthAccount = await prisma.oAuthAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OAuthAccountFindUniqueArgs>(args: SelectSubset<T, OAuthAccountFindUniqueArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OAuthAccount that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OAuthAccountFindUniqueOrThrowArgs} args - Arguments to find a OAuthAccount
     * @example
     * // Get one OAuthAccount
     * const oAuthAccount = await prisma.oAuthAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OAuthAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, OAuthAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OAuthAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthAccountFindFirstArgs} args - Arguments to find a OAuthAccount
     * @example
     * // Get one OAuthAccount
     * const oAuthAccount = await prisma.oAuthAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OAuthAccountFindFirstArgs>(args?: SelectSubset<T, OAuthAccountFindFirstArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OAuthAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthAccountFindFirstOrThrowArgs} args - Arguments to find a OAuthAccount
     * @example
     * // Get one OAuthAccount
     * const oAuthAccount = await prisma.oAuthAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OAuthAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, OAuthAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OAuthAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OAuthAccounts
     * const oAuthAccounts = await prisma.oAuthAccount.findMany()
     * 
     * // Get first 10 OAuthAccounts
     * const oAuthAccounts = await prisma.oAuthAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const oAuthAccountWithIdOnly = await prisma.oAuthAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OAuthAccountFindManyArgs>(args?: SelectSubset<T, OAuthAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OAuthAccount.
     * @param {OAuthAccountCreateArgs} args - Arguments to create a OAuthAccount.
     * @example
     * // Create one OAuthAccount
     * const OAuthAccount = await prisma.oAuthAccount.create({
     *   data: {
     *     // ... data to create a OAuthAccount
     *   }
     * })
     * 
     */
    create<T extends OAuthAccountCreateArgs>(args: SelectSubset<T, OAuthAccountCreateArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OAuthAccounts.
     * @param {OAuthAccountCreateManyArgs} args - Arguments to create many OAuthAccounts.
     * @example
     * // Create many OAuthAccounts
     * const oAuthAccount = await prisma.oAuthAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OAuthAccountCreateManyArgs>(args?: SelectSubset<T, OAuthAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OAuthAccounts and returns the data saved in the database.
     * @param {OAuthAccountCreateManyAndReturnArgs} args - Arguments to create many OAuthAccounts.
     * @example
     * // Create many OAuthAccounts
     * const oAuthAccount = await prisma.oAuthAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OAuthAccounts and only return the `id`
     * const oAuthAccountWithIdOnly = await prisma.oAuthAccount.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OAuthAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, OAuthAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OAuthAccount.
     * @param {OAuthAccountDeleteArgs} args - Arguments to delete one OAuthAccount.
     * @example
     * // Delete one OAuthAccount
     * const OAuthAccount = await prisma.oAuthAccount.delete({
     *   where: {
     *     // ... filter to delete one OAuthAccount
     *   }
     * })
     * 
     */
    delete<T extends OAuthAccountDeleteArgs>(args: SelectSubset<T, OAuthAccountDeleteArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OAuthAccount.
     * @param {OAuthAccountUpdateArgs} args - Arguments to update one OAuthAccount.
     * @example
     * // Update one OAuthAccount
     * const oAuthAccount = await prisma.oAuthAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OAuthAccountUpdateArgs>(args: SelectSubset<T, OAuthAccountUpdateArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OAuthAccounts.
     * @param {OAuthAccountDeleteManyArgs} args - Arguments to filter OAuthAccounts to delete.
     * @example
     * // Delete a few OAuthAccounts
     * const { count } = await prisma.oAuthAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OAuthAccountDeleteManyArgs>(args?: SelectSubset<T, OAuthAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OAuthAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OAuthAccounts
     * const oAuthAccount = await prisma.oAuthAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OAuthAccountUpdateManyArgs>(args: SelectSubset<T, OAuthAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OAuthAccount.
     * @param {OAuthAccountUpsertArgs} args - Arguments to update or create a OAuthAccount.
     * @example
     * // Update or create a OAuthAccount
     * const oAuthAccount = await prisma.oAuthAccount.upsert({
     *   create: {
     *     // ... data to create a OAuthAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OAuthAccount we want to update
     *   }
     * })
     */
    upsert<T extends OAuthAccountUpsertArgs>(args: SelectSubset<T, OAuthAccountUpsertArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OAuthAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthAccountCountArgs} args - Arguments to filter OAuthAccounts to count.
     * @example
     * // Count the number of OAuthAccounts
     * const count = await prisma.oAuthAccount.count({
     *   where: {
     *     // ... the filter for the OAuthAccounts we want to count
     *   }
     * })
    **/
    count<T extends OAuthAccountCountArgs>(
      args?: Subset<T, OAuthAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OAuthAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OAuthAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OAuthAccountAggregateArgs>(args: Subset<T, OAuthAccountAggregateArgs>): Prisma.PrismaPromise<GetOAuthAccountAggregateType<T>>

    /**
     * Group by OAuthAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OAuthAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OAuthAccountGroupByArgs['orderBy'] }
        : { orderBy?: OAuthAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OAuthAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOAuthAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OAuthAccount model
   */
  readonly fields: OAuthAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OAuthAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OAuthAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OAuthAccount model
   */ 
  interface OAuthAccountFieldRefs {
    readonly id: FieldRef<"OAuthAccount", 'String'>
    readonly userId: FieldRef<"OAuthAccount", 'String'>
    readonly provider: FieldRef<"OAuthAccount", 'String'>
    readonly providerId: FieldRef<"OAuthAccount", 'String'>
    readonly accessToken: FieldRef<"OAuthAccount", 'String'>
    readonly refreshToken: FieldRef<"OAuthAccount", 'String'>
    readonly expiresAt: FieldRef<"OAuthAccount", 'DateTime'>
    readonly createdAt: FieldRef<"OAuthAccount", 'DateTime'>
    readonly updatedAt: FieldRef<"OAuthAccount", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OAuthAccount findUnique
   */
  export type OAuthAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * Filter, which OAuthAccount to fetch.
     */
    where: OAuthAccountWhereUniqueInput
  }

  /**
   * OAuthAccount findUniqueOrThrow
   */
  export type OAuthAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * Filter, which OAuthAccount to fetch.
     */
    where: OAuthAccountWhereUniqueInput
  }

  /**
   * OAuthAccount findFirst
   */
  export type OAuthAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * Filter, which OAuthAccount to fetch.
     */
    where?: OAuthAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OAuthAccounts to fetch.
     */
    orderBy?: OAuthAccountOrderByWithRelationInput | OAuthAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OAuthAccounts.
     */
    cursor?: OAuthAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OAuthAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OAuthAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OAuthAccounts.
     */
    distinct?: OAuthAccountScalarFieldEnum | OAuthAccountScalarFieldEnum[]
  }

  /**
   * OAuthAccount findFirstOrThrow
   */
  export type OAuthAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * Filter, which OAuthAccount to fetch.
     */
    where?: OAuthAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OAuthAccounts to fetch.
     */
    orderBy?: OAuthAccountOrderByWithRelationInput | OAuthAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OAuthAccounts.
     */
    cursor?: OAuthAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OAuthAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OAuthAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OAuthAccounts.
     */
    distinct?: OAuthAccountScalarFieldEnum | OAuthAccountScalarFieldEnum[]
  }

  /**
   * OAuthAccount findMany
   */
  export type OAuthAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * Filter, which OAuthAccounts to fetch.
     */
    where?: OAuthAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OAuthAccounts to fetch.
     */
    orderBy?: OAuthAccountOrderByWithRelationInput | OAuthAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OAuthAccounts.
     */
    cursor?: OAuthAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OAuthAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OAuthAccounts.
     */
    skip?: number
    distinct?: OAuthAccountScalarFieldEnum | OAuthAccountScalarFieldEnum[]
  }

  /**
   * OAuthAccount create
   */
  export type OAuthAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a OAuthAccount.
     */
    data: XOR<OAuthAccountCreateInput, OAuthAccountUncheckedCreateInput>
  }

  /**
   * OAuthAccount createMany
   */
  export type OAuthAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OAuthAccounts.
     */
    data: OAuthAccountCreateManyInput | OAuthAccountCreateManyInput[]
  }

  /**
   * OAuthAccount createManyAndReturn
   */
  export type OAuthAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OAuthAccounts.
     */
    data: OAuthAccountCreateManyInput | OAuthAccountCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OAuthAccount update
   */
  export type OAuthAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a OAuthAccount.
     */
    data: XOR<OAuthAccountUpdateInput, OAuthAccountUncheckedUpdateInput>
    /**
     * Choose, which OAuthAccount to update.
     */
    where: OAuthAccountWhereUniqueInput
  }

  /**
   * OAuthAccount updateMany
   */
  export type OAuthAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OAuthAccounts.
     */
    data: XOR<OAuthAccountUpdateManyMutationInput, OAuthAccountUncheckedUpdateManyInput>
    /**
     * Filter which OAuthAccounts to update
     */
    where?: OAuthAccountWhereInput
  }

  /**
   * OAuthAccount upsert
   */
  export type OAuthAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the OAuthAccount to update in case it exists.
     */
    where: OAuthAccountWhereUniqueInput
    /**
     * In case the OAuthAccount found by the `where` argument doesn't exist, create a new OAuthAccount with this data.
     */
    create: XOR<OAuthAccountCreateInput, OAuthAccountUncheckedCreateInput>
    /**
     * In case the OAuthAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OAuthAccountUpdateInput, OAuthAccountUncheckedUpdateInput>
  }

  /**
   * OAuthAccount delete
   */
  export type OAuthAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * Filter which OAuthAccount to delete.
     */
    where: OAuthAccountWhereUniqueInput
  }

  /**
   * OAuthAccount deleteMany
   */
  export type OAuthAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OAuthAccounts to delete
     */
    where?: OAuthAccountWhereInput
  }

  /**
   * OAuthAccount without action
   */
  export type OAuthAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
  }


  /**
   * Model RefreshToken
   */

  export type AggregateRefreshToken = {
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  export type RefreshTokenMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type RefreshTokenMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type RefreshTokenCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type RefreshTokenMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
  }

  export type RefreshTokenMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
  }

  export type RefreshTokenCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type RefreshTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshToken to aggregate.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefreshTokens
    **/
    _count?: true | RefreshTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefreshTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type GetRefreshTokenAggregateType<T extends RefreshTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateRefreshToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefreshToken[P]>
      : GetScalarType<T[P], AggregateRefreshToken[P]>
  }




  export type RefreshTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithAggregationInput | RefreshTokenOrderByWithAggregationInput[]
    by: RefreshTokenScalarFieldEnum[] | RefreshTokenScalarFieldEnum
    having?: RefreshTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefreshTokenCountAggregateInputType | true
    _min?: RefreshTokenMinAggregateInputType
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type RefreshTokenGroupByOutputType = {
    id: string
    userId: string
    token: string
    expiresAt: Date
    createdAt: Date
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  type GetRefreshTokenGroupByPayload<T extends RefreshTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefreshTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefreshTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
            : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
        }
      >
    >


  export type RefreshTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type RefreshTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RefreshTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RefreshTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefreshToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["refreshToken"]>
    composites: {}
  }

  type RefreshTokenGetPayload<S extends boolean | null | undefined | RefreshTokenDefaultArgs> = $Result.GetResult<Prisma.$RefreshTokenPayload, S>

  type RefreshTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefreshTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefreshTokenCountAggregateInputType | true
    }

  export interface RefreshTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefreshToken'], meta: { name: 'RefreshToken' } }
    /**
     * Find zero or one RefreshToken that matches the filter.
     * @param {RefreshTokenFindUniqueArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefreshTokenFindUniqueArgs>(args: SelectSubset<T, RefreshTokenFindUniqueArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RefreshToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefreshTokenFindUniqueOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefreshTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, RefreshTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RefreshToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefreshTokenFindFirstArgs>(args?: SelectSubset<T, RefreshTokenFindFirstArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RefreshToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefreshTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, RefreshTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RefreshTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany()
     * 
     * // Get first 10 RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefreshTokenFindManyArgs>(args?: SelectSubset<T, RefreshTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RefreshToken.
     * @param {RefreshTokenCreateArgs} args - Arguments to create a RefreshToken.
     * @example
     * // Create one RefreshToken
     * const RefreshToken = await prisma.refreshToken.create({
     *   data: {
     *     // ... data to create a RefreshToken
     *   }
     * })
     * 
     */
    create<T extends RefreshTokenCreateArgs>(args: SelectSubset<T, RefreshTokenCreateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RefreshTokens.
     * @param {RefreshTokenCreateManyArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefreshTokenCreateManyArgs>(args?: SelectSubset<T, RefreshTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefreshTokens and returns the data saved in the database.
     * @param {RefreshTokenCreateManyAndReturnArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefreshTokens and only return the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefreshTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, RefreshTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RefreshToken.
     * @param {RefreshTokenDeleteArgs} args - Arguments to delete one RefreshToken.
     * @example
     * // Delete one RefreshToken
     * const RefreshToken = await prisma.refreshToken.delete({
     *   where: {
     *     // ... filter to delete one RefreshToken
     *   }
     * })
     * 
     */
    delete<T extends RefreshTokenDeleteArgs>(args: SelectSubset<T, RefreshTokenDeleteArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RefreshToken.
     * @param {RefreshTokenUpdateArgs} args - Arguments to update one RefreshToken.
     * @example
     * // Update one RefreshToken
     * const refreshToken = await prisma.refreshToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefreshTokenUpdateArgs>(args: SelectSubset<T, RefreshTokenUpdateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RefreshTokens.
     * @param {RefreshTokenDeleteManyArgs} args - Arguments to filter RefreshTokens to delete.
     * @example
     * // Delete a few RefreshTokens
     * const { count } = await prisma.refreshToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefreshTokenDeleteManyArgs>(args?: SelectSubset<T, RefreshTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefreshTokens
     * const refreshToken = await prisma.refreshToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefreshTokenUpdateManyArgs>(args: SelectSubset<T, RefreshTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefreshToken.
     * @param {RefreshTokenUpsertArgs} args - Arguments to update or create a RefreshToken.
     * @example
     * // Update or create a RefreshToken
     * const refreshToken = await prisma.refreshToken.upsert({
     *   create: {
     *     // ... data to create a RefreshToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefreshToken we want to update
     *   }
     * })
     */
    upsert<T extends RefreshTokenUpsertArgs>(args: SelectSubset<T, RefreshTokenUpsertArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenCountArgs} args - Arguments to filter RefreshTokens to count.
     * @example
     * // Count the number of RefreshTokens
     * const count = await prisma.refreshToken.count({
     *   where: {
     *     // ... the filter for the RefreshTokens we want to count
     *   }
     * })
    **/
    count<T extends RefreshTokenCountArgs>(
      args?: Subset<T, RefreshTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefreshTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefreshTokenAggregateArgs>(args: Subset<T, RefreshTokenAggregateArgs>): Prisma.PrismaPromise<GetRefreshTokenAggregateType<T>>

    /**
     * Group by RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefreshTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefreshTokenGroupByArgs['orderBy'] }
        : { orderBy?: RefreshTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefreshTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefreshTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefreshToken model
   */
  readonly fields: RefreshTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefreshToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefreshTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefreshToken model
   */ 
  interface RefreshTokenFieldRefs {
    readonly id: FieldRef<"RefreshToken", 'String'>
    readonly userId: FieldRef<"RefreshToken", 'String'>
    readonly token: FieldRef<"RefreshToken", 'String'>
    readonly expiresAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly createdAt: FieldRef<"RefreshToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RefreshToken findUnique
   */
  export type RefreshTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findUniqueOrThrow
   */
  export type RefreshTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findFirst
   */
  export type RefreshTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findFirstOrThrow
   */
  export type RefreshTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findMany
   */
  export type RefreshTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshTokens to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken create
   */
  export type RefreshTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a RefreshToken.
     */
    data: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
  }

  /**
   * RefreshToken createMany
   */
  export type RefreshTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
  }

  /**
   * RefreshToken createManyAndReturn
   */
  export type RefreshTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RefreshToken update
   */
  export type RefreshTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a RefreshToken.
     */
    data: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
    /**
     * Choose, which RefreshToken to update.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken updateMany
   */
  export type RefreshTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefreshTokens.
     */
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyInput>
    /**
     * Filter which RefreshTokens to update
     */
    where?: RefreshTokenWhereInput
  }

  /**
   * RefreshToken upsert
   */
  export type RefreshTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the RefreshToken to update in case it exists.
     */
    where: RefreshTokenWhereUniqueInput
    /**
     * In case the RefreshToken found by the `where` argument doesn't exist, create a new RefreshToken with this data.
     */
    create: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
    /**
     * In case the RefreshToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
  }

  /**
   * RefreshToken delete
   */
  export type RefreshTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter which RefreshToken to delete.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken deleteMany
   */
  export type RefreshTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshTokens to delete
     */
    where?: RefreshTokenWhereInput
  }

  /**
   * RefreshToken without action
   */
  export type RefreshTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
  }


  /**
   * Model Character
   */

  export type AggregateCharacter = {
    _count: CharacterCountAggregateOutputType | null
    _avg: CharacterAvgAggregateOutputType | null
    _sum: CharacterSumAggregateOutputType | null
    _min: CharacterMinAggregateOutputType | null
    _max: CharacterMaxAggregateOutputType | null
  }

  export type CharacterAvgAggregateOutputType = {
    temperature: number | null
    maxTokens: number | null
    rating: number | null
    ratingCount: number | null
    chatCount: number | null
    favoriteCount: number | null
    version: number | null
  }

  export type CharacterSumAggregateOutputType = {
    temperature: number | null
    maxTokens: number | null
    rating: number | null
    ratingCount: number | null
    chatCount: number | null
    favoriteCount: number | null
    version: number | null
  }

  export type CharacterMinAggregateOutputType = {
    id: string | null
    creatorId: string | null
    name: string | null
    description: string | null
    fullDescription: string | null
    personality: string | null
    backstory: string | null
    speakingStyle: string | null
    scenario: string | null
    firstMessage: string | null
    systemPrompt: string | null
    exampleDialogs: string | null
    avatar: string | null
    coverImage: string | null
    category: string | null
    tags: string | null
    language: string | null
    model: string | null
    temperature: number | null
    maxTokens: number | null
    isPublic: boolean | null
    isNSFW: boolean | null
    isFeatured: boolean | null
    rating: number | null
    ratingCount: number | null
    chatCount: number | null
    favoriteCount: number | null
    importedFrom: string | null
    version: number | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CharacterMaxAggregateOutputType = {
    id: string | null
    creatorId: string | null
    name: string | null
    description: string | null
    fullDescription: string | null
    personality: string | null
    backstory: string | null
    speakingStyle: string | null
    scenario: string | null
    firstMessage: string | null
    systemPrompt: string | null
    exampleDialogs: string | null
    avatar: string | null
    coverImage: string | null
    category: string | null
    tags: string | null
    language: string | null
    model: string | null
    temperature: number | null
    maxTokens: number | null
    isPublic: boolean | null
    isNSFW: boolean | null
    isFeatured: boolean | null
    rating: number | null
    ratingCount: number | null
    chatCount: number | null
    favoriteCount: number | null
    importedFrom: string | null
    version: number | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CharacterCountAggregateOutputType = {
    id: number
    creatorId: number
    name: number
    description: number
    fullDescription: number
    personality: number
    backstory: number
    speakingStyle: number
    scenario: number
    firstMessage: number
    systemPrompt: number
    exampleDialogs: number
    avatar: number
    coverImage: number
    category: number
    tags: number
    language: number
    model: number
    temperature: number
    maxTokens: number
    isPublic: number
    isNSFW: number
    isFeatured: number
    rating: number
    ratingCount: number
    chatCount: number
    favoriteCount: number
    importedFrom: number
    version: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CharacterAvgAggregateInputType = {
    temperature?: true
    maxTokens?: true
    rating?: true
    ratingCount?: true
    chatCount?: true
    favoriteCount?: true
    version?: true
  }

  export type CharacterSumAggregateInputType = {
    temperature?: true
    maxTokens?: true
    rating?: true
    ratingCount?: true
    chatCount?: true
    favoriteCount?: true
    version?: true
  }

  export type CharacterMinAggregateInputType = {
    id?: true
    creatorId?: true
    name?: true
    description?: true
    fullDescription?: true
    personality?: true
    backstory?: true
    speakingStyle?: true
    scenario?: true
    firstMessage?: true
    systemPrompt?: true
    exampleDialogs?: true
    avatar?: true
    coverImage?: true
    category?: true
    tags?: true
    language?: true
    model?: true
    temperature?: true
    maxTokens?: true
    isPublic?: true
    isNSFW?: true
    isFeatured?: true
    rating?: true
    ratingCount?: true
    chatCount?: true
    favoriteCount?: true
    importedFrom?: true
    version?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CharacterMaxAggregateInputType = {
    id?: true
    creatorId?: true
    name?: true
    description?: true
    fullDescription?: true
    personality?: true
    backstory?: true
    speakingStyle?: true
    scenario?: true
    firstMessage?: true
    systemPrompt?: true
    exampleDialogs?: true
    avatar?: true
    coverImage?: true
    category?: true
    tags?: true
    language?: true
    model?: true
    temperature?: true
    maxTokens?: true
    isPublic?: true
    isNSFW?: true
    isFeatured?: true
    rating?: true
    ratingCount?: true
    chatCount?: true
    favoriteCount?: true
    importedFrom?: true
    version?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CharacterCountAggregateInputType = {
    id?: true
    creatorId?: true
    name?: true
    description?: true
    fullDescription?: true
    personality?: true
    backstory?: true
    speakingStyle?: true
    scenario?: true
    firstMessage?: true
    systemPrompt?: true
    exampleDialogs?: true
    avatar?: true
    coverImage?: true
    category?: true
    tags?: true
    language?: true
    model?: true
    temperature?: true
    maxTokens?: true
    isPublic?: true
    isNSFW?: true
    isFeatured?: true
    rating?: true
    ratingCount?: true
    chatCount?: true
    favoriteCount?: true
    importedFrom?: true
    version?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CharacterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Character to aggregate.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Characters
    **/
    _count?: true | CharacterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CharacterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CharacterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CharacterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CharacterMaxAggregateInputType
  }

  export type GetCharacterAggregateType<T extends CharacterAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacter[P]>
      : GetScalarType<T[P], AggregateCharacter[P]>
  }




  export type CharacterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterWhereInput
    orderBy?: CharacterOrderByWithAggregationInput | CharacterOrderByWithAggregationInput[]
    by: CharacterScalarFieldEnum[] | CharacterScalarFieldEnum
    having?: CharacterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CharacterCountAggregateInputType | true
    _avg?: CharacterAvgAggregateInputType
    _sum?: CharacterSumAggregateInputType
    _min?: CharacterMinAggregateInputType
    _max?: CharacterMaxAggregateInputType
  }

  export type CharacterGroupByOutputType = {
    id: string
    creatorId: string
    name: string
    description: string
    fullDescription: string | null
    personality: string | null
    backstory: string | null
    speakingStyle: string | null
    scenario: string | null
    firstMessage: string | null
    systemPrompt: string | null
    exampleDialogs: string | null
    avatar: string | null
    coverImage: string | null
    category: string
    tags: string
    language: string
    model: string
    temperature: number
    maxTokens: number
    isPublic: boolean
    isNSFW: boolean
    isFeatured: boolean
    rating: number
    ratingCount: number
    chatCount: number
    favoriteCount: number
    importedFrom: string | null
    version: number
    metadata: string | null
    createdAt: Date
    updatedAt: Date
    _count: CharacterCountAggregateOutputType | null
    _avg: CharacterAvgAggregateOutputType | null
    _sum: CharacterSumAggregateOutputType | null
    _min: CharacterMinAggregateOutputType | null
    _max: CharacterMaxAggregateOutputType | null
  }

  type GetCharacterGroupByPayload<T extends CharacterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CharacterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CharacterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CharacterGroupByOutputType[P]>
            : GetScalarType<T[P], CharacterGroupByOutputType[P]>
        }
      >
    >


  export type CharacterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creatorId?: boolean
    name?: boolean
    description?: boolean
    fullDescription?: boolean
    personality?: boolean
    backstory?: boolean
    speakingStyle?: boolean
    scenario?: boolean
    firstMessage?: boolean
    systemPrompt?: boolean
    exampleDialogs?: boolean
    avatar?: boolean
    coverImage?: boolean
    category?: boolean
    tags?: boolean
    language?: boolean
    model?: boolean
    temperature?: boolean
    maxTokens?: boolean
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: boolean
    ratingCount?: boolean
    chatCount?: boolean
    favoriteCount?: boolean
    importedFrom?: boolean
    version?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    chatSessions?: boolean | Character$chatSessionsArgs<ExtArgs>
    messages?: boolean | Character$messagesArgs<ExtArgs>
    favorites?: boolean | Character$favoritesArgs<ExtArgs>
    ratings?: boolean | Character$ratingsArgs<ExtArgs>
    chatParticipants?: boolean | Character$chatParticipantsArgs<ExtArgs>
    chatMessages?: boolean | Character$chatMessagesArgs<ExtArgs>
    _count?: boolean | CharacterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["character"]>

  export type CharacterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creatorId?: boolean
    name?: boolean
    description?: boolean
    fullDescription?: boolean
    personality?: boolean
    backstory?: boolean
    speakingStyle?: boolean
    scenario?: boolean
    firstMessage?: boolean
    systemPrompt?: boolean
    exampleDialogs?: boolean
    avatar?: boolean
    coverImage?: boolean
    category?: boolean
    tags?: boolean
    language?: boolean
    model?: boolean
    temperature?: boolean
    maxTokens?: boolean
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: boolean
    ratingCount?: boolean
    chatCount?: boolean
    favoriteCount?: boolean
    importedFrom?: boolean
    version?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["character"]>

  export type CharacterSelectScalar = {
    id?: boolean
    creatorId?: boolean
    name?: boolean
    description?: boolean
    fullDescription?: boolean
    personality?: boolean
    backstory?: boolean
    speakingStyle?: boolean
    scenario?: boolean
    firstMessage?: boolean
    systemPrompt?: boolean
    exampleDialogs?: boolean
    avatar?: boolean
    coverImage?: boolean
    category?: boolean
    tags?: boolean
    language?: boolean
    model?: boolean
    temperature?: boolean
    maxTokens?: boolean
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: boolean
    ratingCount?: boolean
    chatCount?: boolean
    favoriteCount?: boolean
    importedFrom?: boolean
    version?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CharacterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    chatSessions?: boolean | Character$chatSessionsArgs<ExtArgs>
    messages?: boolean | Character$messagesArgs<ExtArgs>
    favorites?: boolean | Character$favoritesArgs<ExtArgs>
    ratings?: boolean | Character$ratingsArgs<ExtArgs>
    chatParticipants?: boolean | Character$chatParticipantsArgs<ExtArgs>
    chatMessages?: boolean | Character$chatMessagesArgs<ExtArgs>
    _count?: boolean | CharacterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CharacterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CharacterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Character"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      chatSessions: Prisma.$ChatSessionPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
      favorites: Prisma.$CharacterFavoritePayload<ExtArgs>[]
      ratings: Prisma.$CharacterRatingPayload<ExtArgs>[]
      chatParticipants: Prisma.$ChatParticipantPayload<ExtArgs>[]
      chatMessages: Prisma.$ChatMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      creatorId: string
      name: string
      description: string
      fullDescription: string | null
      personality: string | null
      backstory: string | null
      speakingStyle: string | null
      scenario: string | null
      firstMessage: string | null
      systemPrompt: string | null
      exampleDialogs: string | null
      avatar: string | null
      coverImage: string | null
      category: string
      tags: string
      language: string
      model: string
      temperature: number
      maxTokens: number
      isPublic: boolean
      isNSFW: boolean
      isFeatured: boolean
      rating: number
      ratingCount: number
      chatCount: number
      favoriteCount: number
      importedFrom: string | null
      version: number
      metadata: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["character"]>
    composites: {}
  }

  type CharacterGetPayload<S extends boolean | null | undefined | CharacterDefaultArgs> = $Result.GetResult<Prisma.$CharacterPayload, S>

  type CharacterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CharacterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CharacterCountAggregateInputType | true
    }

  export interface CharacterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Character'], meta: { name: 'Character' } }
    /**
     * Find zero or one Character that matches the filter.
     * @param {CharacterFindUniqueArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CharacterFindUniqueArgs>(args: SelectSubset<T, CharacterFindUniqueArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Character that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CharacterFindUniqueOrThrowArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CharacterFindUniqueOrThrowArgs>(args: SelectSubset<T, CharacterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Character that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindFirstArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CharacterFindFirstArgs>(args?: SelectSubset<T, CharacterFindFirstArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Character that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindFirstOrThrowArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CharacterFindFirstOrThrowArgs>(args?: SelectSubset<T, CharacterFindFirstOrThrowArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Characters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Characters
     * const characters = await prisma.character.findMany()
     * 
     * // Get first 10 Characters
     * const characters = await prisma.character.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const characterWithIdOnly = await prisma.character.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CharacterFindManyArgs>(args?: SelectSubset<T, CharacterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Character.
     * @param {CharacterCreateArgs} args - Arguments to create a Character.
     * @example
     * // Create one Character
     * const Character = await prisma.character.create({
     *   data: {
     *     // ... data to create a Character
     *   }
     * })
     * 
     */
    create<T extends CharacterCreateArgs>(args: SelectSubset<T, CharacterCreateArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Characters.
     * @param {CharacterCreateManyArgs} args - Arguments to create many Characters.
     * @example
     * // Create many Characters
     * const character = await prisma.character.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CharacterCreateManyArgs>(args?: SelectSubset<T, CharacterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Characters and returns the data saved in the database.
     * @param {CharacterCreateManyAndReturnArgs} args - Arguments to create many Characters.
     * @example
     * // Create many Characters
     * const character = await prisma.character.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Characters and only return the `id`
     * const characterWithIdOnly = await prisma.character.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CharacterCreateManyAndReturnArgs>(args?: SelectSubset<T, CharacterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Character.
     * @param {CharacterDeleteArgs} args - Arguments to delete one Character.
     * @example
     * // Delete one Character
     * const Character = await prisma.character.delete({
     *   where: {
     *     // ... filter to delete one Character
     *   }
     * })
     * 
     */
    delete<T extends CharacterDeleteArgs>(args: SelectSubset<T, CharacterDeleteArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Character.
     * @param {CharacterUpdateArgs} args - Arguments to update one Character.
     * @example
     * // Update one Character
     * const character = await prisma.character.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CharacterUpdateArgs>(args: SelectSubset<T, CharacterUpdateArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Characters.
     * @param {CharacterDeleteManyArgs} args - Arguments to filter Characters to delete.
     * @example
     * // Delete a few Characters
     * const { count } = await prisma.character.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CharacterDeleteManyArgs>(args?: SelectSubset<T, CharacterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Characters
     * const character = await prisma.character.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CharacterUpdateManyArgs>(args: SelectSubset<T, CharacterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Character.
     * @param {CharacterUpsertArgs} args - Arguments to update or create a Character.
     * @example
     * // Update or create a Character
     * const character = await prisma.character.upsert({
     *   create: {
     *     // ... data to create a Character
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Character we want to update
     *   }
     * })
     */
    upsert<T extends CharacterUpsertArgs>(args: SelectSubset<T, CharacterUpsertArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterCountArgs} args - Arguments to filter Characters to count.
     * @example
     * // Count the number of Characters
     * const count = await prisma.character.count({
     *   where: {
     *     // ... the filter for the Characters we want to count
     *   }
     * })
    **/
    count<T extends CharacterCountArgs>(
      args?: Subset<T, CharacterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CharacterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Character.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CharacterAggregateArgs>(args: Subset<T, CharacterAggregateArgs>): Prisma.PrismaPromise<GetCharacterAggregateType<T>>

    /**
     * Group by Character.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CharacterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CharacterGroupByArgs['orderBy'] }
        : { orderBy?: CharacterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CharacterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Character model
   */
  readonly fields: CharacterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Character.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CharacterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    chatSessions<T extends Character$chatSessionsArgs<ExtArgs> = {}>(args?: Subset<T, Character$chatSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findMany"> | Null>
    messages<T extends Character$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Character$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    favorites<T extends Character$favoritesArgs<ExtArgs> = {}>(args?: Subset<T, Character$favoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterFavoritePayload<ExtArgs>, T, "findMany"> | Null>
    ratings<T extends Character$ratingsArgs<ExtArgs> = {}>(args?: Subset<T, Character$ratingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterRatingPayload<ExtArgs>, T, "findMany"> | Null>
    chatParticipants<T extends Character$chatParticipantsArgs<ExtArgs> = {}>(args?: Subset<T, Character$chatParticipantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    chatMessages<T extends Character$chatMessagesArgs<ExtArgs> = {}>(args?: Subset<T, Character$chatMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Character model
   */ 
  interface CharacterFieldRefs {
    readonly id: FieldRef<"Character", 'String'>
    readonly creatorId: FieldRef<"Character", 'String'>
    readonly name: FieldRef<"Character", 'String'>
    readonly description: FieldRef<"Character", 'String'>
    readonly fullDescription: FieldRef<"Character", 'String'>
    readonly personality: FieldRef<"Character", 'String'>
    readonly backstory: FieldRef<"Character", 'String'>
    readonly speakingStyle: FieldRef<"Character", 'String'>
    readonly scenario: FieldRef<"Character", 'String'>
    readonly firstMessage: FieldRef<"Character", 'String'>
    readonly systemPrompt: FieldRef<"Character", 'String'>
    readonly exampleDialogs: FieldRef<"Character", 'String'>
    readonly avatar: FieldRef<"Character", 'String'>
    readonly coverImage: FieldRef<"Character", 'String'>
    readonly category: FieldRef<"Character", 'String'>
    readonly tags: FieldRef<"Character", 'String'>
    readonly language: FieldRef<"Character", 'String'>
    readonly model: FieldRef<"Character", 'String'>
    readonly temperature: FieldRef<"Character", 'Float'>
    readonly maxTokens: FieldRef<"Character", 'Int'>
    readonly isPublic: FieldRef<"Character", 'Boolean'>
    readonly isNSFW: FieldRef<"Character", 'Boolean'>
    readonly isFeatured: FieldRef<"Character", 'Boolean'>
    readonly rating: FieldRef<"Character", 'Float'>
    readonly ratingCount: FieldRef<"Character", 'Int'>
    readonly chatCount: FieldRef<"Character", 'Int'>
    readonly favoriteCount: FieldRef<"Character", 'Int'>
    readonly importedFrom: FieldRef<"Character", 'String'>
    readonly version: FieldRef<"Character", 'Int'>
    readonly metadata: FieldRef<"Character", 'String'>
    readonly createdAt: FieldRef<"Character", 'DateTime'>
    readonly updatedAt: FieldRef<"Character", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Character findUnique
   */
  export type CharacterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character findUniqueOrThrow
   */
  export type CharacterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character findFirst
   */
  export type CharacterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Characters.
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Characters.
     */
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Character findFirstOrThrow
   */
  export type CharacterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Characters.
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Characters.
     */
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Character findMany
   */
  export type CharacterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Characters to fetch.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Characters.
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Character create
   */
  export type CharacterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * The data needed to create a Character.
     */
    data: XOR<CharacterCreateInput, CharacterUncheckedCreateInput>
  }

  /**
   * Character createMany
   */
  export type CharacterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Characters.
     */
    data: CharacterCreateManyInput | CharacterCreateManyInput[]
  }

  /**
   * Character createManyAndReturn
   */
  export type CharacterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Characters.
     */
    data: CharacterCreateManyInput | CharacterCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Character update
   */
  export type CharacterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * The data needed to update a Character.
     */
    data: XOR<CharacterUpdateInput, CharacterUncheckedUpdateInput>
    /**
     * Choose, which Character to update.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character updateMany
   */
  export type CharacterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Characters.
     */
    data: XOR<CharacterUpdateManyMutationInput, CharacterUncheckedUpdateManyInput>
    /**
     * Filter which Characters to update
     */
    where?: CharacterWhereInput
  }

  /**
   * Character upsert
   */
  export type CharacterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * The filter to search for the Character to update in case it exists.
     */
    where: CharacterWhereUniqueInput
    /**
     * In case the Character found by the `where` argument doesn't exist, create a new Character with this data.
     */
    create: XOR<CharacterCreateInput, CharacterUncheckedCreateInput>
    /**
     * In case the Character was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CharacterUpdateInput, CharacterUncheckedUpdateInput>
  }

  /**
   * Character delete
   */
  export type CharacterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter which Character to delete.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character deleteMany
   */
  export type CharacterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Characters to delete
     */
    where?: CharacterWhereInput
  }

  /**
   * Character.chatSessions
   */
  export type Character$chatSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    where?: ChatSessionWhereInput
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    cursor?: ChatSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * Character.messages
   */
  export type Character$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Character.favorites
   */
  export type Character$favoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterFavorite
     */
    select?: CharacterFavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterFavoriteInclude<ExtArgs> | null
    where?: CharacterFavoriteWhereInput
    orderBy?: CharacterFavoriteOrderByWithRelationInput | CharacterFavoriteOrderByWithRelationInput[]
    cursor?: CharacterFavoriteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CharacterFavoriteScalarFieldEnum | CharacterFavoriteScalarFieldEnum[]
  }

  /**
   * Character.ratings
   */
  export type Character$ratingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterRating
     */
    select?: CharacterRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterRatingInclude<ExtArgs> | null
    where?: CharacterRatingWhereInput
    orderBy?: CharacterRatingOrderByWithRelationInput | CharacterRatingOrderByWithRelationInput[]
    cursor?: CharacterRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CharacterRatingScalarFieldEnum | CharacterRatingScalarFieldEnum[]
  }

  /**
   * Character.chatParticipants
   */
  export type Character$chatParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatParticipant
     */
    select?: ChatParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatParticipantInclude<ExtArgs> | null
    where?: ChatParticipantWhereInput
    orderBy?: ChatParticipantOrderByWithRelationInput | ChatParticipantOrderByWithRelationInput[]
    cursor?: ChatParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatParticipantScalarFieldEnum | ChatParticipantScalarFieldEnum[]
  }

  /**
   * Character.chatMessages
   */
  export type Character$chatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * Character without action
   */
  export type CharacterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
  }


  /**
   * Model ChatSession
   */

  export type AggregateChatSession = {
    _count: ChatSessionCountAggregateOutputType | null
    _avg: ChatSessionAvgAggregateOutputType | null
    _sum: ChatSessionSumAggregateOutputType | null
    _min: ChatSessionMinAggregateOutputType | null
    _max: ChatSessionMaxAggregateOutputType | null
  }

  export type ChatSessionAvgAggregateOutputType = {
    messageCount: number | null
    totalTokens: number | null
  }

  export type ChatSessionSumAggregateOutputType = {
    messageCount: number | null
    totalTokens: number | null
  }

  export type ChatSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    characterId: string | null
    title: string | null
    model: string | null
    presetId: string | null
    worldInfoId: string | null
    lastMessageAt: Date | null
    messageCount: number | null
    totalTokens: number | null
    isArchived: boolean | null
    isPinned: boolean | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    characterId: string | null
    title: string | null
    model: string | null
    presetId: string | null
    worldInfoId: string | null
    lastMessageAt: Date | null
    messageCount: number | null
    totalTokens: number | null
    isArchived: boolean | null
    isPinned: boolean | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatSessionCountAggregateOutputType = {
    id: number
    userId: number
    characterId: number
    title: number
    model: number
    presetId: number
    worldInfoId: number
    lastMessageAt: number
    messageCount: number
    totalTokens: number
    isArchived: number
    isPinned: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChatSessionAvgAggregateInputType = {
    messageCount?: true
    totalTokens?: true
  }

  export type ChatSessionSumAggregateInputType = {
    messageCount?: true
    totalTokens?: true
  }

  export type ChatSessionMinAggregateInputType = {
    id?: true
    userId?: true
    characterId?: true
    title?: true
    model?: true
    presetId?: true
    worldInfoId?: true
    lastMessageAt?: true
    messageCount?: true
    totalTokens?: true
    isArchived?: true
    isPinned?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    characterId?: true
    title?: true
    model?: true
    presetId?: true
    worldInfoId?: true
    lastMessageAt?: true
    messageCount?: true
    totalTokens?: true
    isArchived?: true
    isPinned?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatSessionCountAggregateInputType = {
    id?: true
    userId?: true
    characterId?: true
    title?: true
    model?: true
    presetId?: true
    worldInfoId?: true
    lastMessageAt?: true
    messageCount?: true
    totalTokens?: true
    isArchived?: true
    isPinned?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChatSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatSession to aggregate.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatSessions
    **/
    _count?: true | ChatSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatSessionMaxAggregateInputType
  }

  export type GetChatSessionAggregateType<T extends ChatSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateChatSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatSession[P]>
      : GetScalarType<T[P], AggregateChatSession[P]>
  }




  export type ChatSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatSessionWhereInput
    orderBy?: ChatSessionOrderByWithAggregationInput | ChatSessionOrderByWithAggregationInput[]
    by: ChatSessionScalarFieldEnum[] | ChatSessionScalarFieldEnum
    having?: ChatSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatSessionCountAggregateInputType | true
    _avg?: ChatSessionAvgAggregateInputType
    _sum?: ChatSessionSumAggregateInputType
    _min?: ChatSessionMinAggregateInputType
    _max?: ChatSessionMaxAggregateInputType
  }

  export type ChatSessionGroupByOutputType = {
    id: string
    userId: string
    characterId: string
    title: string | null
    model: string
    presetId: string | null
    worldInfoId: string | null
    lastMessageAt: Date | null
    messageCount: number
    totalTokens: number
    isArchived: boolean
    isPinned: boolean
    metadata: string | null
    createdAt: Date
    updatedAt: Date
    _count: ChatSessionCountAggregateOutputType | null
    _avg: ChatSessionAvgAggregateOutputType | null
    _sum: ChatSessionSumAggregateOutputType | null
    _min: ChatSessionMinAggregateOutputType | null
    _max: ChatSessionMaxAggregateOutputType | null
  }

  type GetChatSessionGroupByPayload<T extends ChatSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatSessionGroupByOutputType[P]>
            : GetScalarType<T[P], ChatSessionGroupByOutputType[P]>
        }
      >
    >


  export type ChatSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    characterId?: boolean
    title?: boolean
    model?: boolean
    presetId?: boolean
    worldInfoId?: boolean
    lastMessageAt?: boolean
    messageCount?: boolean
    totalTokens?: boolean
    isArchived?: boolean
    isPinned?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    messages?: boolean | ChatSession$messagesArgs<ExtArgs>
    _count?: boolean | ChatSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    characterId?: boolean
    title?: boolean
    model?: boolean
    presetId?: boolean
    worldInfoId?: boolean
    lastMessageAt?: boolean
    messageCount?: boolean
    totalTokens?: boolean
    isArchived?: boolean
    isPinned?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    characterId?: boolean
    title?: boolean
    model?: boolean
    presetId?: boolean
    worldInfoId?: boolean
    lastMessageAt?: boolean
    messageCount?: boolean
    totalTokens?: boolean
    isArchived?: boolean
    isPinned?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChatSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    messages?: boolean | ChatSession$messagesArgs<ExtArgs>
    _count?: boolean | ChatSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }

  export type $ChatSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      character: Prisma.$CharacterPayload<ExtArgs>
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      characterId: string
      title: string | null
      model: string
      presetId: string | null
      worldInfoId: string | null
      lastMessageAt: Date | null
      messageCount: number
      totalTokens: number
      isArchived: boolean
      isPinned: boolean
      metadata: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chatSession"]>
    composites: {}
  }

  type ChatSessionGetPayload<S extends boolean | null | undefined | ChatSessionDefaultArgs> = $Result.GetResult<Prisma.$ChatSessionPayload, S>

  type ChatSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatSessionCountAggregateInputType | true
    }

  export interface ChatSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatSession'], meta: { name: 'ChatSession' } }
    /**
     * Find zero or one ChatSession that matches the filter.
     * @param {ChatSessionFindUniqueArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatSessionFindUniqueArgs>(args: SelectSubset<T, ChatSessionFindUniqueArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChatSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatSessionFindUniqueOrThrowArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChatSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindFirstArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatSessionFindFirstArgs>(args?: SelectSubset<T, ChatSessionFindFirstArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChatSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindFirstOrThrowArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChatSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatSessions
     * const chatSessions = await prisma.chatSession.findMany()
     * 
     * // Get first 10 ChatSessions
     * const chatSessions = await prisma.chatSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatSessionFindManyArgs>(args?: SelectSubset<T, ChatSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChatSession.
     * @param {ChatSessionCreateArgs} args - Arguments to create a ChatSession.
     * @example
     * // Create one ChatSession
     * const ChatSession = await prisma.chatSession.create({
     *   data: {
     *     // ... data to create a ChatSession
     *   }
     * })
     * 
     */
    create<T extends ChatSessionCreateArgs>(args: SelectSubset<T, ChatSessionCreateArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChatSessions.
     * @param {ChatSessionCreateManyArgs} args - Arguments to create many ChatSessions.
     * @example
     * // Create many ChatSessions
     * const chatSession = await prisma.chatSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatSessionCreateManyArgs>(args?: SelectSubset<T, ChatSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatSessions and returns the data saved in the database.
     * @param {ChatSessionCreateManyAndReturnArgs} args - Arguments to create many ChatSessions.
     * @example
     * // Create many ChatSessions
     * const chatSession = await prisma.chatSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatSessions and only return the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChatSession.
     * @param {ChatSessionDeleteArgs} args - Arguments to delete one ChatSession.
     * @example
     * // Delete one ChatSession
     * const ChatSession = await prisma.chatSession.delete({
     *   where: {
     *     // ... filter to delete one ChatSession
     *   }
     * })
     * 
     */
    delete<T extends ChatSessionDeleteArgs>(args: SelectSubset<T, ChatSessionDeleteArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChatSession.
     * @param {ChatSessionUpdateArgs} args - Arguments to update one ChatSession.
     * @example
     * // Update one ChatSession
     * const chatSession = await prisma.chatSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatSessionUpdateArgs>(args: SelectSubset<T, ChatSessionUpdateArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChatSessions.
     * @param {ChatSessionDeleteManyArgs} args - Arguments to filter ChatSessions to delete.
     * @example
     * // Delete a few ChatSessions
     * const { count } = await prisma.chatSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatSessionDeleteManyArgs>(args?: SelectSubset<T, ChatSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatSessions
     * const chatSession = await prisma.chatSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatSessionUpdateManyArgs>(args: SelectSubset<T, ChatSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatSession.
     * @param {ChatSessionUpsertArgs} args - Arguments to update or create a ChatSession.
     * @example
     * // Update or create a ChatSession
     * const chatSession = await prisma.chatSession.upsert({
     *   create: {
     *     // ... data to create a ChatSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatSession we want to update
     *   }
     * })
     */
    upsert<T extends ChatSessionUpsertArgs>(args: SelectSubset<T, ChatSessionUpsertArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionCountArgs} args - Arguments to filter ChatSessions to count.
     * @example
     * // Count the number of ChatSessions
     * const count = await prisma.chatSession.count({
     *   where: {
     *     // ... the filter for the ChatSessions we want to count
     *   }
     * })
    **/
    count<T extends ChatSessionCountArgs>(
      args?: Subset<T, ChatSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatSessionAggregateArgs>(args: Subset<T, ChatSessionAggregateArgs>): Prisma.PrismaPromise<GetChatSessionAggregateType<T>>

    /**
     * Group by ChatSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatSessionGroupByArgs['orderBy'] }
        : { orderBy?: ChatSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatSession model
   */
  readonly fields: ChatSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    character<T extends CharacterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CharacterDefaultArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    messages<T extends ChatSession$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatSession$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatSession model
   */ 
  interface ChatSessionFieldRefs {
    readonly id: FieldRef<"ChatSession", 'String'>
    readonly userId: FieldRef<"ChatSession", 'String'>
    readonly characterId: FieldRef<"ChatSession", 'String'>
    readonly title: FieldRef<"ChatSession", 'String'>
    readonly model: FieldRef<"ChatSession", 'String'>
    readonly presetId: FieldRef<"ChatSession", 'String'>
    readonly worldInfoId: FieldRef<"ChatSession", 'String'>
    readonly lastMessageAt: FieldRef<"ChatSession", 'DateTime'>
    readonly messageCount: FieldRef<"ChatSession", 'Int'>
    readonly totalTokens: FieldRef<"ChatSession", 'Int'>
    readonly isArchived: FieldRef<"ChatSession", 'Boolean'>
    readonly isPinned: FieldRef<"ChatSession", 'Boolean'>
    readonly metadata: FieldRef<"ChatSession", 'String'>
    readonly createdAt: FieldRef<"ChatSession", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatSession findUnique
   */
  export type ChatSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession findUniqueOrThrow
   */
  export type ChatSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession findFirst
   */
  export type ChatSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSessions.
     */
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession findFirstOrThrow
   */
  export type ChatSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSessions.
     */
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession findMany
   */
  export type ChatSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSessions to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession create
   */
  export type ChatSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatSession.
     */
    data: XOR<ChatSessionCreateInput, ChatSessionUncheckedCreateInput>
  }

  /**
   * ChatSession createMany
   */
  export type ChatSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatSessions.
     */
    data: ChatSessionCreateManyInput | ChatSessionCreateManyInput[]
  }

  /**
   * ChatSession createManyAndReturn
   */
  export type ChatSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChatSessions.
     */
    data: ChatSessionCreateManyInput | ChatSessionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatSession update
   */
  export type ChatSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatSession.
     */
    data: XOR<ChatSessionUpdateInput, ChatSessionUncheckedUpdateInput>
    /**
     * Choose, which ChatSession to update.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession updateMany
   */
  export type ChatSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatSessions.
     */
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyInput>
    /**
     * Filter which ChatSessions to update
     */
    where?: ChatSessionWhereInput
  }

  /**
   * ChatSession upsert
   */
  export type ChatSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatSession to update in case it exists.
     */
    where: ChatSessionWhereUniqueInput
    /**
     * In case the ChatSession found by the `where` argument doesn't exist, create a new ChatSession with this data.
     */
    create: XOR<ChatSessionCreateInput, ChatSessionUncheckedCreateInput>
    /**
     * In case the ChatSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatSessionUpdateInput, ChatSessionUncheckedUpdateInput>
  }

  /**
   * ChatSession delete
   */
  export type ChatSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter which ChatSession to delete.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession deleteMany
   */
  export type ChatSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatSessions to delete
     */
    where?: ChatSessionWhereInput
  }

  /**
   * ChatSession.messages
   */
  export type ChatSession$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * ChatSession without action
   */
  export type ChatSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
  }


  /**
   * Model ChatRoom
   */

  export type AggregateChatRoom = {
    _count: ChatRoomCountAggregateOutputType | null
    _avg: ChatRoomAvgAggregateOutputType | null
    _sum: ChatRoomSumAggregateOutputType | null
    _min: ChatRoomMinAggregateOutputType | null
    _max: ChatRoomMaxAggregateOutputType | null
  }

  export type ChatRoomAvgAggregateOutputType = {
    maxParticipants: number | null
    messageCount: number | null
    totalTokens: number | null
  }

  export type ChatRoomSumAggregateOutputType = {
    maxParticipants: number | null
    messageCount: number | null
    totalTokens: number | null
  }

  export type ChatRoomMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    ownerId: string | null
    maxParticipants: number | null
    isPrivate: boolean | null
    allowSpectators: boolean | null
    roomType: string | null
    settings: string | null
    lastMessageAt: Date | null
    messageCount: number | null
    totalTokens: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatRoomMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    ownerId: string | null
    maxParticipants: number | null
    isPrivate: boolean | null
    allowSpectators: boolean | null
    roomType: string | null
    settings: string | null
    lastMessageAt: Date | null
    messageCount: number | null
    totalTokens: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatRoomCountAggregateOutputType = {
    id: number
    name: number
    description: number
    ownerId: number
    maxParticipants: number
    isPrivate: number
    allowSpectators: number
    roomType: number
    settings: number
    lastMessageAt: number
    messageCount: number
    totalTokens: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChatRoomAvgAggregateInputType = {
    maxParticipants?: true
    messageCount?: true
    totalTokens?: true
  }

  export type ChatRoomSumAggregateInputType = {
    maxParticipants?: true
    messageCount?: true
    totalTokens?: true
  }

  export type ChatRoomMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ownerId?: true
    maxParticipants?: true
    isPrivate?: true
    allowSpectators?: true
    roomType?: true
    settings?: true
    lastMessageAt?: true
    messageCount?: true
    totalTokens?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatRoomMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ownerId?: true
    maxParticipants?: true
    isPrivate?: true
    allowSpectators?: true
    roomType?: true
    settings?: true
    lastMessageAt?: true
    messageCount?: true
    totalTokens?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatRoomCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ownerId?: true
    maxParticipants?: true
    isPrivate?: true
    allowSpectators?: true
    roomType?: true
    settings?: true
    lastMessageAt?: true
    messageCount?: true
    totalTokens?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChatRoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRoom to aggregate.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatRooms
    **/
    _count?: true | ChatRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatRoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatRoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatRoomMaxAggregateInputType
  }

  export type GetChatRoomAggregateType<T extends ChatRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateChatRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatRoom[P]>
      : GetScalarType<T[P], AggregateChatRoom[P]>
  }




  export type ChatRoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomWhereInput
    orderBy?: ChatRoomOrderByWithAggregationInput | ChatRoomOrderByWithAggregationInput[]
    by: ChatRoomScalarFieldEnum[] | ChatRoomScalarFieldEnum
    having?: ChatRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatRoomCountAggregateInputType | true
    _avg?: ChatRoomAvgAggregateInputType
    _sum?: ChatRoomSumAggregateInputType
    _min?: ChatRoomMinAggregateInputType
    _max?: ChatRoomMaxAggregateInputType
  }

  export type ChatRoomGroupByOutputType = {
    id: string
    name: string
    description: string | null
    ownerId: string
    maxParticipants: number
    isPrivate: boolean
    allowSpectators: boolean
    roomType: string
    settings: string | null
    lastMessageAt: Date | null
    messageCount: number
    totalTokens: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ChatRoomCountAggregateOutputType | null
    _avg: ChatRoomAvgAggregateOutputType | null
    _sum: ChatRoomSumAggregateOutputType | null
    _min: ChatRoomMinAggregateOutputType | null
    _max: ChatRoomMaxAggregateOutputType | null
  }

  type GetChatRoomGroupByPayload<T extends ChatRoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
            : GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
        }
      >
    >


  export type ChatRoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    ownerId?: boolean
    maxParticipants?: boolean
    isPrivate?: boolean
    allowSpectators?: boolean
    roomType?: boolean
    settings?: boolean
    lastMessageAt?: boolean
    messageCount?: boolean
    totalTokens?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    participants?: boolean | ChatRoom$participantsArgs<ExtArgs>
    messages?: boolean | ChatRoom$messagesArgs<ExtArgs>
    _count?: boolean | ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoom"]>

  export type ChatRoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    ownerId?: boolean
    maxParticipants?: boolean
    isPrivate?: boolean
    allowSpectators?: boolean
    roomType?: boolean
    settings?: boolean
    lastMessageAt?: boolean
    messageCount?: boolean
    totalTokens?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoom"]>

  export type ChatRoomSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    ownerId?: boolean
    maxParticipants?: boolean
    isPrivate?: boolean
    allowSpectators?: boolean
    roomType?: boolean
    settings?: boolean
    lastMessageAt?: boolean
    messageCount?: boolean
    totalTokens?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChatRoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    participants?: boolean | ChatRoom$participantsArgs<ExtArgs>
    messages?: boolean | ChatRoom$messagesArgs<ExtArgs>
    _count?: boolean | ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatRoomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ChatRoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatRoom"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      participants: Prisma.$ChatParticipantPayload<ExtArgs>[]
      messages: Prisma.$ChatMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      ownerId: string
      maxParticipants: number
      isPrivate: boolean
      allowSpectators: boolean
      roomType: string
      settings: string | null
      lastMessageAt: Date | null
      messageCount: number
      totalTokens: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chatRoom"]>
    composites: {}
  }

  type ChatRoomGetPayload<S extends boolean | null | undefined | ChatRoomDefaultArgs> = $Result.GetResult<Prisma.$ChatRoomPayload, S>

  type ChatRoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatRoomFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatRoomCountAggregateInputType | true
    }

  export interface ChatRoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatRoom'], meta: { name: 'ChatRoom' } }
    /**
     * Find zero or one ChatRoom that matches the filter.
     * @param {ChatRoomFindUniqueArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatRoomFindUniqueArgs>(args: SelectSubset<T, ChatRoomFindUniqueArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChatRoom that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatRoomFindUniqueOrThrowArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatRoomFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatRoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChatRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindFirstArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatRoomFindFirstArgs>(args?: SelectSubset<T, ChatRoomFindFirstArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChatRoom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindFirstOrThrowArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatRoomFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatRoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChatRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatRooms
     * const chatRooms = await prisma.chatRoom.findMany()
     * 
     * // Get first 10 ChatRooms
     * const chatRooms = await prisma.chatRoom.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatRoomWithIdOnly = await prisma.chatRoom.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatRoomFindManyArgs>(args?: SelectSubset<T, ChatRoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChatRoom.
     * @param {ChatRoomCreateArgs} args - Arguments to create a ChatRoom.
     * @example
     * // Create one ChatRoom
     * const ChatRoom = await prisma.chatRoom.create({
     *   data: {
     *     // ... data to create a ChatRoom
     *   }
     * })
     * 
     */
    create<T extends ChatRoomCreateArgs>(args: SelectSubset<T, ChatRoomCreateArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChatRooms.
     * @param {ChatRoomCreateManyArgs} args - Arguments to create many ChatRooms.
     * @example
     * // Create many ChatRooms
     * const chatRoom = await prisma.chatRoom.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatRoomCreateManyArgs>(args?: SelectSubset<T, ChatRoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatRooms and returns the data saved in the database.
     * @param {ChatRoomCreateManyAndReturnArgs} args - Arguments to create many ChatRooms.
     * @example
     * // Create many ChatRooms
     * const chatRoom = await prisma.chatRoom.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatRooms and only return the `id`
     * const chatRoomWithIdOnly = await prisma.chatRoom.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatRoomCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatRoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChatRoom.
     * @param {ChatRoomDeleteArgs} args - Arguments to delete one ChatRoom.
     * @example
     * // Delete one ChatRoom
     * const ChatRoom = await prisma.chatRoom.delete({
     *   where: {
     *     // ... filter to delete one ChatRoom
     *   }
     * })
     * 
     */
    delete<T extends ChatRoomDeleteArgs>(args: SelectSubset<T, ChatRoomDeleteArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChatRoom.
     * @param {ChatRoomUpdateArgs} args - Arguments to update one ChatRoom.
     * @example
     * // Update one ChatRoom
     * const chatRoom = await prisma.chatRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatRoomUpdateArgs>(args: SelectSubset<T, ChatRoomUpdateArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChatRooms.
     * @param {ChatRoomDeleteManyArgs} args - Arguments to filter ChatRooms to delete.
     * @example
     * // Delete a few ChatRooms
     * const { count } = await prisma.chatRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatRoomDeleteManyArgs>(args?: SelectSubset<T, ChatRoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatRooms
     * const chatRoom = await prisma.chatRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatRoomUpdateManyArgs>(args: SelectSubset<T, ChatRoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatRoom.
     * @param {ChatRoomUpsertArgs} args - Arguments to update or create a ChatRoom.
     * @example
     * // Update or create a ChatRoom
     * const chatRoom = await prisma.chatRoom.upsert({
     *   create: {
     *     // ... data to create a ChatRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatRoom we want to update
     *   }
     * })
     */
    upsert<T extends ChatRoomUpsertArgs>(args: SelectSubset<T, ChatRoomUpsertArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomCountArgs} args - Arguments to filter ChatRooms to count.
     * @example
     * // Count the number of ChatRooms
     * const count = await prisma.chatRoom.count({
     *   where: {
     *     // ... the filter for the ChatRooms we want to count
     *   }
     * })
    **/
    count<T extends ChatRoomCountArgs>(
      args?: Subset<T, ChatRoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatRoomAggregateArgs>(args: Subset<T, ChatRoomAggregateArgs>): Prisma.PrismaPromise<GetChatRoomAggregateType<T>>

    /**
     * Group by ChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatRoomGroupByArgs['orderBy'] }
        : { orderBy?: ChatRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatRoom model
   */
  readonly fields: ChatRoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatRoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    participants<T extends ChatRoom$participantsArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoom$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    messages<T extends ChatRoom$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoom$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatRoom model
   */ 
  interface ChatRoomFieldRefs {
    readonly id: FieldRef<"ChatRoom", 'String'>
    readonly name: FieldRef<"ChatRoom", 'String'>
    readonly description: FieldRef<"ChatRoom", 'String'>
    readonly ownerId: FieldRef<"ChatRoom", 'String'>
    readonly maxParticipants: FieldRef<"ChatRoom", 'Int'>
    readonly isPrivate: FieldRef<"ChatRoom", 'Boolean'>
    readonly allowSpectators: FieldRef<"ChatRoom", 'Boolean'>
    readonly roomType: FieldRef<"ChatRoom", 'String'>
    readonly settings: FieldRef<"ChatRoom", 'String'>
    readonly lastMessageAt: FieldRef<"ChatRoom", 'DateTime'>
    readonly messageCount: FieldRef<"ChatRoom", 'Int'>
    readonly totalTokens: FieldRef<"ChatRoom", 'Int'>
    readonly isActive: FieldRef<"ChatRoom", 'Boolean'>
    readonly createdAt: FieldRef<"ChatRoom", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatRoom", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatRoom findUnique
   */
  export type ChatRoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom findUniqueOrThrow
   */
  export type ChatRoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom findFirst
   */
  export type ChatRoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRooms.
     */
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * ChatRoom findFirstOrThrow
   */
  export type ChatRoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRooms.
     */
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * ChatRoom findMany
   */
  export type ChatRoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRooms to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * ChatRoom create
   */
  export type ChatRoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatRoom.
     */
    data: XOR<ChatRoomCreateInput, ChatRoomUncheckedCreateInput>
  }

  /**
   * ChatRoom createMany
   */
  export type ChatRoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatRooms.
     */
    data: ChatRoomCreateManyInput | ChatRoomCreateManyInput[]
  }

  /**
   * ChatRoom createManyAndReturn
   */
  export type ChatRoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChatRooms.
     */
    data: ChatRoomCreateManyInput | ChatRoomCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatRoom update
   */
  export type ChatRoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatRoom.
     */
    data: XOR<ChatRoomUpdateInput, ChatRoomUncheckedUpdateInput>
    /**
     * Choose, which ChatRoom to update.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom updateMany
   */
  export type ChatRoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatRooms.
     */
    data: XOR<ChatRoomUpdateManyMutationInput, ChatRoomUncheckedUpdateManyInput>
    /**
     * Filter which ChatRooms to update
     */
    where?: ChatRoomWhereInput
  }

  /**
   * ChatRoom upsert
   */
  export type ChatRoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatRoom to update in case it exists.
     */
    where: ChatRoomWhereUniqueInput
    /**
     * In case the ChatRoom found by the `where` argument doesn't exist, create a new ChatRoom with this data.
     */
    create: XOR<ChatRoomCreateInput, ChatRoomUncheckedCreateInput>
    /**
     * In case the ChatRoom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatRoomUpdateInput, ChatRoomUncheckedUpdateInput>
  }

  /**
   * ChatRoom delete
   */
  export type ChatRoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter which ChatRoom to delete.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom deleteMany
   */
  export type ChatRoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRooms to delete
     */
    where?: ChatRoomWhereInput
  }

  /**
   * ChatRoom.participants
   */
  export type ChatRoom$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatParticipant
     */
    select?: ChatParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatParticipantInclude<ExtArgs> | null
    where?: ChatParticipantWhereInput
    orderBy?: ChatParticipantOrderByWithRelationInput | ChatParticipantOrderByWithRelationInput[]
    cursor?: ChatParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatParticipantScalarFieldEnum | ChatParticipantScalarFieldEnum[]
  }

  /**
   * ChatRoom.messages
   */
  export type ChatRoom$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatRoom without action
   */
  export type ChatRoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
  }


  /**
   * Model ChatParticipant
   */

  export type AggregateChatParticipant = {
    _count: ChatParticipantCountAggregateOutputType | null
    _min: ChatParticipantMinAggregateOutputType | null
    _max: ChatParticipantMaxAggregateOutputType | null
  }

  export type ChatParticipantMinAggregateOutputType = {
    id: string | null
    roomId: string | null
    userId: string | null
    characterId: string | null
    role: string | null
    permissions: string | null
    joinedAt: Date | null
    lastSeenAt: Date | null
    isActive: boolean | null
    isMuted: boolean | null
  }

  export type ChatParticipantMaxAggregateOutputType = {
    id: string | null
    roomId: string | null
    userId: string | null
    characterId: string | null
    role: string | null
    permissions: string | null
    joinedAt: Date | null
    lastSeenAt: Date | null
    isActive: boolean | null
    isMuted: boolean | null
  }

  export type ChatParticipantCountAggregateOutputType = {
    id: number
    roomId: number
    userId: number
    characterId: number
    role: number
    permissions: number
    joinedAt: number
    lastSeenAt: number
    isActive: number
    isMuted: number
    _all: number
  }


  export type ChatParticipantMinAggregateInputType = {
    id?: true
    roomId?: true
    userId?: true
    characterId?: true
    role?: true
    permissions?: true
    joinedAt?: true
    lastSeenAt?: true
    isActive?: true
    isMuted?: true
  }

  export type ChatParticipantMaxAggregateInputType = {
    id?: true
    roomId?: true
    userId?: true
    characterId?: true
    role?: true
    permissions?: true
    joinedAt?: true
    lastSeenAt?: true
    isActive?: true
    isMuted?: true
  }

  export type ChatParticipantCountAggregateInputType = {
    id?: true
    roomId?: true
    userId?: true
    characterId?: true
    role?: true
    permissions?: true
    joinedAt?: true
    lastSeenAt?: true
    isActive?: true
    isMuted?: true
    _all?: true
  }

  export type ChatParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatParticipant to aggregate.
     */
    where?: ChatParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatParticipants to fetch.
     */
    orderBy?: ChatParticipantOrderByWithRelationInput | ChatParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatParticipants
    **/
    _count?: true | ChatParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatParticipantMaxAggregateInputType
  }

  export type GetChatParticipantAggregateType<T extends ChatParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateChatParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatParticipant[P]>
      : GetScalarType<T[P], AggregateChatParticipant[P]>
  }




  export type ChatParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatParticipantWhereInput
    orderBy?: ChatParticipantOrderByWithAggregationInput | ChatParticipantOrderByWithAggregationInput[]
    by: ChatParticipantScalarFieldEnum[] | ChatParticipantScalarFieldEnum
    having?: ChatParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatParticipantCountAggregateInputType | true
    _min?: ChatParticipantMinAggregateInputType
    _max?: ChatParticipantMaxAggregateInputType
  }

  export type ChatParticipantGroupByOutputType = {
    id: string
    roomId: string
    userId: string | null
    characterId: string | null
    role: string
    permissions: string
    joinedAt: Date
    lastSeenAt: Date
    isActive: boolean
    isMuted: boolean
    _count: ChatParticipantCountAggregateOutputType | null
    _min: ChatParticipantMinAggregateOutputType | null
    _max: ChatParticipantMaxAggregateOutputType | null
  }

  type GetChatParticipantGroupByPayload<T extends ChatParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], ChatParticipantGroupByOutputType[P]>
        }
      >
    >


  export type ChatParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    userId?: boolean
    characterId?: boolean
    role?: boolean
    permissions?: boolean
    joinedAt?: boolean
    lastSeenAt?: boolean
    isActive?: boolean
    isMuted?: boolean
    room?: boolean | ChatRoomDefaultArgs<ExtArgs>
    user?: boolean | ChatParticipant$userArgs<ExtArgs>
    character?: boolean | ChatParticipant$characterArgs<ExtArgs>
  }, ExtArgs["result"]["chatParticipant"]>

  export type ChatParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    userId?: boolean
    characterId?: boolean
    role?: boolean
    permissions?: boolean
    joinedAt?: boolean
    lastSeenAt?: boolean
    isActive?: boolean
    isMuted?: boolean
    room?: boolean | ChatRoomDefaultArgs<ExtArgs>
    user?: boolean | ChatParticipant$userArgs<ExtArgs>
    character?: boolean | ChatParticipant$characterArgs<ExtArgs>
  }, ExtArgs["result"]["chatParticipant"]>

  export type ChatParticipantSelectScalar = {
    id?: boolean
    roomId?: boolean
    userId?: boolean
    characterId?: boolean
    role?: boolean
    permissions?: boolean
    joinedAt?: boolean
    lastSeenAt?: boolean
    isActive?: boolean
    isMuted?: boolean
  }

  export type ChatParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | ChatRoomDefaultArgs<ExtArgs>
    user?: boolean | ChatParticipant$userArgs<ExtArgs>
    character?: boolean | ChatParticipant$characterArgs<ExtArgs>
  }
  export type ChatParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | ChatRoomDefaultArgs<ExtArgs>
    user?: boolean | ChatParticipant$userArgs<ExtArgs>
    character?: boolean | ChatParticipant$characterArgs<ExtArgs>
  }

  export type $ChatParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatParticipant"
    objects: {
      room: Prisma.$ChatRoomPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
      character: Prisma.$CharacterPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      roomId: string
      userId: string | null
      characterId: string | null
      role: string
      permissions: string
      joinedAt: Date
      lastSeenAt: Date
      isActive: boolean
      isMuted: boolean
    }, ExtArgs["result"]["chatParticipant"]>
    composites: {}
  }

  type ChatParticipantGetPayload<S extends boolean | null | undefined | ChatParticipantDefaultArgs> = $Result.GetResult<Prisma.$ChatParticipantPayload, S>

  type ChatParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatParticipantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatParticipantCountAggregateInputType | true
    }

  export interface ChatParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatParticipant'], meta: { name: 'ChatParticipant' } }
    /**
     * Find zero or one ChatParticipant that matches the filter.
     * @param {ChatParticipantFindUniqueArgs} args - Arguments to find a ChatParticipant
     * @example
     * // Get one ChatParticipant
     * const chatParticipant = await prisma.chatParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatParticipantFindUniqueArgs>(args: SelectSubset<T, ChatParticipantFindUniqueArgs<ExtArgs>>): Prisma__ChatParticipantClient<$Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChatParticipant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatParticipantFindUniqueOrThrowArgs} args - Arguments to find a ChatParticipant
     * @example
     * // Get one ChatParticipant
     * const chatParticipant = await prisma.chatParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatParticipantClient<$Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChatParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatParticipantFindFirstArgs} args - Arguments to find a ChatParticipant
     * @example
     * // Get one ChatParticipant
     * const chatParticipant = await prisma.chatParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatParticipantFindFirstArgs>(args?: SelectSubset<T, ChatParticipantFindFirstArgs<ExtArgs>>): Prisma__ChatParticipantClient<$Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChatParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatParticipantFindFirstOrThrowArgs} args - Arguments to find a ChatParticipant
     * @example
     * // Get one ChatParticipant
     * const chatParticipant = await prisma.chatParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatParticipantClient<$Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChatParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatParticipants
     * const chatParticipants = await prisma.chatParticipant.findMany()
     * 
     * // Get first 10 ChatParticipants
     * const chatParticipants = await prisma.chatParticipant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatParticipantWithIdOnly = await prisma.chatParticipant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatParticipantFindManyArgs>(args?: SelectSubset<T, ChatParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChatParticipant.
     * @param {ChatParticipantCreateArgs} args - Arguments to create a ChatParticipant.
     * @example
     * // Create one ChatParticipant
     * const ChatParticipant = await prisma.chatParticipant.create({
     *   data: {
     *     // ... data to create a ChatParticipant
     *   }
     * })
     * 
     */
    create<T extends ChatParticipantCreateArgs>(args: SelectSubset<T, ChatParticipantCreateArgs<ExtArgs>>): Prisma__ChatParticipantClient<$Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChatParticipants.
     * @param {ChatParticipantCreateManyArgs} args - Arguments to create many ChatParticipants.
     * @example
     * // Create many ChatParticipants
     * const chatParticipant = await prisma.chatParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatParticipantCreateManyArgs>(args?: SelectSubset<T, ChatParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatParticipants and returns the data saved in the database.
     * @param {ChatParticipantCreateManyAndReturnArgs} args - Arguments to create many ChatParticipants.
     * @example
     * // Create many ChatParticipants
     * const chatParticipant = await prisma.chatParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatParticipants and only return the `id`
     * const chatParticipantWithIdOnly = await prisma.chatParticipant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChatParticipant.
     * @param {ChatParticipantDeleteArgs} args - Arguments to delete one ChatParticipant.
     * @example
     * // Delete one ChatParticipant
     * const ChatParticipant = await prisma.chatParticipant.delete({
     *   where: {
     *     // ... filter to delete one ChatParticipant
     *   }
     * })
     * 
     */
    delete<T extends ChatParticipantDeleteArgs>(args: SelectSubset<T, ChatParticipantDeleteArgs<ExtArgs>>): Prisma__ChatParticipantClient<$Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChatParticipant.
     * @param {ChatParticipantUpdateArgs} args - Arguments to update one ChatParticipant.
     * @example
     * // Update one ChatParticipant
     * const chatParticipant = await prisma.chatParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatParticipantUpdateArgs>(args: SelectSubset<T, ChatParticipantUpdateArgs<ExtArgs>>): Prisma__ChatParticipantClient<$Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChatParticipants.
     * @param {ChatParticipantDeleteManyArgs} args - Arguments to filter ChatParticipants to delete.
     * @example
     * // Delete a few ChatParticipants
     * const { count } = await prisma.chatParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatParticipantDeleteManyArgs>(args?: SelectSubset<T, ChatParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatParticipants
     * const chatParticipant = await prisma.chatParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatParticipantUpdateManyArgs>(args: SelectSubset<T, ChatParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatParticipant.
     * @param {ChatParticipantUpsertArgs} args - Arguments to update or create a ChatParticipant.
     * @example
     * // Update or create a ChatParticipant
     * const chatParticipant = await prisma.chatParticipant.upsert({
     *   create: {
     *     // ... data to create a ChatParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatParticipant we want to update
     *   }
     * })
     */
    upsert<T extends ChatParticipantUpsertArgs>(args: SelectSubset<T, ChatParticipantUpsertArgs<ExtArgs>>): Prisma__ChatParticipantClient<$Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChatParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatParticipantCountArgs} args - Arguments to filter ChatParticipants to count.
     * @example
     * // Count the number of ChatParticipants
     * const count = await prisma.chatParticipant.count({
     *   where: {
     *     // ... the filter for the ChatParticipants we want to count
     *   }
     * })
    **/
    count<T extends ChatParticipantCountArgs>(
      args?: Subset<T, ChatParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatParticipantAggregateArgs>(args: Subset<T, ChatParticipantAggregateArgs>): Prisma.PrismaPromise<GetChatParticipantAggregateType<T>>

    /**
     * Group by ChatParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatParticipantGroupByArgs['orderBy'] }
        : { orderBy?: ChatParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatParticipant model
   */
  readonly fields: ChatParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    room<T extends ChatRoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoomDefaultArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends ChatParticipant$userArgs<ExtArgs> = {}>(args?: Subset<T, ChatParticipant$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    character<T extends ChatParticipant$characterArgs<ExtArgs> = {}>(args?: Subset<T, ChatParticipant$characterArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatParticipant model
   */ 
  interface ChatParticipantFieldRefs {
    readonly id: FieldRef<"ChatParticipant", 'String'>
    readonly roomId: FieldRef<"ChatParticipant", 'String'>
    readonly userId: FieldRef<"ChatParticipant", 'String'>
    readonly characterId: FieldRef<"ChatParticipant", 'String'>
    readonly role: FieldRef<"ChatParticipant", 'String'>
    readonly permissions: FieldRef<"ChatParticipant", 'String'>
    readonly joinedAt: FieldRef<"ChatParticipant", 'DateTime'>
    readonly lastSeenAt: FieldRef<"ChatParticipant", 'DateTime'>
    readonly isActive: FieldRef<"ChatParticipant", 'Boolean'>
    readonly isMuted: FieldRef<"ChatParticipant", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ChatParticipant findUnique
   */
  export type ChatParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatParticipant
     */
    select?: ChatParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ChatParticipant to fetch.
     */
    where: ChatParticipantWhereUniqueInput
  }

  /**
   * ChatParticipant findUniqueOrThrow
   */
  export type ChatParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatParticipant
     */
    select?: ChatParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ChatParticipant to fetch.
     */
    where: ChatParticipantWhereUniqueInput
  }

  /**
   * ChatParticipant findFirst
   */
  export type ChatParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatParticipant
     */
    select?: ChatParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ChatParticipant to fetch.
     */
    where?: ChatParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatParticipants to fetch.
     */
    orderBy?: ChatParticipantOrderByWithRelationInput | ChatParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatParticipants.
     */
    cursor?: ChatParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatParticipants.
     */
    distinct?: ChatParticipantScalarFieldEnum | ChatParticipantScalarFieldEnum[]
  }

  /**
   * ChatParticipant findFirstOrThrow
   */
  export type ChatParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatParticipant
     */
    select?: ChatParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ChatParticipant to fetch.
     */
    where?: ChatParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatParticipants to fetch.
     */
    orderBy?: ChatParticipantOrderByWithRelationInput | ChatParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatParticipants.
     */
    cursor?: ChatParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatParticipants.
     */
    distinct?: ChatParticipantScalarFieldEnum | ChatParticipantScalarFieldEnum[]
  }

  /**
   * ChatParticipant findMany
   */
  export type ChatParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatParticipant
     */
    select?: ChatParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ChatParticipants to fetch.
     */
    where?: ChatParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatParticipants to fetch.
     */
    orderBy?: ChatParticipantOrderByWithRelationInput | ChatParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatParticipants.
     */
    cursor?: ChatParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatParticipants.
     */
    skip?: number
    distinct?: ChatParticipantScalarFieldEnum | ChatParticipantScalarFieldEnum[]
  }

  /**
   * ChatParticipant create
   */
  export type ChatParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatParticipant
     */
    select?: ChatParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatParticipant.
     */
    data: XOR<ChatParticipantCreateInput, ChatParticipantUncheckedCreateInput>
  }

  /**
   * ChatParticipant createMany
   */
  export type ChatParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatParticipants.
     */
    data: ChatParticipantCreateManyInput | ChatParticipantCreateManyInput[]
  }

  /**
   * ChatParticipant createManyAndReturn
   */
  export type ChatParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatParticipant
     */
    select?: ChatParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChatParticipants.
     */
    data: ChatParticipantCreateManyInput | ChatParticipantCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatParticipant update
   */
  export type ChatParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatParticipant
     */
    select?: ChatParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatParticipant.
     */
    data: XOR<ChatParticipantUpdateInput, ChatParticipantUncheckedUpdateInput>
    /**
     * Choose, which ChatParticipant to update.
     */
    where: ChatParticipantWhereUniqueInput
  }

  /**
   * ChatParticipant updateMany
   */
  export type ChatParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatParticipants.
     */
    data: XOR<ChatParticipantUpdateManyMutationInput, ChatParticipantUncheckedUpdateManyInput>
    /**
     * Filter which ChatParticipants to update
     */
    where?: ChatParticipantWhereInput
  }

  /**
   * ChatParticipant upsert
   */
  export type ChatParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatParticipant
     */
    select?: ChatParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatParticipant to update in case it exists.
     */
    where: ChatParticipantWhereUniqueInput
    /**
     * In case the ChatParticipant found by the `where` argument doesn't exist, create a new ChatParticipant with this data.
     */
    create: XOR<ChatParticipantCreateInput, ChatParticipantUncheckedCreateInput>
    /**
     * In case the ChatParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatParticipantUpdateInput, ChatParticipantUncheckedUpdateInput>
  }

  /**
   * ChatParticipant delete
   */
  export type ChatParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatParticipant
     */
    select?: ChatParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatParticipantInclude<ExtArgs> | null
    /**
     * Filter which ChatParticipant to delete.
     */
    where: ChatParticipantWhereUniqueInput
  }

  /**
   * ChatParticipant deleteMany
   */
  export type ChatParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatParticipants to delete
     */
    where?: ChatParticipantWhereInput
  }

  /**
   * ChatParticipant.user
   */
  export type ChatParticipant$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChatParticipant.character
   */
  export type ChatParticipant$characterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    where?: CharacterWhereInput
  }

  /**
   * ChatParticipant without action
   */
  export type ChatParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatParticipant
     */
    select?: ChatParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatParticipantInclude<ExtArgs> | null
  }


  /**
   * Model ChatMessage
   */

  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null
    _avg: ChatMessageAvgAggregateOutputType | null
    _sum: ChatMessageSumAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  export type ChatMessageAvgAggregateOutputType = {
    tokens: number | null
  }

  export type ChatMessageSumAggregateOutputType = {
    tokens: number | null
  }

  export type ChatMessageMinAggregateOutputType = {
    id: string | null
    roomId: string | null
    senderId: string | null
    characterId: string | null
    content: string | null
    messageType: string | null
    replyToId: string | null
    tokens: number | null
    isEdited: boolean | null
    isDeleted: boolean | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatMessageMaxAggregateOutputType = {
    id: string | null
    roomId: string | null
    senderId: string | null
    characterId: string | null
    content: string | null
    messageType: string | null
    replyToId: string | null
    tokens: number | null
    isEdited: boolean | null
    isDeleted: boolean | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatMessageCountAggregateOutputType = {
    id: number
    roomId: number
    senderId: number
    characterId: number
    content: number
    messageType: number
    replyToId: number
    tokens: number
    isEdited: number
    isDeleted: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChatMessageAvgAggregateInputType = {
    tokens?: true
  }

  export type ChatMessageSumAggregateInputType = {
    tokens?: true
  }

  export type ChatMessageMinAggregateInputType = {
    id?: true
    roomId?: true
    senderId?: true
    characterId?: true
    content?: true
    messageType?: true
    replyToId?: true
    tokens?: true
    isEdited?: true
    isDeleted?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatMessageMaxAggregateInputType = {
    id?: true
    roomId?: true
    senderId?: true
    characterId?: true
    content?: true
    messageType?: true
    replyToId?: true
    tokens?: true
    isEdited?: true
    isDeleted?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatMessageCountAggregateInputType = {
    id?: true
    roomId?: true
    senderId?: true
    characterId?: true
    content?: true
    messageType?: true
    replyToId?: true
    tokens?: true
    isEdited?: true
    isDeleted?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessage to aggregate.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessageMaxAggregateInputType
  }

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessage[P]>
      : GetScalarType<T[P], AggregateChatMessage[P]>
  }




  export type ChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithAggregationInput | ChatMessageOrderByWithAggregationInput[]
    by: ChatMessageScalarFieldEnum[] | ChatMessageScalarFieldEnum
    having?: ChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessageCountAggregateInputType | true
    _avg?: ChatMessageAvgAggregateInputType
    _sum?: ChatMessageSumAggregateInputType
    _min?: ChatMessageMinAggregateInputType
    _max?: ChatMessageMaxAggregateInputType
  }

  export type ChatMessageGroupByOutputType = {
    id: string
    roomId: string
    senderId: string | null
    characterId: string | null
    content: string
    messageType: string
    replyToId: string | null
    tokens: number
    isEdited: boolean
    isDeleted: boolean
    metadata: string | null
    createdAt: Date
    updatedAt: Date
    _count: ChatMessageCountAggregateOutputType | null
    _avg: ChatMessageAvgAggregateOutputType | null
    _sum: ChatMessageSumAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    senderId?: boolean
    characterId?: boolean
    content?: boolean
    messageType?: boolean
    replyToId?: boolean
    tokens?: boolean
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    room?: boolean | ChatRoomDefaultArgs<ExtArgs>
    sender?: boolean | ChatMessage$senderArgs<ExtArgs>
    character?: boolean | ChatMessage$characterArgs<ExtArgs>
    replyTo?: boolean | ChatMessage$replyToArgs<ExtArgs>
    replies?: boolean | ChatMessage$repliesArgs<ExtArgs>
    _count?: boolean | ChatMessageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    senderId?: boolean
    characterId?: boolean
    content?: boolean
    messageType?: boolean
    replyToId?: boolean
    tokens?: boolean
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    room?: boolean | ChatRoomDefaultArgs<ExtArgs>
    sender?: boolean | ChatMessage$senderArgs<ExtArgs>
    character?: boolean | ChatMessage$characterArgs<ExtArgs>
    replyTo?: boolean | ChatMessage$replyToArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectScalar = {
    id?: boolean
    roomId?: boolean
    senderId?: boolean
    characterId?: boolean
    content?: boolean
    messageType?: boolean
    replyToId?: boolean
    tokens?: boolean
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | ChatRoomDefaultArgs<ExtArgs>
    sender?: boolean | ChatMessage$senderArgs<ExtArgs>
    character?: boolean | ChatMessage$characterArgs<ExtArgs>
    replyTo?: boolean | ChatMessage$replyToArgs<ExtArgs>
    replies?: boolean | ChatMessage$repliesArgs<ExtArgs>
    _count?: boolean | ChatMessageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | ChatRoomDefaultArgs<ExtArgs>
    sender?: boolean | ChatMessage$senderArgs<ExtArgs>
    character?: boolean | ChatMessage$characterArgs<ExtArgs>
    replyTo?: boolean | ChatMessage$replyToArgs<ExtArgs>
  }

  export type $ChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatMessage"
    objects: {
      room: Prisma.$ChatRoomPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs> | null
      character: Prisma.$CharacterPayload<ExtArgs> | null
      replyTo: Prisma.$ChatMessagePayload<ExtArgs> | null
      replies: Prisma.$ChatMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      roomId: string
      senderId: string | null
      characterId: string | null
      content: string
      messageType: string
      replyToId: string | null
      tokens: number
      isEdited: boolean
      isDeleted: boolean
      metadata: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chatMessage"]>
    composites: {}
  }

  type ChatMessageGetPayload<S extends boolean | null | undefined | ChatMessageDefaultArgs> = $Result.GetResult<Prisma.$ChatMessagePayload, S>

  type ChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatMessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatMessageCountAggregateInputType | true
    }

  export interface ChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessage'], meta: { name: 'ChatMessage' } }
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatMessageFindUniqueArgs>(args: SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatMessageFindFirstArgs>(args?: SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatMessageFindManyArgs>(args?: SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     * 
     */
    create<T extends ChatMessageCreateArgs>(args: SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChatMessages.
     * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatMessageCreateManyArgs>(args?: SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatMessages and returns the data saved in the database.
     * @param {ChatMessageCreateManyAndReturnArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     * 
     */
    delete<T extends ChatMessageDeleteArgs>(args: SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatMessageUpdateArgs>(args: SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatMessageDeleteManyArgs>(args?: SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatMessageUpdateManyArgs>(args: SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ChatMessageUpsertArgs>(args: SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessageAggregateArgs>(args: Subset<T, ChatMessageAggregateArgs>): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatMessage model
   */
  readonly fields: ChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    room<T extends ChatRoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoomDefaultArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sender<T extends ChatMessage$senderArgs<ExtArgs> = {}>(args?: Subset<T, ChatMessage$senderArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    character<T extends ChatMessage$characterArgs<ExtArgs> = {}>(args?: Subset<T, ChatMessage$characterArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    replyTo<T extends ChatMessage$replyToArgs<ExtArgs> = {}>(args?: Subset<T, ChatMessage$replyToArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    replies<T extends ChatMessage$repliesArgs<ExtArgs> = {}>(args?: Subset<T, ChatMessage$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatMessage model
   */ 
  interface ChatMessageFieldRefs {
    readonly id: FieldRef<"ChatMessage", 'String'>
    readonly roomId: FieldRef<"ChatMessage", 'String'>
    readonly senderId: FieldRef<"ChatMessage", 'String'>
    readonly characterId: FieldRef<"ChatMessage", 'String'>
    readonly content: FieldRef<"ChatMessage", 'String'>
    readonly messageType: FieldRef<"ChatMessage", 'String'>
    readonly replyToId: FieldRef<"ChatMessage", 'String'>
    readonly tokens: FieldRef<"ChatMessage", 'Int'>
    readonly isEdited: FieldRef<"ChatMessage", 'Boolean'>
    readonly isDeleted: FieldRef<"ChatMessage", 'Boolean'>
    readonly metadata: FieldRef<"ChatMessage", 'String'>
    readonly createdAt: FieldRef<"ChatMessage", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findUniqueOrThrow
   */
  export type ChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findFirstOrThrow
   */
  export type ChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatMessage.
     */
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
  }

  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
  }

  /**
   * ChatMessage createManyAndReturn
   */
  export type ChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatMessage.
     */
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ChatMessage to update.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
  }

  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     */
    where: ChatMessageWhereUniqueInput
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     */
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
  }

  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter which ChatMessage to delete.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessageWhereInput
  }

  /**
   * ChatMessage.sender
   */
  export type ChatMessage$senderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChatMessage.character
   */
  export type ChatMessage$characterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    where?: CharacterWhereInput
  }

  /**
   * ChatMessage.replyTo
   */
  export type ChatMessage$replyToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
  }

  /**
   * ChatMessage.replies
   */
  export type ChatMessage$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage without action
   */
  export type ChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type TransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    amount: number | null
    currency: string | null
    status: string | null
    method: string | null
    externalId: string | null
    description: string | null
    metadata: string | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    amount: number | null
    currency: string | null
    status: string | null
    method: string | null
    externalId: string | null
    description: string | null
    metadata: string | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    amount: number
    currency: number
    status: number
    method: number
    externalId: number
    description: number
    metadata: number
    completedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    amount?: true
  }

  export type TransactionSumAggregateInputType = {
    amount?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    amount?: true
    currency?: true
    status?: true
    method?: true
    externalId?: true
    description?: true
    metadata?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    amount?: true
    currency?: true
    status?: true
    method?: true
    externalId?: true
    description?: true
    metadata?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    amount?: true
    currency?: true
    status?: true
    method?: true
    externalId?: true
    description?: true
    metadata?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    userId: string
    type: string
    amount: number
    currency: string
    status: string
    method: string
    externalId: string | null
    description: string
    metadata: string | null
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    method?: boolean
    externalId?: boolean
    description?: boolean
    metadata?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    method?: boolean
    externalId?: boolean
    description?: boolean
    metadata?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    method?: boolean
    externalId?: boolean
    description?: boolean
    metadata?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      amount: number
      currency: string
      status: string
      method: string
      externalId: string | null
      description: string
      metadata: string | null
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */ 
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly userId: FieldRef<"Transaction", 'String'>
    readonly type: FieldRef<"Transaction", 'String'>
    readonly amount: FieldRef<"Transaction", 'Float'>
    readonly currency: FieldRef<"Transaction", 'String'>
    readonly status: FieldRef<"Transaction", 'String'>
    readonly method: FieldRef<"Transaction", 'String'>
    readonly externalId: FieldRef<"Transaction", 'String'>
    readonly description: FieldRef<"Transaction", 'String'>
    readonly metadata: FieldRef<"Transaction", 'String'>
    readonly completedAt: FieldRef<"Transaction", 'DateTime'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly updatedAt: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    tokens: number | null
  }

  export type MessageSumAggregateOutputType = {
    tokens: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    userId: string | null
    characterId: string | null
    role: string | null
    content: string | null
    tokens: number | null
    edited: boolean | null
    deleted: boolean | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    userId: string | null
    characterId: string | null
    role: string | null
    content: string | null
    tokens: number | null
    edited: boolean | null
    deleted: boolean | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    sessionId: number
    userId: number
    characterId: number
    role: number
    content: number
    tokens: number
    edited: number
    deleted: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    tokens?: true
  }

  export type MessageSumAggregateInputType = {
    tokens?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    sessionId?: true
    userId?: true
    characterId?: true
    role?: true
    content?: true
    tokens?: true
    edited?: true
    deleted?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    sessionId?: true
    userId?: true
    characterId?: true
    role?: true
    content?: true
    tokens?: true
    edited?: true
    deleted?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    sessionId?: true
    userId?: true
    characterId?: true
    role?: true
    content?: true
    tokens?: true
    edited?: true
    deleted?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    sessionId: string
    userId: string | null
    characterId: string | null
    role: string
    content: string
    tokens: number
    edited: boolean
    deleted: boolean
    metadata: string | null
    createdAt: Date
    updatedAt: Date
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    characterId?: boolean
    role?: boolean
    content?: boolean
    tokens?: boolean
    edited?: boolean
    deleted?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
    user?: boolean | Message$userArgs<ExtArgs>
    character?: boolean | Message$characterArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    characterId?: boolean
    role?: boolean
    content?: boolean
    tokens?: boolean
    edited?: boolean
    deleted?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
    user?: boolean | Message$userArgs<ExtArgs>
    character?: boolean | Message$characterArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    characterId?: boolean
    role?: boolean
    content?: boolean
    tokens?: boolean
    edited?: boolean
    deleted?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
    user?: boolean | Message$userArgs<ExtArgs>
    character?: boolean | Message$characterArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
    user?: boolean | Message$userArgs<ExtArgs>
    character?: boolean | Message$characterArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      session: Prisma.$ChatSessionPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
      character: Prisma.$CharacterPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      userId: string | null
      characterId: string | null
      role: string
      content: string
      tokens: number
      edited: boolean
      deleted: boolean
      metadata: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends ChatSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatSessionDefaultArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends Message$userArgs<ExtArgs> = {}>(args?: Subset<T, Message$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    character<T extends Message$characterArgs<ExtArgs> = {}>(args?: Subset<T, Message$characterArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly sessionId: FieldRef<"Message", 'String'>
    readonly userId: FieldRef<"Message", 'String'>
    readonly characterId: FieldRef<"Message", 'String'>
    readonly role: FieldRef<"Message", 'String'>
    readonly content: FieldRef<"Message", 'String'>
    readonly tokens: FieldRef<"Message", 'Int'>
    readonly edited: FieldRef<"Message", 'Boolean'>
    readonly deleted: FieldRef<"Message", 'Boolean'>
    readonly metadata: FieldRef<"Message", 'String'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly updatedAt: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }

  /**
   * Message.user
   */
  export type Message$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Message.character
   */
  export type Message$characterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    where?: CharacterWhereInput
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model CharacterFavorite
   */

  export type AggregateCharacterFavorite = {
    _count: CharacterFavoriteCountAggregateOutputType | null
    _min: CharacterFavoriteMinAggregateOutputType | null
    _max: CharacterFavoriteMaxAggregateOutputType | null
  }

  export type CharacterFavoriteMinAggregateOutputType = {
    id: string | null
    userId: string | null
    characterId: string | null
    createdAt: Date | null
  }

  export type CharacterFavoriteMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    characterId: string | null
    createdAt: Date | null
  }

  export type CharacterFavoriteCountAggregateOutputType = {
    id: number
    userId: number
    characterId: number
    createdAt: number
    _all: number
  }


  export type CharacterFavoriteMinAggregateInputType = {
    id?: true
    userId?: true
    characterId?: true
    createdAt?: true
  }

  export type CharacterFavoriteMaxAggregateInputType = {
    id?: true
    userId?: true
    characterId?: true
    createdAt?: true
  }

  export type CharacterFavoriteCountAggregateInputType = {
    id?: true
    userId?: true
    characterId?: true
    createdAt?: true
    _all?: true
  }

  export type CharacterFavoriteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CharacterFavorite to aggregate.
     */
    where?: CharacterFavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterFavorites to fetch.
     */
    orderBy?: CharacterFavoriteOrderByWithRelationInput | CharacterFavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CharacterFavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterFavorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterFavorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CharacterFavorites
    **/
    _count?: true | CharacterFavoriteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CharacterFavoriteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CharacterFavoriteMaxAggregateInputType
  }

  export type GetCharacterFavoriteAggregateType<T extends CharacterFavoriteAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacterFavorite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacterFavorite[P]>
      : GetScalarType<T[P], AggregateCharacterFavorite[P]>
  }




  export type CharacterFavoriteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterFavoriteWhereInput
    orderBy?: CharacterFavoriteOrderByWithAggregationInput | CharacterFavoriteOrderByWithAggregationInput[]
    by: CharacterFavoriteScalarFieldEnum[] | CharacterFavoriteScalarFieldEnum
    having?: CharacterFavoriteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CharacterFavoriteCountAggregateInputType | true
    _min?: CharacterFavoriteMinAggregateInputType
    _max?: CharacterFavoriteMaxAggregateInputType
  }

  export type CharacterFavoriteGroupByOutputType = {
    id: string
    userId: string
    characterId: string
    createdAt: Date
    _count: CharacterFavoriteCountAggregateOutputType | null
    _min: CharacterFavoriteMinAggregateOutputType | null
    _max: CharacterFavoriteMaxAggregateOutputType | null
  }

  type GetCharacterFavoriteGroupByPayload<T extends CharacterFavoriteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CharacterFavoriteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CharacterFavoriteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CharacterFavoriteGroupByOutputType[P]>
            : GetScalarType<T[P], CharacterFavoriteGroupByOutputType[P]>
        }
      >
    >


  export type CharacterFavoriteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    characterId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["characterFavorite"]>

  export type CharacterFavoriteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    characterId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["characterFavorite"]>

  export type CharacterFavoriteSelectScalar = {
    id?: boolean
    userId?: boolean
    characterId?: boolean
    createdAt?: boolean
  }

  export type CharacterFavoriteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }
  export type CharacterFavoriteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }

  export type $CharacterFavoritePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CharacterFavorite"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      character: Prisma.$CharacterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      characterId: string
      createdAt: Date
    }, ExtArgs["result"]["characterFavorite"]>
    composites: {}
  }

  type CharacterFavoriteGetPayload<S extends boolean | null | undefined | CharacterFavoriteDefaultArgs> = $Result.GetResult<Prisma.$CharacterFavoritePayload, S>

  type CharacterFavoriteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CharacterFavoriteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CharacterFavoriteCountAggregateInputType | true
    }

  export interface CharacterFavoriteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CharacterFavorite'], meta: { name: 'CharacterFavorite' } }
    /**
     * Find zero or one CharacterFavorite that matches the filter.
     * @param {CharacterFavoriteFindUniqueArgs} args - Arguments to find a CharacterFavorite
     * @example
     * // Get one CharacterFavorite
     * const characterFavorite = await prisma.characterFavorite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CharacterFavoriteFindUniqueArgs>(args: SelectSubset<T, CharacterFavoriteFindUniqueArgs<ExtArgs>>): Prisma__CharacterFavoriteClient<$Result.GetResult<Prisma.$CharacterFavoritePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CharacterFavorite that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CharacterFavoriteFindUniqueOrThrowArgs} args - Arguments to find a CharacterFavorite
     * @example
     * // Get one CharacterFavorite
     * const characterFavorite = await prisma.characterFavorite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CharacterFavoriteFindUniqueOrThrowArgs>(args: SelectSubset<T, CharacterFavoriteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CharacterFavoriteClient<$Result.GetResult<Prisma.$CharacterFavoritePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CharacterFavorite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFavoriteFindFirstArgs} args - Arguments to find a CharacterFavorite
     * @example
     * // Get one CharacterFavorite
     * const characterFavorite = await prisma.characterFavorite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CharacterFavoriteFindFirstArgs>(args?: SelectSubset<T, CharacterFavoriteFindFirstArgs<ExtArgs>>): Prisma__CharacterFavoriteClient<$Result.GetResult<Prisma.$CharacterFavoritePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CharacterFavorite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFavoriteFindFirstOrThrowArgs} args - Arguments to find a CharacterFavorite
     * @example
     * // Get one CharacterFavorite
     * const characterFavorite = await prisma.characterFavorite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CharacterFavoriteFindFirstOrThrowArgs>(args?: SelectSubset<T, CharacterFavoriteFindFirstOrThrowArgs<ExtArgs>>): Prisma__CharacterFavoriteClient<$Result.GetResult<Prisma.$CharacterFavoritePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CharacterFavorites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFavoriteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CharacterFavorites
     * const characterFavorites = await prisma.characterFavorite.findMany()
     * 
     * // Get first 10 CharacterFavorites
     * const characterFavorites = await prisma.characterFavorite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const characterFavoriteWithIdOnly = await prisma.characterFavorite.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CharacterFavoriteFindManyArgs>(args?: SelectSubset<T, CharacterFavoriteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterFavoritePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CharacterFavorite.
     * @param {CharacterFavoriteCreateArgs} args - Arguments to create a CharacterFavorite.
     * @example
     * // Create one CharacterFavorite
     * const CharacterFavorite = await prisma.characterFavorite.create({
     *   data: {
     *     // ... data to create a CharacterFavorite
     *   }
     * })
     * 
     */
    create<T extends CharacterFavoriteCreateArgs>(args: SelectSubset<T, CharacterFavoriteCreateArgs<ExtArgs>>): Prisma__CharacterFavoriteClient<$Result.GetResult<Prisma.$CharacterFavoritePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CharacterFavorites.
     * @param {CharacterFavoriteCreateManyArgs} args - Arguments to create many CharacterFavorites.
     * @example
     * // Create many CharacterFavorites
     * const characterFavorite = await prisma.characterFavorite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CharacterFavoriteCreateManyArgs>(args?: SelectSubset<T, CharacterFavoriteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CharacterFavorites and returns the data saved in the database.
     * @param {CharacterFavoriteCreateManyAndReturnArgs} args - Arguments to create many CharacterFavorites.
     * @example
     * // Create many CharacterFavorites
     * const characterFavorite = await prisma.characterFavorite.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CharacterFavorites and only return the `id`
     * const characterFavoriteWithIdOnly = await prisma.characterFavorite.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CharacterFavoriteCreateManyAndReturnArgs>(args?: SelectSubset<T, CharacterFavoriteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterFavoritePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CharacterFavorite.
     * @param {CharacterFavoriteDeleteArgs} args - Arguments to delete one CharacterFavorite.
     * @example
     * // Delete one CharacterFavorite
     * const CharacterFavorite = await prisma.characterFavorite.delete({
     *   where: {
     *     // ... filter to delete one CharacterFavorite
     *   }
     * })
     * 
     */
    delete<T extends CharacterFavoriteDeleteArgs>(args: SelectSubset<T, CharacterFavoriteDeleteArgs<ExtArgs>>): Prisma__CharacterFavoriteClient<$Result.GetResult<Prisma.$CharacterFavoritePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CharacterFavorite.
     * @param {CharacterFavoriteUpdateArgs} args - Arguments to update one CharacterFavorite.
     * @example
     * // Update one CharacterFavorite
     * const characterFavorite = await prisma.characterFavorite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CharacterFavoriteUpdateArgs>(args: SelectSubset<T, CharacterFavoriteUpdateArgs<ExtArgs>>): Prisma__CharacterFavoriteClient<$Result.GetResult<Prisma.$CharacterFavoritePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CharacterFavorites.
     * @param {CharacterFavoriteDeleteManyArgs} args - Arguments to filter CharacterFavorites to delete.
     * @example
     * // Delete a few CharacterFavorites
     * const { count } = await prisma.characterFavorite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CharacterFavoriteDeleteManyArgs>(args?: SelectSubset<T, CharacterFavoriteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CharacterFavorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFavoriteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CharacterFavorites
     * const characterFavorite = await prisma.characterFavorite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CharacterFavoriteUpdateManyArgs>(args: SelectSubset<T, CharacterFavoriteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CharacterFavorite.
     * @param {CharacterFavoriteUpsertArgs} args - Arguments to update or create a CharacterFavorite.
     * @example
     * // Update or create a CharacterFavorite
     * const characterFavorite = await prisma.characterFavorite.upsert({
     *   create: {
     *     // ... data to create a CharacterFavorite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CharacterFavorite we want to update
     *   }
     * })
     */
    upsert<T extends CharacterFavoriteUpsertArgs>(args: SelectSubset<T, CharacterFavoriteUpsertArgs<ExtArgs>>): Prisma__CharacterFavoriteClient<$Result.GetResult<Prisma.$CharacterFavoritePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CharacterFavorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFavoriteCountArgs} args - Arguments to filter CharacterFavorites to count.
     * @example
     * // Count the number of CharacterFavorites
     * const count = await prisma.characterFavorite.count({
     *   where: {
     *     // ... the filter for the CharacterFavorites we want to count
     *   }
     * })
    **/
    count<T extends CharacterFavoriteCountArgs>(
      args?: Subset<T, CharacterFavoriteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CharacterFavoriteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CharacterFavorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFavoriteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CharacterFavoriteAggregateArgs>(args: Subset<T, CharacterFavoriteAggregateArgs>): Prisma.PrismaPromise<GetCharacterFavoriteAggregateType<T>>

    /**
     * Group by CharacterFavorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFavoriteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CharacterFavoriteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CharacterFavoriteGroupByArgs['orderBy'] }
        : { orderBy?: CharacterFavoriteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CharacterFavoriteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacterFavoriteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CharacterFavorite model
   */
  readonly fields: CharacterFavoriteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CharacterFavorite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CharacterFavoriteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    character<T extends CharacterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CharacterDefaultArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CharacterFavorite model
   */ 
  interface CharacterFavoriteFieldRefs {
    readonly id: FieldRef<"CharacterFavorite", 'String'>
    readonly userId: FieldRef<"CharacterFavorite", 'String'>
    readonly characterId: FieldRef<"CharacterFavorite", 'String'>
    readonly createdAt: FieldRef<"CharacterFavorite", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CharacterFavorite findUnique
   */
  export type CharacterFavoriteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterFavorite
     */
    select?: CharacterFavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterFavoriteInclude<ExtArgs> | null
    /**
     * Filter, which CharacterFavorite to fetch.
     */
    where: CharacterFavoriteWhereUniqueInput
  }

  /**
   * CharacterFavorite findUniqueOrThrow
   */
  export type CharacterFavoriteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterFavorite
     */
    select?: CharacterFavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterFavoriteInclude<ExtArgs> | null
    /**
     * Filter, which CharacterFavorite to fetch.
     */
    where: CharacterFavoriteWhereUniqueInput
  }

  /**
   * CharacterFavorite findFirst
   */
  export type CharacterFavoriteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterFavorite
     */
    select?: CharacterFavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterFavoriteInclude<ExtArgs> | null
    /**
     * Filter, which CharacterFavorite to fetch.
     */
    where?: CharacterFavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterFavorites to fetch.
     */
    orderBy?: CharacterFavoriteOrderByWithRelationInput | CharacterFavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CharacterFavorites.
     */
    cursor?: CharacterFavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterFavorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterFavorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CharacterFavorites.
     */
    distinct?: CharacterFavoriteScalarFieldEnum | CharacterFavoriteScalarFieldEnum[]
  }

  /**
   * CharacterFavorite findFirstOrThrow
   */
  export type CharacterFavoriteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterFavorite
     */
    select?: CharacterFavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterFavoriteInclude<ExtArgs> | null
    /**
     * Filter, which CharacterFavorite to fetch.
     */
    where?: CharacterFavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterFavorites to fetch.
     */
    orderBy?: CharacterFavoriteOrderByWithRelationInput | CharacterFavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CharacterFavorites.
     */
    cursor?: CharacterFavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterFavorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterFavorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CharacterFavorites.
     */
    distinct?: CharacterFavoriteScalarFieldEnum | CharacterFavoriteScalarFieldEnum[]
  }

  /**
   * CharacterFavorite findMany
   */
  export type CharacterFavoriteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterFavorite
     */
    select?: CharacterFavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterFavoriteInclude<ExtArgs> | null
    /**
     * Filter, which CharacterFavorites to fetch.
     */
    where?: CharacterFavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterFavorites to fetch.
     */
    orderBy?: CharacterFavoriteOrderByWithRelationInput | CharacterFavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CharacterFavorites.
     */
    cursor?: CharacterFavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterFavorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterFavorites.
     */
    skip?: number
    distinct?: CharacterFavoriteScalarFieldEnum | CharacterFavoriteScalarFieldEnum[]
  }

  /**
   * CharacterFavorite create
   */
  export type CharacterFavoriteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterFavorite
     */
    select?: CharacterFavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterFavoriteInclude<ExtArgs> | null
    /**
     * The data needed to create a CharacterFavorite.
     */
    data: XOR<CharacterFavoriteCreateInput, CharacterFavoriteUncheckedCreateInput>
  }

  /**
   * CharacterFavorite createMany
   */
  export type CharacterFavoriteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CharacterFavorites.
     */
    data: CharacterFavoriteCreateManyInput | CharacterFavoriteCreateManyInput[]
  }

  /**
   * CharacterFavorite createManyAndReturn
   */
  export type CharacterFavoriteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterFavorite
     */
    select?: CharacterFavoriteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CharacterFavorites.
     */
    data: CharacterFavoriteCreateManyInput | CharacterFavoriteCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterFavoriteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CharacterFavorite update
   */
  export type CharacterFavoriteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterFavorite
     */
    select?: CharacterFavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterFavoriteInclude<ExtArgs> | null
    /**
     * The data needed to update a CharacterFavorite.
     */
    data: XOR<CharacterFavoriteUpdateInput, CharacterFavoriteUncheckedUpdateInput>
    /**
     * Choose, which CharacterFavorite to update.
     */
    where: CharacterFavoriteWhereUniqueInput
  }

  /**
   * CharacterFavorite updateMany
   */
  export type CharacterFavoriteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CharacterFavorites.
     */
    data: XOR<CharacterFavoriteUpdateManyMutationInput, CharacterFavoriteUncheckedUpdateManyInput>
    /**
     * Filter which CharacterFavorites to update
     */
    where?: CharacterFavoriteWhereInput
  }

  /**
   * CharacterFavorite upsert
   */
  export type CharacterFavoriteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterFavorite
     */
    select?: CharacterFavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterFavoriteInclude<ExtArgs> | null
    /**
     * The filter to search for the CharacterFavorite to update in case it exists.
     */
    where: CharacterFavoriteWhereUniqueInput
    /**
     * In case the CharacterFavorite found by the `where` argument doesn't exist, create a new CharacterFavorite with this data.
     */
    create: XOR<CharacterFavoriteCreateInput, CharacterFavoriteUncheckedCreateInput>
    /**
     * In case the CharacterFavorite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CharacterFavoriteUpdateInput, CharacterFavoriteUncheckedUpdateInput>
  }

  /**
   * CharacterFavorite delete
   */
  export type CharacterFavoriteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterFavorite
     */
    select?: CharacterFavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterFavoriteInclude<ExtArgs> | null
    /**
     * Filter which CharacterFavorite to delete.
     */
    where: CharacterFavoriteWhereUniqueInput
  }

  /**
   * CharacterFavorite deleteMany
   */
  export type CharacterFavoriteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CharacterFavorites to delete
     */
    where?: CharacterFavoriteWhereInput
  }

  /**
   * CharacterFavorite without action
   */
  export type CharacterFavoriteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterFavorite
     */
    select?: CharacterFavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterFavoriteInclude<ExtArgs> | null
  }


  /**
   * Model CharacterRating
   */

  export type AggregateCharacterRating = {
    _count: CharacterRatingCountAggregateOutputType | null
    _avg: CharacterRatingAvgAggregateOutputType | null
    _sum: CharacterRatingSumAggregateOutputType | null
    _min: CharacterRatingMinAggregateOutputType | null
    _max: CharacterRatingMaxAggregateOutputType | null
  }

  export type CharacterRatingAvgAggregateOutputType = {
    rating: number | null
  }

  export type CharacterRatingSumAggregateOutputType = {
    rating: number | null
  }

  export type CharacterRatingMinAggregateOutputType = {
    id: string | null
    userId: string | null
    characterId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CharacterRatingMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    characterId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CharacterRatingCountAggregateOutputType = {
    id: number
    userId: number
    characterId: number
    rating: number
    comment: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CharacterRatingAvgAggregateInputType = {
    rating?: true
  }

  export type CharacterRatingSumAggregateInputType = {
    rating?: true
  }

  export type CharacterRatingMinAggregateInputType = {
    id?: true
    userId?: true
    characterId?: true
    rating?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CharacterRatingMaxAggregateInputType = {
    id?: true
    userId?: true
    characterId?: true
    rating?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CharacterRatingCountAggregateInputType = {
    id?: true
    userId?: true
    characterId?: true
    rating?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CharacterRatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CharacterRating to aggregate.
     */
    where?: CharacterRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterRatings to fetch.
     */
    orderBy?: CharacterRatingOrderByWithRelationInput | CharacterRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CharacterRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CharacterRatings
    **/
    _count?: true | CharacterRatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CharacterRatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CharacterRatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CharacterRatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CharacterRatingMaxAggregateInputType
  }

  export type GetCharacterRatingAggregateType<T extends CharacterRatingAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacterRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacterRating[P]>
      : GetScalarType<T[P], AggregateCharacterRating[P]>
  }




  export type CharacterRatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterRatingWhereInput
    orderBy?: CharacterRatingOrderByWithAggregationInput | CharacterRatingOrderByWithAggregationInput[]
    by: CharacterRatingScalarFieldEnum[] | CharacterRatingScalarFieldEnum
    having?: CharacterRatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CharacterRatingCountAggregateInputType | true
    _avg?: CharacterRatingAvgAggregateInputType
    _sum?: CharacterRatingSumAggregateInputType
    _min?: CharacterRatingMinAggregateInputType
    _max?: CharacterRatingMaxAggregateInputType
  }

  export type CharacterRatingGroupByOutputType = {
    id: string
    userId: string
    characterId: string
    rating: number
    comment: string | null
    createdAt: Date
    updatedAt: Date
    _count: CharacterRatingCountAggregateOutputType | null
    _avg: CharacterRatingAvgAggregateOutputType | null
    _sum: CharacterRatingSumAggregateOutputType | null
    _min: CharacterRatingMinAggregateOutputType | null
    _max: CharacterRatingMaxAggregateOutputType | null
  }

  type GetCharacterRatingGroupByPayload<T extends CharacterRatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CharacterRatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CharacterRatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CharacterRatingGroupByOutputType[P]>
            : GetScalarType<T[P], CharacterRatingGroupByOutputType[P]>
        }
      >
    >


  export type CharacterRatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    characterId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["characterRating"]>

  export type CharacterRatingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    characterId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["characterRating"]>

  export type CharacterRatingSelectScalar = {
    id?: boolean
    userId?: boolean
    characterId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CharacterRatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }
  export type CharacterRatingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }

  export type $CharacterRatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CharacterRating"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      character: Prisma.$CharacterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      characterId: string
      rating: number
      comment: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["characterRating"]>
    composites: {}
  }

  type CharacterRatingGetPayload<S extends boolean | null | undefined | CharacterRatingDefaultArgs> = $Result.GetResult<Prisma.$CharacterRatingPayload, S>

  type CharacterRatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CharacterRatingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CharacterRatingCountAggregateInputType | true
    }

  export interface CharacterRatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CharacterRating'], meta: { name: 'CharacterRating' } }
    /**
     * Find zero or one CharacterRating that matches the filter.
     * @param {CharacterRatingFindUniqueArgs} args - Arguments to find a CharacterRating
     * @example
     * // Get one CharacterRating
     * const characterRating = await prisma.characterRating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CharacterRatingFindUniqueArgs>(args: SelectSubset<T, CharacterRatingFindUniqueArgs<ExtArgs>>): Prisma__CharacterRatingClient<$Result.GetResult<Prisma.$CharacterRatingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CharacterRating that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CharacterRatingFindUniqueOrThrowArgs} args - Arguments to find a CharacterRating
     * @example
     * // Get one CharacterRating
     * const characterRating = await prisma.characterRating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CharacterRatingFindUniqueOrThrowArgs>(args: SelectSubset<T, CharacterRatingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CharacterRatingClient<$Result.GetResult<Prisma.$CharacterRatingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CharacterRating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterRatingFindFirstArgs} args - Arguments to find a CharacterRating
     * @example
     * // Get one CharacterRating
     * const characterRating = await prisma.characterRating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CharacterRatingFindFirstArgs>(args?: SelectSubset<T, CharacterRatingFindFirstArgs<ExtArgs>>): Prisma__CharacterRatingClient<$Result.GetResult<Prisma.$CharacterRatingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CharacterRating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterRatingFindFirstOrThrowArgs} args - Arguments to find a CharacterRating
     * @example
     * // Get one CharacterRating
     * const characterRating = await prisma.characterRating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CharacterRatingFindFirstOrThrowArgs>(args?: SelectSubset<T, CharacterRatingFindFirstOrThrowArgs<ExtArgs>>): Prisma__CharacterRatingClient<$Result.GetResult<Prisma.$CharacterRatingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CharacterRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterRatingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CharacterRatings
     * const characterRatings = await prisma.characterRating.findMany()
     * 
     * // Get first 10 CharacterRatings
     * const characterRatings = await prisma.characterRating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const characterRatingWithIdOnly = await prisma.characterRating.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CharacterRatingFindManyArgs>(args?: SelectSubset<T, CharacterRatingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterRatingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CharacterRating.
     * @param {CharacterRatingCreateArgs} args - Arguments to create a CharacterRating.
     * @example
     * // Create one CharacterRating
     * const CharacterRating = await prisma.characterRating.create({
     *   data: {
     *     // ... data to create a CharacterRating
     *   }
     * })
     * 
     */
    create<T extends CharacterRatingCreateArgs>(args: SelectSubset<T, CharacterRatingCreateArgs<ExtArgs>>): Prisma__CharacterRatingClient<$Result.GetResult<Prisma.$CharacterRatingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CharacterRatings.
     * @param {CharacterRatingCreateManyArgs} args - Arguments to create many CharacterRatings.
     * @example
     * // Create many CharacterRatings
     * const characterRating = await prisma.characterRating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CharacterRatingCreateManyArgs>(args?: SelectSubset<T, CharacterRatingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CharacterRatings and returns the data saved in the database.
     * @param {CharacterRatingCreateManyAndReturnArgs} args - Arguments to create many CharacterRatings.
     * @example
     * // Create many CharacterRatings
     * const characterRating = await prisma.characterRating.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CharacterRatings and only return the `id`
     * const characterRatingWithIdOnly = await prisma.characterRating.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CharacterRatingCreateManyAndReturnArgs>(args?: SelectSubset<T, CharacterRatingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterRatingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CharacterRating.
     * @param {CharacterRatingDeleteArgs} args - Arguments to delete one CharacterRating.
     * @example
     * // Delete one CharacterRating
     * const CharacterRating = await prisma.characterRating.delete({
     *   where: {
     *     // ... filter to delete one CharacterRating
     *   }
     * })
     * 
     */
    delete<T extends CharacterRatingDeleteArgs>(args: SelectSubset<T, CharacterRatingDeleteArgs<ExtArgs>>): Prisma__CharacterRatingClient<$Result.GetResult<Prisma.$CharacterRatingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CharacterRating.
     * @param {CharacterRatingUpdateArgs} args - Arguments to update one CharacterRating.
     * @example
     * // Update one CharacterRating
     * const characterRating = await prisma.characterRating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CharacterRatingUpdateArgs>(args: SelectSubset<T, CharacterRatingUpdateArgs<ExtArgs>>): Prisma__CharacterRatingClient<$Result.GetResult<Prisma.$CharacterRatingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CharacterRatings.
     * @param {CharacterRatingDeleteManyArgs} args - Arguments to filter CharacterRatings to delete.
     * @example
     * // Delete a few CharacterRatings
     * const { count } = await prisma.characterRating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CharacterRatingDeleteManyArgs>(args?: SelectSubset<T, CharacterRatingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CharacterRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterRatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CharacterRatings
     * const characterRating = await prisma.characterRating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CharacterRatingUpdateManyArgs>(args: SelectSubset<T, CharacterRatingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CharacterRating.
     * @param {CharacterRatingUpsertArgs} args - Arguments to update or create a CharacterRating.
     * @example
     * // Update or create a CharacterRating
     * const characterRating = await prisma.characterRating.upsert({
     *   create: {
     *     // ... data to create a CharacterRating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CharacterRating we want to update
     *   }
     * })
     */
    upsert<T extends CharacterRatingUpsertArgs>(args: SelectSubset<T, CharacterRatingUpsertArgs<ExtArgs>>): Prisma__CharacterRatingClient<$Result.GetResult<Prisma.$CharacterRatingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CharacterRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterRatingCountArgs} args - Arguments to filter CharacterRatings to count.
     * @example
     * // Count the number of CharacterRatings
     * const count = await prisma.characterRating.count({
     *   where: {
     *     // ... the filter for the CharacterRatings we want to count
     *   }
     * })
    **/
    count<T extends CharacterRatingCountArgs>(
      args?: Subset<T, CharacterRatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CharacterRatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CharacterRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterRatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CharacterRatingAggregateArgs>(args: Subset<T, CharacterRatingAggregateArgs>): Prisma.PrismaPromise<GetCharacterRatingAggregateType<T>>

    /**
     * Group by CharacterRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterRatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CharacterRatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CharacterRatingGroupByArgs['orderBy'] }
        : { orderBy?: CharacterRatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CharacterRatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacterRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CharacterRating model
   */
  readonly fields: CharacterRatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CharacterRating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CharacterRatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    character<T extends CharacterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CharacterDefaultArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CharacterRating model
   */ 
  interface CharacterRatingFieldRefs {
    readonly id: FieldRef<"CharacterRating", 'String'>
    readonly userId: FieldRef<"CharacterRating", 'String'>
    readonly characterId: FieldRef<"CharacterRating", 'String'>
    readonly rating: FieldRef<"CharacterRating", 'Float'>
    readonly comment: FieldRef<"CharacterRating", 'String'>
    readonly createdAt: FieldRef<"CharacterRating", 'DateTime'>
    readonly updatedAt: FieldRef<"CharacterRating", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CharacterRating findUnique
   */
  export type CharacterRatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterRating
     */
    select?: CharacterRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterRatingInclude<ExtArgs> | null
    /**
     * Filter, which CharacterRating to fetch.
     */
    where: CharacterRatingWhereUniqueInput
  }

  /**
   * CharacterRating findUniqueOrThrow
   */
  export type CharacterRatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterRating
     */
    select?: CharacterRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterRatingInclude<ExtArgs> | null
    /**
     * Filter, which CharacterRating to fetch.
     */
    where: CharacterRatingWhereUniqueInput
  }

  /**
   * CharacterRating findFirst
   */
  export type CharacterRatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterRating
     */
    select?: CharacterRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterRatingInclude<ExtArgs> | null
    /**
     * Filter, which CharacterRating to fetch.
     */
    where?: CharacterRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterRatings to fetch.
     */
    orderBy?: CharacterRatingOrderByWithRelationInput | CharacterRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CharacterRatings.
     */
    cursor?: CharacterRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CharacterRatings.
     */
    distinct?: CharacterRatingScalarFieldEnum | CharacterRatingScalarFieldEnum[]
  }

  /**
   * CharacterRating findFirstOrThrow
   */
  export type CharacterRatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterRating
     */
    select?: CharacterRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterRatingInclude<ExtArgs> | null
    /**
     * Filter, which CharacterRating to fetch.
     */
    where?: CharacterRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterRatings to fetch.
     */
    orderBy?: CharacterRatingOrderByWithRelationInput | CharacterRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CharacterRatings.
     */
    cursor?: CharacterRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CharacterRatings.
     */
    distinct?: CharacterRatingScalarFieldEnum | CharacterRatingScalarFieldEnum[]
  }

  /**
   * CharacterRating findMany
   */
  export type CharacterRatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterRating
     */
    select?: CharacterRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterRatingInclude<ExtArgs> | null
    /**
     * Filter, which CharacterRatings to fetch.
     */
    where?: CharacterRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterRatings to fetch.
     */
    orderBy?: CharacterRatingOrderByWithRelationInput | CharacterRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CharacterRatings.
     */
    cursor?: CharacterRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterRatings.
     */
    skip?: number
    distinct?: CharacterRatingScalarFieldEnum | CharacterRatingScalarFieldEnum[]
  }

  /**
   * CharacterRating create
   */
  export type CharacterRatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterRating
     */
    select?: CharacterRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterRatingInclude<ExtArgs> | null
    /**
     * The data needed to create a CharacterRating.
     */
    data: XOR<CharacterRatingCreateInput, CharacterRatingUncheckedCreateInput>
  }

  /**
   * CharacterRating createMany
   */
  export type CharacterRatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CharacterRatings.
     */
    data: CharacterRatingCreateManyInput | CharacterRatingCreateManyInput[]
  }

  /**
   * CharacterRating createManyAndReturn
   */
  export type CharacterRatingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterRating
     */
    select?: CharacterRatingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CharacterRatings.
     */
    data: CharacterRatingCreateManyInput | CharacterRatingCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterRatingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CharacterRating update
   */
  export type CharacterRatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterRating
     */
    select?: CharacterRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterRatingInclude<ExtArgs> | null
    /**
     * The data needed to update a CharacterRating.
     */
    data: XOR<CharacterRatingUpdateInput, CharacterRatingUncheckedUpdateInput>
    /**
     * Choose, which CharacterRating to update.
     */
    where: CharacterRatingWhereUniqueInput
  }

  /**
   * CharacterRating updateMany
   */
  export type CharacterRatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CharacterRatings.
     */
    data: XOR<CharacterRatingUpdateManyMutationInput, CharacterRatingUncheckedUpdateManyInput>
    /**
     * Filter which CharacterRatings to update
     */
    where?: CharacterRatingWhereInput
  }

  /**
   * CharacterRating upsert
   */
  export type CharacterRatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterRating
     */
    select?: CharacterRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterRatingInclude<ExtArgs> | null
    /**
     * The filter to search for the CharacterRating to update in case it exists.
     */
    where: CharacterRatingWhereUniqueInput
    /**
     * In case the CharacterRating found by the `where` argument doesn't exist, create a new CharacterRating with this data.
     */
    create: XOR<CharacterRatingCreateInput, CharacterRatingUncheckedCreateInput>
    /**
     * In case the CharacterRating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CharacterRatingUpdateInput, CharacterRatingUncheckedUpdateInput>
  }

  /**
   * CharacterRating delete
   */
  export type CharacterRatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterRating
     */
    select?: CharacterRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterRatingInclude<ExtArgs> | null
    /**
     * Filter which CharacterRating to delete.
     */
    where: CharacterRatingWhereUniqueInput
  }

  /**
   * CharacterRating deleteMany
   */
  export type CharacterRatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CharacterRatings to delete
     */
    where?: CharacterRatingWhereInput
  }

  /**
   * CharacterRating without action
   */
  export type CharacterRatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterRating
     */
    select?: CharacterRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterRatingInclude<ExtArgs> | null
  }


  /**
   * Model AdminLog
   */

  export type AggregateAdminLog = {
    _count: AdminLogCountAggregateOutputType | null
    _min: AdminLogMinAggregateOutputType | null
    _max: AdminLogMaxAggregateOutputType | null
  }

  export type AdminLogMinAggregateOutputType = {
    id: string | null
    adminId: string | null
    action: string | null
    targetType: string | null
    targetId: string | null
    details: string | null
    ip: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AdminLogMaxAggregateOutputType = {
    id: string | null
    adminId: string | null
    action: string | null
    targetType: string | null
    targetId: string | null
    details: string | null
    ip: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AdminLogCountAggregateOutputType = {
    id: number
    adminId: number
    action: number
    targetType: number
    targetId: number
    details: number
    ip: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type AdminLogMinAggregateInputType = {
    id?: true
    adminId?: true
    action?: true
    targetType?: true
    targetId?: true
    details?: true
    ip?: true
    userAgent?: true
    createdAt?: true
  }

  export type AdminLogMaxAggregateInputType = {
    id?: true
    adminId?: true
    action?: true
    targetType?: true
    targetId?: true
    details?: true
    ip?: true
    userAgent?: true
    createdAt?: true
  }

  export type AdminLogCountAggregateInputType = {
    id?: true
    adminId?: true
    action?: true
    targetType?: true
    targetId?: true
    details?: true
    ip?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type AdminLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminLog to aggregate.
     */
    where?: AdminLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminLogs to fetch.
     */
    orderBy?: AdminLogOrderByWithRelationInput | AdminLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminLogs
    **/
    _count?: true | AdminLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminLogMaxAggregateInputType
  }

  export type GetAdminLogAggregateType<T extends AdminLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminLog[P]>
      : GetScalarType<T[P], AggregateAdminLog[P]>
  }




  export type AdminLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminLogWhereInput
    orderBy?: AdminLogOrderByWithAggregationInput | AdminLogOrderByWithAggregationInput[]
    by: AdminLogScalarFieldEnum[] | AdminLogScalarFieldEnum
    having?: AdminLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminLogCountAggregateInputType | true
    _min?: AdminLogMinAggregateInputType
    _max?: AdminLogMaxAggregateInputType
  }

  export type AdminLogGroupByOutputType = {
    id: string
    adminId: string
    action: string
    targetType: string
    targetId: string | null
    details: string | null
    ip: string | null
    userAgent: string | null
    createdAt: Date
    _count: AdminLogCountAggregateOutputType | null
    _min: AdminLogMinAggregateOutputType | null
    _max: AdminLogMaxAggregateOutputType | null
  }

  type GetAdminLogGroupByPayload<T extends AdminLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminLogGroupByOutputType[P]>
            : GetScalarType<T[P], AdminLogGroupByOutputType[P]>
        }
      >
    >


  export type AdminLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    action?: boolean
    targetType?: boolean
    targetId?: boolean
    details?: boolean
    ip?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["adminLog"]>

  export type AdminLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    action?: boolean
    targetType?: boolean
    targetId?: boolean
    details?: boolean
    ip?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["adminLog"]>

  export type AdminLogSelectScalar = {
    id?: boolean
    adminId?: boolean
    action?: boolean
    targetType?: boolean
    targetId?: boolean
    details?: boolean
    ip?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }


  export type $AdminLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      adminId: string
      action: string
      targetType: string
      targetId: string | null
      details: string | null
      ip: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["adminLog"]>
    composites: {}
  }

  type AdminLogGetPayload<S extends boolean | null | undefined | AdminLogDefaultArgs> = $Result.GetResult<Prisma.$AdminLogPayload, S>

  type AdminLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminLogCountAggregateInputType | true
    }

  export interface AdminLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminLog'], meta: { name: 'AdminLog' } }
    /**
     * Find zero or one AdminLog that matches the filter.
     * @param {AdminLogFindUniqueArgs} args - Arguments to find a AdminLog
     * @example
     * // Get one AdminLog
     * const adminLog = await prisma.adminLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminLogFindUniqueArgs>(args: SelectSubset<T, AdminLogFindUniqueArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AdminLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdminLogFindUniqueOrThrowArgs} args - Arguments to find a AdminLog
     * @example
     * // Get one AdminLog
     * const adminLog = await prisma.adminLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AdminLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogFindFirstArgs} args - Arguments to find a AdminLog
     * @example
     * // Get one AdminLog
     * const adminLog = await prisma.adminLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminLogFindFirstArgs>(args?: SelectSubset<T, AdminLogFindFirstArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AdminLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogFindFirstOrThrowArgs} args - Arguments to find a AdminLog
     * @example
     * // Get one AdminLog
     * const adminLog = await prisma.adminLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AdminLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminLogs
     * const adminLogs = await prisma.adminLog.findMany()
     * 
     * // Get first 10 AdminLogs
     * const adminLogs = await prisma.adminLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminLogWithIdOnly = await prisma.adminLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminLogFindManyArgs>(args?: SelectSubset<T, AdminLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AdminLog.
     * @param {AdminLogCreateArgs} args - Arguments to create a AdminLog.
     * @example
     * // Create one AdminLog
     * const AdminLog = await prisma.adminLog.create({
     *   data: {
     *     // ... data to create a AdminLog
     *   }
     * })
     * 
     */
    create<T extends AdminLogCreateArgs>(args: SelectSubset<T, AdminLogCreateArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AdminLogs.
     * @param {AdminLogCreateManyArgs} args - Arguments to create many AdminLogs.
     * @example
     * // Create many AdminLogs
     * const adminLog = await prisma.adminLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminLogCreateManyArgs>(args?: SelectSubset<T, AdminLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminLogs and returns the data saved in the database.
     * @param {AdminLogCreateManyAndReturnArgs} args - Arguments to create many AdminLogs.
     * @example
     * // Create many AdminLogs
     * const adminLog = await prisma.adminLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminLogs and only return the `id`
     * const adminLogWithIdOnly = await prisma.adminLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AdminLog.
     * @param {AdminLogDeleteArgs} args - Arguments to delete one AdminLog.
     * @example
     * // Delete one AdminLog
     * const AdminLog = await prisma.adminLog.delete({
     *   where: {
     *     // ... filter to delete one AdminLog
     *   }
     * })
     * 
     */
    delete<T extends AdminLogDeleteArgs>(args: SelectSubset<T, AdminLogDeleteArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AdminLog.
     * @param {AdminLogUpdateArgs} args - Arguments to update one AdminLog.
     * @example
     * // Update one AdminLog
     * const adminLog = await prisma.adminLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminLogUpdateArgs>(args: SelectSubset<T, AdminLogUpdateArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AdminLogs.
     * @param {AdminLogDeleteManyArgs} args - Arguments to filter AdminLogs to delete.
     * @example
     * // Delete a few AdminLogs
     * const { count } = await prisma.adminLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminLogDeleteManyArgs>(args?: SelectSubset<T, AdminLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminLogs
     * const adminLog = await prisma.adminLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminLogUpdateManyArgs>(args: SelectSubset<T, AdminLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AdminLog.
     * @param {AdminLogUpsertArgs} args - Arguments to update or create a AdminLog.
     * @example
     * // Update or create a AdminLog
     * const adminLog = await prisma.adminLog.upsert({
     *   create: {
     *     // ... data to create a AdminLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminLog we want to update
     *   }
     * })
     */
    upsert<T extends AdminLogUpsertArgs>(args: SelectSubset<T, AdminLogUpsertArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AdminLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogCountArgs} args - Arguments to filter AdminLogs to count.
     * @example
     * // Count the number of AdminLogs
     * const count = await prisma.adminLog.count({
     *   where: {
     *     // ... the filter for the AdminLogs we want to count
     *   }
     * })
    **/
    count<T extends AdminLogCountArgs>(
      args?: Subset<T, AdminLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminLogAggregateArgs>(args: Subset<T, AdminLogAggregateArgs>): Prisma.PrismaPromise<GetAdminLogAggregateType<T>>

    /**
     * Group by AdminLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminLogGroupByArgs['orderBy'] }
        : { orderBy?: AdminLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminLog model
   */
  readonly fields: AdminLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminLog model
   */ 
  interface AdminLogFieldRefs {
    readonly id: FieldRef<"AdminLog", 'String'>
    readonly adminId: FieldRef<"AdminLog", 'String'>
    readonly action: FieldRef<"AdminLog", 'String'>
    readonly targetType: FieldRef<"AdminLog", 'String'>
    readonly targetId: FieldRef<"AdminLog", 'String'>
    readonly details: FieldRef<"AdminLog", 'String'>
    readonly ip: FieldRef<"AdminLog", 'String'>
    readonly userAgent: FieldRef<"AdminLog", 'String'>
    readonly createdAt: FieldRef<"AdminLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AdminLog findUnique
   */
  export type AdminLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Filter, which AdminLog to fetch.
     */
    where: AdminLogWhereUniqueInput
  }

  /**
   * AdminLog findUniqueOrThrow
   */
  export type AdminLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Filter, which AdminLog to fetch.
     */
    where: AdminLogWhereUniqueInput
  }

  /**
   * AdminLog findFirst
   */
  export type AdminLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Filter, which AdminLog to fetch.
     */
    where?: AdminLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminLogs to fetch.
     */
    orderBy?: AdminLogOrderByWithRelationInput | AdminLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminLogs.
     */
    cursor?: AdminLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminLogs.
     */
    distinct?: AdminLogScalarFieldEnum | AdminLogScalarFieldEnum[]
  }

  /**
   * AdminLog findFirstOrThrow
   */
  export type AdminLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Filter, which AdminLog to fetch.
     */
    where?: AdminLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminLogs to fetch.
     */
    orderBy?: AdminLogOrderByWithRelationInput | AdminLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminLogs.
     */
    cursor?: AdminLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminLogs.
     */
    distinct?: AdminLogScalarFieldEnum | AdminLogScalarFieldEnum[]
  }

  /**
   * AdminLog findMany
   */
  export type AdminLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Filter, which AdminLogs to fetch.
     */
    where?: AdminLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminLogs to fetch.
     */
    orderBy?: AdminLogOrderByWithRelationInput | AdminLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminLogs.
     */
    cursor?: AdminLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminLogs.
     */
    skip?: number
    distinct?: AdminLogScalarFieldEnum | AdminLogScalarFieldEnum[]
  }

  /**
   * AdminLog create
   */
  export type AdminLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * The data needed to create a AdminLog.
     */
    data: XOR<AdminLogCreateInput, AdminLogUncheckedCreateInput>
  }

  /**
   * AdminLog createMany
   */
  export type AdminLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminLogs.
     */
    data: AdminLogCreateManyInput | AdminLogCreateManyInput[]
  }

  /**
   * AdminLog createManyAndReturn
   */
  export type AdminLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AdminLogs.
     */
    data: AdminLogCreateManyInput | AdminLogCreateManyInput[]
  }

  /**
   * AdminLog update
   */
  export type AdminLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * The data needed to update a AdminLog.
     */
    data: XOR<AdminLogUpdateInput, AdminLogUncheckedUpdateInput>
    /**
     * Choose, which AdminLog to update.
     */
    where: AdminLogWhereUniqueInput
  }

  /**
   * AdminLog updateMany
   */
  export type AdminLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminLogs.
     */
    data: XOR<AdminLogUpdateManyMutationInput, AdminLogUncheckedUpdateManyInput>
    /**
     * Filter which AdminLogs to update
     */
    where?: AdminLogWhereInput
  }

  /**
   * AdminLog upsert
   */
  export type AdminLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * The filter to search for the AdminLog to update in case it exists.
     */
    where: AdminLogWhereUniqueInput
    /**
     * In case the AdminLog found by the `where` argument doesn't exist, create a new AdminLog with this data.
     */
    create: XOR<AdminLogCreateInput, AdminLogUncheckedCreateInput>
    /**
     * In case the AdminLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminLogUpdateInput, AdminLogUncheckedUpdateInput>
  }

  /**
   * AdminLog delete
   */
  export type AdminLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Filter which AdminLog to delete.
     */
    where: AdminLogWhereUniqueInput
  }

  /**
   * AdminLog deleteMany
   */
  export type AdminLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminLogs to delete
     */
    where?: AdminLogWhereInput
  }

  /**
   * AdminLog without action
   */
  export type AdminLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
  }


  /**
   * Model UsageLog
   */

  export type AggregateUsageLog = {
    _count: UsageLogCountAggregateOutputType | null
    _avg: UsageLogAvgAggregateOutputType | null
    _sum: UsageLogSumAggregateOutputType | null
    _min: UsageLogMinAggregateOutputType | null
    _max: UsageLogMaxAggregateOutputType | null
  }

  export type UsageLogAvgAggregateOutputType = {
    statusCode: number | null
    responseTime: number | null
  }

  export type UsageLogSumAggregateOutputType = {
    statusCode: number | null
    responseTime: number | null
  }

  export type UsageLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    endpoint: string | null
    method: string | null
    statusCode: number | null
    responseTime: number | null
    ip: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type UsageLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    endpoint: string | null
    method: string | null
    statusCode: number | null
    responseTime: number | null
    ip: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type UsageLogCountAggregateOutputType = {
    id: number
    userId: number
    endpoint: number
    method: number
    statusCode: number
    responseTime: number
    ip: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type UsageLogAvgAggregateInputType = {
    statusCode?: true
    responseTime?: true
  }

  export type UsageLogSumAggregateInputType = {
    statusCode?: true
    responseTime?: true
  }

  export type UsageLogMinAggregateInputType = {
    id?: true
    userId?: true
    endpoint?: true
    method?: true
    statusCode?: true
    responseTime?: true
    ip?: true
    userAgent?: true
    createdAt?: true
  }

  export type UsageLogMaxAggregateInputType = {
    id?: true
    userId?: true
    endpoint?: true
    method?: true
    statusCode?: true
    responseTime?: true
    ip?: true
    userAgent?: true
    createdAt?: true
  }

  export type UsageLogCountAggregateInputType = {
    id?: true
    userId?: true
    endpoint?: true
    method?: true
    statusCode?: true
    responseTime?: true
    ip?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type UsageLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsageLog to aggregate.
     */
    where?: UsageLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageLogs to fetch.
     */
    orderBy?: UsageLogOrderByWithRelationInput | UsageLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsageLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsageLogs
    **/
    _count?: true | UsageLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsageLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsageLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsageLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsageLogMaxAggregateInputType
  }

  export type GetUsageLogAggregateType<T extends UsageLogAggregateArgs> = {
        [P in keyof T & keyof AggregateUsageLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsageLog[P]>
      : GetScalarType<T[P], AggregateUsageLog[P]>
  }




  export type UsageLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsageLogWhereInput
    orderBy?: UsageLogOrderByWithAggregationInput | UsageLogOrderByWithAggregationInput[]
    by: UsageLogScalarFieldEnum[] | UsageLogScalarFieldEnum
    having?: UsageLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsageLogCountAggregateInputType | true
    _avg?: UsageLogAvgAggregateInputType
    _sum?: UsageLogSumAggregateInputType
    _min?: UsageLogMinAggregateInputType
    _max?: UsageLogMaxAggregateInputType
  }

  export type UsageLogGroupByOutputType = {
    id: string
    userId: string | null
    endpoint: string
    method: string
    statusCode: number
    responseTime: number
    ip: string | null
    userAgent: string | null
    createdAt: Date
    _count: UsageLogCountAggregateOutputType | null
    _avg: UsageLogAvgAggregateOutputType | null
    _sum: UsageLogSumAggregateOutputType | null
    _min: UsageLogMinAggregateOutputType | null
    _max: UsageLogMaxAggregateOutputType | null
  }

  type GetUsageLogGroupByPayload<T extends UsageLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsageLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsageLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsageLogGroupByOutputType[P]>
            : GetScalarType<T[P], UsageLogGroupByOutputType[P]>
        }
      >
    >


  export type UsageLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    responseTime?: boolean
    ip?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["usageLog"]>

  export type UsageLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    responseTime?: boolean
    ip?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["usageLog"]>

  export type UsageLogSelectScalar = {
    id?: boolean
    userId?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    responseTime?: boolean
    ip?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }


  export type $UsageLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UsageLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      endpoint: string
      method: string
      statusCode: number
      responseTime: number
      ip: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["usageLog"]>
    composites: {}
  }

  type UsageLogGetPayload<S extends boolean | null | undefined | UsageLogDefaultArgs> = $Result.GetResult<Prisma.$UsageLogPayload, S>

  type UsageLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsageLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsageLogCountAggregateInputType | true
    }

  export interface UsageLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsageLog'], meta: { name: 'UsageLog' } }
    /**
     * Find zero or one UsageLog that matches the filter.
     * @param {UsageLogFindUniqueArgs} args - Arguments to find a UsageLog
     * @example
     * // Get one UsageLog
     * const usageLog = await prisma.usageLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsageLogFindUniqueArgs>(args: SelectSubset<T, UsageLogFindUniqueArgs<ExtArgs>>): Prisma__UsageLogClient<$Result.GetResult<Prisma.$UsageLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UsageLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsageLogFindUniqueOrThrowArgs} args - Arguments to find a UsageLog
     * @example
     * // Get one UsageLog
     * const usageLog = await prisma.usageLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsageLogFindUniqueOrThrowArgs>(args: SelectSubset<T, UsageLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsageLogClient<$Result.GetResult<Prisma.$UsageLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UsageLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageLogFindFirstArgs} args - Arguments to find a UsageLog
     * @example
     * // Get one UsageLog
     * const usageLog = await prisma.usageLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsageLogFindFirstArgs>(args?: SelectSubset<T, UsageLogFindFirstArgs<ExtArgs>>): Prisma__UsageLogClient<$Result.GetResult<Prisma.$UsageLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UsageLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageLogFindFirstOrThrowArgs} args - Arguments to find a UsageLog
     * @example
     * // Get one UsageLog
     * const usageLog = await prisma.usageLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsageLogFindFirstOrThrowArgs>(args?: SelectSubset<T, UsageLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsageLogClient<$Result.GetResult<Prisma.$UsageLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UsageLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsageLogs
     * const usageLogs = await prisma.usageLog.findMany()
     * 
     * // Get first 10 UsageLogs
     * const usageLogs = await prisma.usageLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usageLogWithIdOnly = await prisma.usageLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsageLogFindManyArgs>(args?: SelectSubset<T, UsageLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UsageLog.
     * @param {UsageLogCreateArgs} args - Arguments to create a UsageLog.
     * @example
     * // Create one UsageLog
     * const UsageLog = await prisma.usageLog.create({
     *   data: {
     *     // ... data to create a UsageLog
     *   }
     * })
     * 
     */
    create<T extends UsageLogCreateArgs>(args: SelectSubset<T, UsageLogCreateArgs<ExtArgs>>): Prisma__UsageLogClient<$Result.GetResult<Prisma.$UsageLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UsageLogs.
     * @param {UsageLogCreateManyArgs} args - Arguments to create many UsageLogs.
     * @example
     * // Create many UsageLogs
     * const usageLog = await prisma.usageLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsageLogCreateManyArgs>(args?: SelectSubset<T, UsageLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UsageLogs and returns the data saved in the database.
     * @param {UsageLogCreateManyAndReturnArgs} args - Arguments to create many UsageLogs.
     * @example
     * // Create many UsageLogs
     * const usageLog = await prisma.usageLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UsageLogs and only return the `id`
     * const usageLogWithIdOnly = await prisma.usageLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsageLogCreateManyAndReturnArgs>(args?: SelectSubset<T, UsageLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UsageLog.
     * @param {UsageLogDeleteArgs} args - Arguments to delete one UsageLog.
     * @example
     * // Delete one UsageLog
     * const UsageLog = await prisma.usageLog.delete({
     *   where: {
     *     // ... filter to delete one UsageLog
     *   }
     * })
     * 
     */
    delete<T extends UsageLogDeleteArgs>(args: SelectSubset<T, UsageLogDeleteArgs<ExtArgs>>): Prisma__UsageLogClient<$Result.GetResult<Prisma.$UsageLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UsageLog.
     * @param {UsageLogUpdateArgs} args - Arguments to update one UsageLog.
     * @example
     * // Update one UsageLog
     * const usageLog = await prisma.usageLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsageLogUpdateArgs>(args: SelectSubset<T, UsageLogUpdateArgs<ExtArgs>>): Prisma__UsageLogClient<$Result.GetResult<Prisma.$UsageLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UsageLogs.
     * @param {UsageLogDeleteManyArgs} args - Arguments to filter UsageLogs to delete.
     * @example
     * // Delete a few UsageLogs
     * const { count } = await prisma.usageLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsageLogDeleteManyArgs>(args?: SelectSubset<T, UsageLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsageLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsageLogs
     * const usageLog = await prisma.usageLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsageLogUpdateManyArgs>(args: SelectSubset<T, UsageLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UsageLog.
     * @param {UsageLogUpsertArgs} args - Arguments to update or create a UsageLog.
     * @example
     * // Update or create a UsageLog
     * const usageLog = await prisma.usageLog.upsert({
     *   create: {
     *     // ... data to create a UsageLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsageLog we want to update
     *   }
     * })
     */
    upsert<T extends UsageLogUpsertArgs>(args: SelectSubset<T, UsageLogUpsertArgs<ExtArgs>>): Prisma__UsageLogClient<$Result.GetResult<Prisma.$UsageLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UsageLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageLogCountArgs} args - Arguments to filter UsageLogs to count.
     * @example
     * // Count the number of UsageLogs
     * const count = await prisma.usageLog.count({
     *   where: {
     *     // ... the filter for the UsageLogs we want to count
     *   }
     * })
    **/
    count<T extends UsageLogCountArgs>(
      args?: Subset<T, UsageLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsageLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsageLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsageLogAggregateArgs>(args: Subset<T, UsageLogAggregateArgs>): Prisma.PrismaPromise<GetUsageLogAggregateType<T>>

    /**
     * Group by UsageLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsageLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsageLogGroupByArgs['orderBy'] }
        : { orderBy?: UsageLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsageLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsageLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsageLog model
   */
  readonly fields: UsageLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsageLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsageLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UsageLog model
   */ 
  interface UsageLogFieldRefs {
    readonly id: FieldRef<"UsageLog", 'String'>
    readonly userId: FieldRef<"UsageLog", 'String'>
    readonly endpoint: FieldRef<"UsageLog", 'String'>
    readonly method: FieldRef<"UsageLog", 'String'>
    readonly statusCode: FieldRef<"UsageLog", 'Int'>
    readonly responseTime: FieldRef<"UsageLog", 'Int'>
    readonly ip: FieldRef<"UsageLog", 'String'>
    readonly userAgent: FieldRef<"UsageLog", 'String'>
    readonly createdAt: FieldRef<"UsageLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UsageLog findUnique
   */
  export type UsageLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageLog
     */
    select?: UsageLogSelect<ExtArgs> | null
    /**
     * Filter, which UsageLog to fetch.
     */
    where: UsageLogWhereUniqueInput
  }

  /**
   * UsageLog findUniqueOrThrow
   */
  export type UsageLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageLog
     */
    select?: UsageLogSelect<ExtArgs> | null
    /**
     * Filter, which UsageLog to fetch.
     */
    where: UsageLogWhereUniqueInput
  }

  /**
   * UsageLog findFirst
   */
  export type UsageLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageLog
     */
    select?: UsageLogSelect<ExtArgs> | null
    /**
     * Filter, which UsageLog to fetch.
     */
    where?: UsageLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageLogs to fetch.
     */
    orderBy?: UsageLogOrderByWithRelationInput | UsageLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsageLogs.
     */
    cursor?: UsageLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsageLogs.
     */
    distinct?: UsageLogScalarFieldEnum | UsageLogScalarFieldEnum[]
  }

  /**
   * UsageLog findFirstOrThrow
   */
  export type UsageLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageLog
     */
    select?: UsageLogSelect<ExtArgs> | null
    /**
     * Filter, which UsageLog to fetch.
     */
    where?: UsageLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageLogs to fetch.
     */
    orderBy?: UsageLogOrderByWithRelationInput | UsageLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsageLogs.
     */
    cursor?: UsageLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsageLogs.
     */
    distinct?: UsageLogScalarFieldEnum | UsageLogScalarFieldEnum[]
  }

  /**
   * UsageLog findMany
   */
  export type UsageLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageLog
     */
    select?: UsageLogSelect<ExtArgs> | null
    /**
     * Filter, which UsageLogs to fetch.
     */
    where?: UsageLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageLogs to fetch.
     */
    orderBy?: UsageLogOrderByWithRelationInput | UsageLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsageLogs.
     */
    cursor?: UsageLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageLogs.
     */
    skip?: number
    distinct?: UsageLogScalarFieldEnum | UsageLogScalarFieldEnum[]
  }

  /**
   * UsageLog create
   */
  export type UsageLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageLog
     */
    select?: UsageLogSelect<ExtArgs> | null
    /**
     * The data needed to create a UsageLog.
     */
    data: XOR<UsageLogCreateInput, UsageLogUncheckedCreateInput>
  }

  /**
   * UsageLog createMany
   */
  export type UsageLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsageLogs.
     */
    data: UsageLogCreateManyInput | UsageLogCreateManyInput[]
  }

  /**
   * UsageLog createManyAndReturn
   */
  export type UsageLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageLog
     */
    select?: UsageLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UsageLogs.
     */
    data: UsageLogCreateManyInput | UsageLogCreateManyInput[]
  }

  /**
   * UsageLog update
   */
  export type UsageLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageLog
     */
    select?: UsageLogSelect<ExtArgs> | null
    /**
     * The data needed to update a UsageLog.
     */
    data: XOR<UsageLogUpdateInput, UsageLogUncheckedUpdateInput>
    /**
     * Choose, which UsageLog to update.
     */
    where: UsageLogWhereUniqueInput
  }

  /**
   * UsageLog updateMany
   */
  export type UsageLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsageLogs.
     */
    data: XOR<UsageLogUpdateManyMutationInput, UsageLogUncheckedUpdateManyInput>
    /**
     * Filter which UsageLogs to update
     */
    where?: UsageLogWhereInput
  }

  /**
   * UsageLog upsert
   */
  export type UsageLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageLog
     */
    select?: UsageLogSelect<ExtArgs> | null
    /**
     * The filter to search for the UsageLog to update in case it exists.
     */
    where: UsageLogWhereUniqueInput
    /**
     * In case the UsageLog found by the `where` argument doesn't exist, create a new UsageLog with this data.
     */
    create: XOR<UsageLogCreateInput, UsageLogUncheckedCreateInput>
    /**
     * In case the UsageLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsageLogUpdateInput, UsageLogUncheckedUpdateInput>
  }

  /**
   * UsageLog delete
   */
  export type UsageLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageLog
     */
    select?: UsageLogSelect<ExtArgs> | null
    /**
     * Filter which UsageLog to delete.
     */
    where: UsageLogWhereUniqueInput
  }

  /**
   * UsageLog deleteMany
   */
  export type UsageLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsageLogs to delete
     */
    where?: UsageLogWhereInput
  }

  /**
   * UsageLog without action
   */
  export type UsageLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageLog
     */
    select?: UsageLogSelect<ExtArgs> | null
  }


  /**
   * Model Alert
   */

  export type AggregateAlert = {
    _count: AlertCountAggregateOutputType | null
    _min: AlertMinAggregateOutputType | null
    _max: AlertMaxAggregateOutputType | null
  }

  export type AlertMinAggregateOutputType = {
    id: string | null
    type: string | null
    severity: string | null
    title: string | null
    message: string | null
    source: string | null
    metadata: string | null
    isRead: boolean | null
    isResolved: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlertMaxAggregateOutputType = {
    id: string | null
    type: string | null
    severity: string | null
    title: string | null
    message: string | null
    source: string | null
    metadata: string | null
    isRead: boolean | null
    isResolved: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlertCountAggregateOutputType = {
    id: number
    type: number
    severity: number
    title: number
    message: number
    source: number
    metadata: number
    isRead: number
    isResolved: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AlertMinAggregateInputType = {
    id?: true
    type?: true
    severity?: true
    title?: true
    message?: true
    source?: true
    metadata?: true
    isRead?: true
    isResolved?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlertMaxAggregateInputType = {
    id?: true
    type?: true
    severity?: true
    title?: true
    message?: true
    source?: true
    metadata?: true
    isRead?: true
    isResolved?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlertCountAggregateInputType = {
    id?: true
    type?: true
    severity?: true
    title?: true
    message?: true
    source?: true
    metadata?: true
    isRead?: true
    isResolved?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AlertAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alert to aggregate.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alerts
    **/
    _count?: true | AlertCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlertMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlertMaxAggregateInputType
  }

  export type GetAlertAggregateType<T extends AlertAggregateArgs> = {
        [P in keyof T & keyof AggregateAlert]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlert[P]>
      : GetScalarType<T[P], AggregateAlert[P]>
  }




  export type AlertGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertWhereInput
    orderBy?: AlertOrderByWithAggregationInput | AlertOrderByWithAggregationInput[]
    by: AlertScalarFieldEnum[] | AlertScalarFieldEnum
    having?: AlertScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlertCountAggregateInputType | true
    _min?: AlertMinAggregateInputType
    _max?: AlertMaxAggregateInputType
  }

  export type AlertGroupByOutputType = {
    id: string
    type: string
    severity: string
    title: string
    message: string
    source: string | null
    metadata: string | null
    isRead: boolean
    isResolved: boolean
    createdAt: Date
    updatedAt: Date
    _count: AlertCountAggregateOutputType | null
    _min: AlertMinAggregateOutputType | null
    _max: AlertMaxAggregateOutputType | null
  }

  type GetAlertGroupByPayload<T extends AlertGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlertGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlertGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlertGroupByOutputType[P]>
            : GetScalarType<T[P], AlertGroupByOutputType[P]>
        }
      >
    >


  export type AlertSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    severity?: boolean
    title?: boolean
    message?: boolean
    source?: boolean
    metadata?: boolean
    isRead?: boolean
    isResolved?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["alert"]>

  export type AlertSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    severity?: boolean
    title?: boolean
    message?: boolean
    source?: boolean
    metadata?: boolean
    isRead?: boolean
    isResolved?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["alert"]>

  export type AlertSelectScalar = {
    id?: boolean
    type?: boolean
    severity?: boolean
    title?: boolean
    message?: boolean
    source?: boolean
    metadata?: boolean
    isRead?: boolean
    isResolved?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $AlertPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alert"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      severity: string
      title: string
      message: string
      source: string | null
      metadata: string | null
      isRead: boolean
      isResolved: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["alert"]>
    composites: {}
  }

  type AlertGetPayload<S extends boolean | null | undefined | AlertDefaultArgs> = $Result.GetResult<Prisma.$AlertPayload, S>

  type AlertCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlertFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlertCountAggregateInputType | true
    }

  export interface AlertDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alert'], meta: { name: 'Alert' } }
    /**
     * Find zero or one Alert that matches the filter.
     * @param {AlertFindUniqueArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlertFindUniqueArgs>(args: SelectSubset<T, AlertFindUniqueArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Alert that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AlertFindUniqueOrThrowArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlertFindUniqueOrThrowArgs>(args: SelectSubset<T, AlertFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Alert that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindFirstArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlertFindFirstArgs>(args?: SelectSubset<T, AlertFindFirstArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Alert that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindFirstOrThrowArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlertFindFirstOrThrowArgs>(args?: SelectSubset<T, AlertFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Alerts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alerts
     * const alerts = await prisma.alert.findMany()
     * 
     * // Get first 10 Alerts
     * const alerts = await prisma.alert.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alertWithIdOnly = await prisma.alert.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlertFindManyArgs>(args?: SelectSubset<T, AlertFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Alert.
     * @param {AlertCreateArgs} args - Arguments to create a Alert.
     * @example
     * // Create one Alert
     * const Alert = await prisma.alert.create({
     *   data: {
     *     // ... data to create a Alert
     *   }
     * })
     * 
     */
    create<T extends AlertCreateArgs>(args: SelectSubset<T, AlertCreateArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Alerts.
     * @param {AlertCreateManyArgs} args - Arguments to create many Alerts.
     * @example
     * // Create many Alerts
     * const alert = await prisma.alert.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlertCreateManyArgs>(args?: SelectSubset<T, AlertCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Alerts and returns the data saved in the database.
     * @param {AlertCreateManyAndReturnArgs} args - Arguments to create many Alerts.
     * @example
     * // Create many Alerts
     * const alert = await prisma.alert.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Alerts and only return the `id`
     * const alertWithIdOnly = await prisma.alert.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlertCreateManyAndReturnArgs>(args?: SelectSubset<T, AlertCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Alert.
     * @param {AlertDeleteArgs} args - Arguments to delete one Alert.
     * @example
     * // Delete one Alert
     * const Alert = await prisma.alert.delete({
     *   where: {
     *     // ... filter to delete one Alert
     *   }
     * })
     * 
     */
    delete<T extends AlertDeleteArgs>(args: SelectSubset<T, AlertDeleteArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Alert.
     * @param {AlertUpdateArgs} args - Arguments to update one Alert.
     * @example
     * // Update one Alert
     * const alert = await prisma.alert.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlertUpdateArgs>(args: SelectSubset<T, AlertUpdateArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Alerts.
     * @param {AlertDeleteManyArgs} args - Arguments to filter Alerts to delete.
     * @example
     * // Delete a few Alerts
     * const { count } = await prisma.alert.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlertDeleteManyArgs>(args?: SelectSubset<T, AlertDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alerts
     * const alert = await prisma.alert.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlertUpdateManyArgs>(args: SelectSubset<T, AlertUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alert.
     * @param {AlertUpsertArgs} args - Arguments to update or create a Alert.
     * @example
     * // Update or create a Alert
     * const alert = await prisma.alert.upsert({
     *   create: {
     *     // ... data to create a Alert
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alert we want to update
     *   }
     * })
     */
    upsert<T extends AlertUpsertArgs>(args: SelectSubset<T, AlertUpsertArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertCountArgs} args - Arguments to filter Alerts to count.
     * @example
     * // Count the number of Alerts
     * const count = await prisma.alert.count({
     *   where: {
     *     // ... the filter for the Alerts we want to count
     *   }
     * })
    **/
    count<T extends AlertCountArgs>(
      args?: Subset<T, AlertCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlertCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlertAggregateArgs>(args: Subset<T, AlertAggregateArgs>): Prisma.PrismaPromise<GetAlertAggregateType<T>>

    /**
     * Group by Alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlertGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlertGroupByArgs['orderBy'] }
        : { orderBy?: AlertGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlertGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlertGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alert model
   */
  readonly fields: AlertFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alert.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlertClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alert model
   */ 
  interface AlertFieldRefs {
    readonly id: FieldRef<"Alert", 'String'>
    readonly type: FieldRef<"Alert", 'String'>
    readonly severity: FieldRef<"Alert", 'String'>
    readonly title: FieldRef<"Alert", 'String'>
    readonly message: FieldRef<"Alert", 'String'>
    readonly source: FieldRef<"Alert", 'String'>
    readonly metadata: FieldRef<"Alert", 'String'>
    readonly isRead: FieldRef<"Alert", 'Boolean'>
    readonly isResolved: FieldRef<"Alert", 'Boolean'>
    readonly createdAt: FieldRef<"Alert", 'DateTime'>
    readonly updatedAt: FieldRef<"Alert", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Alert findUnique
   */
  export type AlertFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert findUniqueOrThrow
   */
  export type AlertFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert findFirst
   */
  export type AlertFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alerts.
     */
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert findFirstOrThrow
   */
  export type AlertFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alerts.
     */
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert findMany
   */
  export type AlertFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Filter, which Alerts to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert create
   */
  export type AlertCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * The data needed to create a Alert.
     */
    data: XOR<AlertCreateInput, AlertUncheckedCreateInput>
  }

  /**
   * Alert createMany
   */
  export type AlertCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alerts.
     */
    data: AlertCreateManyInput | AlertCreateManyInput[]
  }

  /**
   * Alert createManyAndReturn
   */
  export type AlertCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Alerts.
     */
    data: AlertCreateManyInput | AlertCreateManyInput[]
  }

  /**
   * Alert update
   */
  export type AlertUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * The data needed to update a Alert.
     */
    data: XOR<AlertUpdateInput, AlertUncheckedUpdateInput>
    /**
     * Choose, which Alert to update.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert updateMany
   */
  export type AlertUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alerts.
     */
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyInput>
    /**
     * Filter which Alerts to update
     */
    where?: AlertWhereInput
  }

  /**
   * Alert upsert
   */
  export type AlertUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * The filter to search for the Alert to update in case it exists.
     */
    where: AlertWhereUniqueInput
    /**
     * In case the Alert found by the `where` argument doesn't exist, create a new Alert with this data.
     */
    create: XOR<AlertCreateInput, AlertUncheckedCreateInput>
    /**
     * In case the Alert was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlertUpdateInput, AlertUncheckedUpdateInput>
  }

  /**
   * Alert delete
   */
  export type AlertDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Filter which Alert to delete.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert deleteMany
   */
  export type AlertDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alerts to delete
     */
    where?: AlertWhereInput
  }

  /**
   * Alert without action
   */
  export type AlertDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
  }


  /**
   * Model Channel
   */

  export type AggregateChannel = {
    _count: ChannelCountAggregateOutputType | null
    _avg: ChannelAvgAggregateOutputType | null
    _sum: ChannelSumAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  export type ChannelAvgAggregateOutputType = {
    priority: number | null
    weight: number | null
    maxTokens: number | null
    rpmLimit: number | null
    tpmLimit: number | null
    usageCount: number | null
    errorCount: number | null
  }

  export type ChannelSumAggregateOutputType = {
    priority: number | null
    weight: number | null
    maxTokens: number | null
    rpmLimit: number | null
    tpmLimit: number | null
    usageCount: number | null
    errorCount: number | null
  }

  export type ChannelMinAggregateOutputType = {
    id: string | null
    name: string | null
    provider: string | null
    apiKey: string | null
    baseUrl: string | null
    models: string | null
    isActive: boolean | null
    priority: number | null
    weight: number | null
    maxTokens: number | null
    rpmLimit: number | null
    tpmLimit: number | null
    usageCount: number | null
    errorCount: number | null
    lastUsedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChannelMaxAggregateOutputType = {
    id: string | null
    name: string | null
    provider: string | null
    apiKey: string | null
    baseUrl: string | null
    models: string | null
    isActive: boolean | null
    priority: number | null
    weight: number | null
    maxTokens: number | null
    rpmLimit: number | null
    tpmLimit: number | null
    usageCount: number | null
    errorCount: number | null
    lastUsedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChannelCountAggregateOutputType = {
    id: number
    name: number
    provider: number
    apiKey: number
    baseUrl: number
    models: number
    isActive: number
    priority: number
    weight: number
    maxTokens: number
    rpmLimit: number
    tpmLimit: number
    usageCount: number
    errorCount: number
    lastUsedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChannelAvgAggregateInputType = {
    priority?: true
    weight?: true
    maxTokens?: true
    rpmLimit?: true
    tpmLimit?: true
    usageCount?: true
    errorCount?: true
  }

  export type ChannelSumAggregateInputType = {
    priority?: true
    weight?: true
    maxTokens?: true
    rpmLimit?: true
    tpmLimit?: true
    usageCount?: true
    errorCount?: true
  }

  export type ChannelMinAggregateInputType = {
    id?: true
    name?: true
    provider?: true
    apiKey?: true
    baseUrl?: true
    models?: true
    isActive?: true
    priority?: true
    weight?: true
    maxTokens?: true
    rpmLimit?: true
    tpmLimit?: true
    usageCount?: true
    errorCount?: true
    lastUsedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChannelMaxAggregateInputType = {
    id?: true
    name?: true
    provider?: true
    apiKey?: true
    baseUrl?: true
    models?: true
    isActive?: true
    priority?: true
    weight?: true
    maxTokens?: true
    rpmLimit?: true
    tpmLimit?: true
    usageCount?: true
    errorCount?: true
    lastUsedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChannelCountAggregateInputType = {
    id?: true
    name?: true
    provider?: true
    apiKey?: true
    baseUrl?: true
    models?: true
    isActive?: true
    priority?: true
    weight?: true
    maxTokens?: true
    rpmLimit?: true
    tpmLimit?: true
    usageCount?: true
    errorCount?: true
    lastUsedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChannelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Channel to aggregate.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Channels
    **/
    _count?: true | ChannelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChannelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChannelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelMaxAggregateInputType
  }

  export type GetChannelAggregateType<T extends ChannelAggregateArgs> = {
        [P in keyof T & keyof AggregateChannel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannel[P]>
      : GetScalarType<T[P], AggregateChannel[P]>
  }




  export type ChannelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChannelWhereInput
    orderBy?: ChannelOrderByWithAggregationInput | ChannelOrderByWithAggregationInput[]
    by: ChannelScalarFieldEnum[] | ChannelScalarFieldEnum
    having?: ChannelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelCountAggregateInputType | true
    _avg?: ChannelAvgAggregateInputType
    _sum?: ChannelSumAggregateInputType
    _min?: ChannelMinAggregateInputType
    _max?: ChannelMaxAggregateInputType
  }

  export type ChannelGroupByOutputType = {
    id: string
    name: string
    provider: string
    apiKey: string
    baseUrl: string | null
    models: string
    isActive: boolean
    priority: number
    weight: number
    maxTokens: number | null
    rpmLimit: number | null
    tpmLimit: number | null
    usageCount: number
    errorCount: number
    lastUsedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ChannelCountAggregateOutputType | null
    _avg: ChannelAvgAggregateOutputType | null
    _sum: ChannelSumAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  type GetChannelGroupByPayload<T extends ChannelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChannelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelGroupByOutputType[P]>
        }
      >
    >


  export type ChannelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    provider?: boolean
    apiKey?: boolean
    baseUrl?: boolean
    models?: boolean
    isActive?: boolean
    priority?: boolean
    weight?: boolean
    maxTokens?: boolean
    rpmLimit?: boolean
    tpmLimit?: boolean
    usageCount?: boolean
    errorCount?: boolean
    lastUsedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["channel"]>

  export type ChannelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    provider?: boolean
    apiKey?: boolean
    baseUrl?: boolean
    models?: boolean
    isActive?: boolean
    priority?: boolean
    weight?: boolean
    maxTokens?: boolean
    rpmLimit?: boolean
    tpmLimit?: boolean
    usageCount?: boolean
    errorCount?: boolean
    lastUsedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["channel"]>

  export type ChannelSelectScalar = {
    id?: boolean
    name?: boolean
    provider?: boolean
    apiKey?: boolean
    baseUrl?: boolean
    models?: boolean
    isActive?: boolean
    priority?: boolean
    weight?: boolean
    maxTokens?: boolean
    rpmLimit?: boolean
    tpmLimit?: boolean
    usageCount?: boolean
    errorCount?: boolean
    lastUsedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $ChannelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Channel"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      provider: string
      apiKey: string
      baseUrl: string | null
      models: string
      isActive: boolean
      priority: number
      weight: number
      maxTokens: number | null
      rpmLimit: number | null
      tpmLimit: number | null
      usageCount: number
      errorCount: number
      lastUsedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["channel"]>
    composites: {}
  }

  type ChannelGetPayload<S extends boolean | null | undefined | ChannelDefaultArgs> = $Result.GetResult<Prisma.$ChannelPayload, S>

  type ChannelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChannelFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChannelCountAggregateInputType | true
    }

  export interface ChannelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Channel'], meta: { name: 'Channel' } }
    /**
     * Find zero or one Channel that matches the filter.
     * @param {ChannelFindUniqueArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChannelFindUniqueArgs>(args: SelectSubset<T, ChannelFindUniqueArgs<ExtArgs>>): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Channel that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChannelFindUniqueOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChannelFindUniqueOrThrowArgs>(args: SelectSubset<T, ChannelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Channel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChannelFindFirstArgs>(args?: SelectSubset<T, ChannelFindFirstArgs<ExtArgs>>): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Channel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChannelFindFirstOrThrowArgs>(args?: SelectSubset<T, ChannelFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Channels
     * const channels = await prisma.channel.findMany()
     * 
     * // Get first 10 Channels
     * const channels = await prisma.channel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelWithIdOnly = await prisma.channel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChannelFindManyArgs>(args?: SelectSubset<T, ChannelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Channel.
     * @param {ChannelCreateArgs} args - Arguments to create a Channel.
     * @example
     * // Create one Channel
     * const Channel = await prisma.channel.create({
     *   data: {
     *     // ... data to create a Channel
     *   }
     * })
     * 
     */
    create<T extends ChannelCreateArgs>(args: SelectSubset<T, ChannelCreateArgs<ExtArgs>>): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Channels.
     * @param {ChannelCreateManyArgs} args - Arguments to create many Channels.
     * @example
     * // Create many Channels
     * const channel = await prisma.channel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChannelCreateManyArgs>(args?: SelectSubset<T, ChannelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Channels and returns the data saved in the database.
     * @param {ChannelCreateManyAndReturnArgs} args - Arguments to create many Channels.
     * @example
     * // Create many Channels
     * const channel = await prisma.channel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Channels and only return the `id`
     * const channelWithIdOnly = await prisma.channel.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChannelCreateManyAndReturnArgs>(args?: SelectSubset<T, ChannelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Channel.
     * @param {ChannelDeleteArgs} args - Arguments to delete one Channel.
     * @example
     * // Delete one Channel
     * const Channel = await prisma.channel.delete({
     *   where: {
     *     // ... filter to delete one Channel
     *   }
     * })
     * 
     */
    delete<T extends ChannelDeleteArgs>(args: SelectSubset<T, ChannelDeleteArgs<ExtArgs>>): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Channel.
     * @param {ChannelUpdateArgs} args - Arguments to update one Channel.
     * @example
     * // Update one Channel
     * const channel = await prisma.channel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChannelUpdateArgs>(args: SelectSubset<T, ChannelUpdateArgs<ExtArgs>>): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Channels.
     * @param {ChannelDeleteManyArgs} args - Arguments to filter Channels to delete.
     * @example
     * // Delete a few Channels
     * const { count } = await prisma.channel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChannelDeleteManyArgs>(args?: SelectSubset<T, ChannelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Channels
     * const channel = await prisma.channel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChannelUpdateManyArgs>(args: SelectSubset<T, ChannelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Channel.
     * @param {ChannelUpsertArgs} args - Arguments to update or create a Channel.
     * @example
     * // Update or create a Channel
     * const channel = await prisma.channel.upsert({
     *   create: {
     *     // ... data to create a Channel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Channel we want to update
     *   }
     * })
     */
    upsert<T extends ChannelUpsertArgs>(args: SelectSubset<T, ChannelUpsertArgs<ExtArgs>>): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelCountArgs} args - Arguments to filter Channels to count.
     * @example
     * // Count the number of Channels
     * const count = await prisma.channel.count({
     *   where: {
     *     // ... the filter for the Channels we want to count
     *   }
     * })
    **/
    count<T extends ChannelCountArgs>(
      args?: Subset<T, ChannelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelAggregateArgs>(args: Subset<T, ChannelAggregateArgs>): Prisma.PrismaPromise<GetChannelAggregateType<T>>

    /**
     * Group by Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelGroupByArgs['orderBy'] }
        : { orderBy?: ChannelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Channel model
   */
  readonly fields: ChannelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Channel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChannelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Channel model
   */ 
  interface ChannelFieldRefs {
    readonly id: FieldRef<"Channel", 'String'>
    readonly name: FieldRef<"Channel", 'String'>
    readonly provider: FieldRef<"Channel", 'String'>
    readonly apiKey: FieldRef<"Channel", 'String'>
    readonly baseUrl: FieldRef<"Channel", 'String'>
    readonly models: FieldRef<"Channel", 'String'>
    readonly isActive: FieldRef<"Channel", 'Boolean'>
    readonly priority: FieldRef<"Channel", 'Int'>
    readonly weight: FieldRef<"Channel", 'Int'>
    readonly maxTokens: FieldRef<"Channel", 'Int'>
    readonly rpmLimit: FieldRef<"Channel", 'Int'>
    readonly tpmLimit: FieldRef<"Channel", 'Int'>
    readonly usageCount: FieldRef<"Channel", 'Int'>
    readonly errorCount: FieldRef<"Channel", 'Int'>
    readonly lastUsedAt: FieldRef<"Channel", 'DateTime'>
    readonly createdAt: FieldRef<"Channel", 'DateTime'>
    readonly updatedAt: FieldRef<"Channel", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Channel findUnique
   */
  export type ChannelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }

  /**
   * Channel findUniqueOrThrow
   */
  export type ChannelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }

  /**
   * Channel findFirst
   */
  export type ChannelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }

  /**
   * Channel findFirstOrThrow
   */
  export type ChannelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }

  /**
   * Channel findMany
   */
  export type ChannelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Filter, which Channels to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }

  /**
   * Channel create
   */
  export type ChannelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * The data needed to create a Channel.
     */
    data: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
  }

  /**
   * Channel createMany
   */
  export type ChannelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Channels.
     */
    data: ChannelCreateManyInput | ChannelCreateManyInput[]
  }

  /**
   * Channel createManyAndReturn
   */
  export type ChannelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Channels.
     */
    data: ChannelCreateManyInput | ChannelCreateManyInput[]
  }

  /**
   * Channel update
   */
  export type ChannelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * The data needed to update a Channel.
     */
    data: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
    /**
     * Choose, which Channel to update.
     */
    where: ChannelWhereUniqueInput
  }

  /**
   * Channel updateMany
   */
  export type ChannelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Channels.
     */
    data: XOR<ChannelUpdateManyMutationInput, ChannelUncheckedUpdateManyInput>
    /**
     * Filter which Channels to update
     */
    where?: ChannelWhereInput
  }

  /**
   * Channel upsert
   */
  export type ChannelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * The filter to search for the Channel to update in case it exists.
     */
    where: ChannelWhereUniqueInput
    /**
     * In case the Channel found by the `where` argument doesn't exist, create a new Channel with this data.
     */
    create: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
    /**
     * In case the Channel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
  }

  /**
   * Channel delete
   */
  export type ChannelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Filter which Channel to delete.
     */
    where: ChannelWhereUniqueInput
  }

  /**
   * Channel deleteMany
   */
  export type ChannelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Channels to delete
     */
    where?: ChannelWhereInput
  }

  /**
   * Channel without action
   */
  export type ChannelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
  }


  /**
   * Model Workflow
   */

  export type AggregateWorkflow = {
    _count: WorkflowCountAggregateOutputType | null
    _avg: WorkflowAvgAggregateOutputType | null
    _sum: WorkflowSumAggregateOutputType | null
    _min: WorkflowMinAggregateOutputType | null
    _max: WorkflowMaxAggregateOutputType | null
  }

  export type WorkflowAvgAggregateOutputType = {
    usageCount: number | null
    rating: number | null
    ratingCount: number | null
  }

  export type WorkflowSumAggregateOutputType = {
    usageCount: number | null
    rating: number | null
    ratingCount: number | null
  }

  export type WorkflowMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    creatorId: string | null
    version: string | null
    status: string | null
    isTemplate: boolean | null
    isPublic: boolean | null
    category: string | null
    tags: string | null
    definition: string | null
    variables: string | null
    settings: string | null
    usageCount: number | null
    rating: number | null
    ratingCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkflowMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    creatorId: string | null
    version: string | null
    status: string | null
    isTemplate: boolean | null
    isPublic: boolean | null
    category: string | null
    tags: string | null
    definition: string | null
    variables: string | null
    settings: string | null
    usageCount: number | null
    rating: number | null
    ratingCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkflowCountAggregateOutputType = {
    id: number
    name: number
    description: number
    creatorId: number
    version: number
    status: number
    isTemplate: number
    isPublic: number
    category: number
    tags: number
    definition: number
    variables: number
    settings: number
    usageCount: number
    rating: number
    ratingCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkflowAvgAggregateInputType = {
    usageCount?: true
    rating?: true
    ratingCount?: true
  }

  export type WorkflowSumAggregateInputType = {
    usageCount?: true
    rating?: true
    ratingCount?: true
  }

  export type WorkflowMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    creatorId?: true
    version?: true
    status?: true
    isTemplate?: true
    isPublic?: true
    category?: true
    tags?: true
    definition?: true
    variables?: true
    settings?: true
    usageCount?: true
    rating?: true
    ratingCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkflowMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    creatorId?: true
    version?: true
    status?: true
    isTemplate?: true
    isPublic?: true
    category?: true
    tags?: true
    definition?: true
    variables?: true
    settings?: true
    usageCount?: true
    rating?: true
    ratingCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkflowCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    creatorId?: true
    version?: true
    status?: true
    isTemplate?: true
    isPublic?: true
    category?: true
    tags?: true
    definition?: true
    variables?: true
    settings?: true
    usageCount?: true
    rating?: true
    ratingCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkflowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workflow to aggregate.
     */
    where?: WorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workflows to fetch.
     */
    orderBy?: WorkflowOrderByWithRelationInput | WorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workflows
    **/
    _count?: true | WorkflowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkflowAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkflowSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowMaxAggregateInputType
  }

  export type GetWorkflowAggregateType<T extends WorkflowAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflow[P]>
      : GetScalarType<T[P], AggregateWorkflow[P]>
  }




  export type WorkflowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowWhereInput
    orderBy?: WorkflowOrderByWithAggregationInput | WorkflowOrderByWithAggregationInput[]
    by: WorkflowScalarFieldEnum[] | WorkflowScalarFieldEnum
    having?: WorkflowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowCountAggregateInputType | true
    _avg?: WorkflowAvgAggregateInputType
    _sum?: WorkflowSumAggregateInputType
    _min?: WorkflowMinAggregateInputType
    _max?: WorkflowMaxAggregateInputType
  }

  export type WorkflowGroupByOutputType = {
    id: string
    name: string
    description: string | null
    creatorId: string
    version: string
    status: string
    isTemplate: boolean
    isPublic: boolean
    category: string
    tags: string
    definition: string
    variables: string
    settings: string
    usageCount: number
    rating: number
    ratingCount: number
    createdAt: Date
    updatedAt: Date
    _count: WorkflowCountAggregateOutputType | null
    _avg: WorkflowAvgAggregateOutputType | null
    _sum: WorkflowSumAggregateOutputType | null
    _min: WorkflowMinAggregateOutputType | null
    _max: WorkflowMaxAggregateOutputType | null
  }

  type GetWorkflowGroupByPayload<T extends WorkflowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkflowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    creatorId?: boolean
    version?: boolean
    status?: boolean
    isTemplate?: boolean
    isPublic?: boolean
    category?: boolean
    tags?: boolean
    definition?: boolean
    variables?: boolean
    settings?: boolean
    usageCount?: boolean
    rating?: boolean
    ratingCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    instances?: boolean | Workflow$instancesArgs<ExtArgs>
    templates?: boolean | Workflow$templatesArgs<ExtArgs>
    ratings?: boolean | Workflow$ratingsArgs<ExtArgs>
    scheduledTasks?: boolean | Workflow$scheduledTasksArgs<ExtArgs>
    _count?: boolean | WorkflowCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflow"]>

  export type WorkflowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    creatorId?: boolean
    version?: boolean
    status?: boolean
    isTemplate?: boolean
    isPublic?: boolean
    category?: boolean
    tags?: boolean
    definition?: boolean
    variables?: boolean
    settings?: boolean
    usageCount?: boolean
    rating?: boolean
    ratingCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflow"]>

  export type WorkflowSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    creatorId?: boolean
    version?: boolean
    status?: boolean
    isTemplate?: boolean
    isPublic?: boolean
    category?: boolean
    tags?: boolean
    definition?: boolean
    variables?: boolean
    settings?: boolean
    usageCount?: boolean
    rating?: boolean
    ratingCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkflowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    instances?: boolean | Workflow$instancesArgs<ExtArgs>
    templates?: boolean | Workflow$templatesArgs<ExtArgs>
    ratings?: boolean | Workflow$ratingsArgs<ExtArgs>
    scheduledTasks?: boolean | Workflow$scheduledTasksArgs<ExtArgs>
    _count?: boolean | WorkflowCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkflowIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WorkflowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Workflow"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      instances: Prisma.$WorkflowInstancePayload<ExtArgs>[]
      templates: Prisma.$WorkflowTemplatePayload<ExtArgs>[]
      ratings: Prisma.$WorkflowRatingPayload<ExtArgs>[]
      scheduledTasks: Prisma.$ScheduledTaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      creatorId: string
      version: string
      status: string
      isTemplate: boolean
      isPublic: boolean
      category: string
      tags: string
      definition: string
      variables: string
      settings: string
      usageCount: number
      rating: number
      ratingCount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workflow"]>
    composites: {}
  }

  type WorkflowGetPayload<S extends boolean | null | undefined | WorkflowDefaultArgs> = $Result.GetResult<Prisma.$WorkflowPayload, S>

  type WorkflowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkflowFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkflowCountAggregateInputType | true
    }

  export interface WorkflowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Workflow'], meta: { name: 'Workflow' } }
    /**
     * Find zero or one Workflow that matches the filter.
     * @param {WorkflowFindUniqueArgs} args - Arguments to find a Workflow
     * @example
     * // Get one Workflow
     * const workflow = await prisma.workflow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkflowFindUniqueArgs>(args: SelectSubset<T, WorkflowFindUniqueArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Workflow that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkflowFindUniqueOrThrowArgs} args - Arguments to find a Workflow
     * @example
     * // Get one Workflow
     * const workflow = await prisma.workflow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkflowFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkflowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Workflow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowFindFirstArgs} args - Arguments to find a Workflow
     * @example
     * // Get one Workflow
     * const workflow = await prisma.workflow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkflowFindFirstArgs>(args?: SelectSubset<T, WorkflowFindFirstArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Workflow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowFindFirstOrThrowArgs} args - Arguments to find a Workflow
     * @example
     * // Get one Workflow
     * const workflow = await prisma.workflow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkflowFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkflowFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Workflows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workflows
     * const workflows = await prisma.workflow.findMany()
     * 
     * // Get first 10 Workflows
     * const workflows = await prisma.workflow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowWithIdOnly = await prisma.workflow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkflowFindManyArgs>(args?: SelectSubset<T, WorkflowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Workflow.
     * @param {WorkflowCreateArgs} args - Arguments to create a Workflow.
     * @example
     * // Create one Workflow
     * const Workflow = await prisma.workflow.create({
     *   data: {
     *     // ... data to create a Workflow
     *   }
     * })
     * 
     */
    create<T extends WorkflowCreateArgs>(args: SelectSubset<T, WorkflowCreateArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Workflows.
     * @param {WorkflowCreateManyArgs} args - Arguments to create many Workflows.
     * @example
     * // Create many Workflows
     * const workflow = await prisma.workflow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkflowCreateManyArgs>(args?: SelectSubset<T, WorkflowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workflows and returns the data saved in the database.
     * @param {WorkflowCreateManyAndReturnArgs} args - Arguments to create many Workflows.
     * @example
     * // Create many Workflows
     * const workflow = await prisma.workflow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workflows and only return the `id`
     * const workflowWithIdOnly = await prisma.workflow.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkflowCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkflowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Workflow.
     * @param {WorkflowDeleteArgs} args - Arguments to delete one Workflow.
     * @example
     * // Delete one Workflow
     * const Workflow = await prisma.workflow.delete({
     *   where: {
     *     // ... filter to delete one Workflow
     *   }
     * })
     * 
     */
    delete<T extends WorkflowDeleteArgs>(args: SelectSubset<T, WorkflowDeleteArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Workflow.
     * @param {WorkflowUpdateArgs} args - Arguments to update one Workflow.
     * @example
     * // Update one Workflow
     * const workflow = await prisma.workflow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkflowUpdateArgs>(args: SelectSubset<T, WorkflowUpdateArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Workflows.
     * @param {WorkflowDeleteManyArgs} args - Arguments to filter Workflows to delete.
     * @example
     * // Delete a few Workflows
     * const { count } = await prisma.workflow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkflowDeleteManyArgs>(args?: SelectSubset<T, WorkflowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workflows
     * const workflow = await prisma.workflow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkflowUpdateManyArgs>(args: SelectSubset<T, WorkflowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Workflow.
     * @param {WorkflowUpsertArgs} args - Arguments to update or create a Workflow.
     * @example
     * // Update or create a Workflow
     * const workflow = await prisma.workflow.upsert({
     *   create: {
     *     // ... data to create a Workflow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workflow we want to update
     *   }
     * })
     */
    upsert<T extends WorkflowUpsertArgs>(args: SelectSubset<T, WorkflowUpsertArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Workflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowCountArgs} args - Arguments to filter Workflows to count.
     * @example
     * // Count the number of Workflows
     * const count = await prisma.workflow.count({
     *   where: {
     *     // ... the filter for the Workflows we want to count
     *   }
     * })
    **/
    count<T extends WorkflowCountArgs>(
      args?: Subset<T, WorkflowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workflow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowAggregateArgs>(args: Subset<T, WorkflowAggregateArgs>): Prisma.PrismaPromise<GetWorkflowAggregateType<T>>

    /**
     * Group by Workflow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Workflow model
   */
  readonly fields: WorkflowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Workflow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkflowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    instances<T extends Workflow$instancesArgs<ExtArgs> = {}>(args?: Subset<T, Workflow$instancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowInstancePayload<ExtArgs>, T, "findMany"> | Null>
    templates<T extends Workflow$templatesArgs<ExtArgs> = {}>(args?: Subset<T, Workflow$templatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findMany"> | Null>
    ratings<T extends Workflow$ratingsArgs<ExtArgs> = {}>(args?: Subset<T, Workflow$ratingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowRatingPayload<ExtArgs>, T, "findMany"> | Null>
    scheduledTasks<T extends Workflow$scheduledTasksArgs<ExtArgs> = {}>(args?: Subset<T, Workflow$scheduledTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledTaskPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Workflow model
   */ 
  interface WorkflowFieldRefs {
    readonly id: FieldRef<"Workflow", 'String'>
    readonly name: FieldRef<"Workflow", 'String'>
    readonly description: FieldRef<"Workflow", 'String'>
    readonly creatorId: FieldRef<"Workflow", 'String'>
    readonly version: FieldRef<"Workflow", 'String'>
    readonly status: FieldRef<"Workflow", 'String'>
    readonly isTemplate: FieldRef<"Workflow", 'Boolean'>
    readonly isPublic: FieldRef<"Workflow", 'Boolean'>
    readonly category: FieldRef<"Workflow", 'String'>
    readonly tags: FieldRef<"Workflow", 'String'>
    readonly definition: FieldRef<"Workflow", 'String'>
    readonly variables: FieldRef<"Workflow", 'String'>
    readonly settings: FieldRef<"Workflow", 'String'>
    readonly usageCount: FieldRef<"Workflow", 'Int'>
    readonly rating: FieldRef<"Workflow", 'Float'>
    readonly ratingCount: FieldRef<"Workflow", 'Int'>
    readonly createdAt: FieldRef<"Workflow", 'DateTime'>
    readonly updatedAt: FieldRef<"Workflow", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Workflow findUnique
   */
  export type WorkflowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * Filter, which Workflow to fetch.
     */
    where: WorkflowWhereUniqueInput
  }

  /**
   * Workflow findUniqueOrThrow
   */
  export type WorkflowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * Filter, which Workflow to fetch.
     */
    where: WorkflowWhereUniqueInput
  }

  /**
   * Workflow findFirst
   */
  export type WorkflowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * Filter, which Workflow to fetch.
     */
    where?: WorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workflows to fetch.
     */
    orderBy?: WorkflowOrderByWithRelationInput | WorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workflows.
     */
    cursor?: WorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workflows.
     */
    distinct?: WorkflowScalarFieldEnum | WorkflowScalarFieldEnum[]
  }

  /**
   * Workflow findFirstOrThrow
   */
  export type WorkflowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * Filter, which Workflow to fetch.
     */
    where?: WorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workflows to fetch.
     */
    orderBy?: WorkflowOrderByWithRelationInput | WorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workflows.
     */
    cursor?: WorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workflows.
     */
    distinct?: WorkflowScalarFieldEnum | WorkflowScalarFieldEnum[]
  }

  /**
   * Workflow findMany
   */
  export type WorkflowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * Filter, which Workflows to fetch.
     */
    where?: WorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workflows to fetch.
     */
    orderBy?: WorkflowOrderByWithRelationInput | WorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workflows.
     */
    cursor?: WorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workflows.
     */
    skip?: number
    distinct?: WorkflowScalarFieldEnum | WorkflowScalarFieldEnum[]
  }

  /**
   * Workflow create
   */
  export type WorkflowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * The data needed to create a Workflow.
     */
    data: XOR<WorkflowCreateInput, WorkflowUncheckedCreateInput>
  }

  /**
   * Workflow createMany
   */
  export type WorkflowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Workflows.
     */
    data: WorkflowCreateManyInput | WorkflowCreateManyInput[]
  }

  /**
   * Workflow createManyAndReturn
   */
  export type WorkflowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Workflows.
     */
    data: WorkflowCreateManyInput | WorkflowCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Workflow update
   */
  export type WorkflowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * The data needed to update a Workflow.
     */
    data: XOR<WorkflowUpdateInput, WorkflowUncheckedUpdateInput>
    /**
     * Choose, which Workflow to update.
     */
    where: WorkflowWhereUniqueInput
  }

  /**
   * Workflow updateMany
   */
  export type WorkflowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Workflows.
     */
    data: XOR<WorkflowUpdateManyMutationInput, WorkflowUncheckedUpdateManyInput>
    /**
     * Filter which Workflows to update
     */
    where?: WorkflowWhereInput
  }

  /**
   * Workflow upsert
   */
  export type WorkflowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * The filter to search for the Workflow to update in case it exists.
     */
    where: WorkflowWhereUniqueInput
    /**
     * In case the Workflow found by the `where` argument doesn't exist, create a new Workflow with this data.
     */
    create: XOR<WorkflowCreateInput, WorkflowUncheckedCreateInput>
    /**
     * In case the Workflow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkflowUpdateInput, WorkflowUncheckedUpdateInput>
  }

  /**
   * Workflow delete
   */
  export type WorkflowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * Filter which Workflow to delete.
     */
    where: WorkflowWhereUniqueInput
  }

  /**
   * Workflow deleteMany
   */
  export type WorkflowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workflows to delete
     */
    where?: WorkflowWhereInput
  }

  /**
   * Workflow.instances
   */
  export type Workflow$instancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowInstance
     */
    select?: WorkflowInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInstanceInclude<ExtArgs> | null
    where?: WorkflowInstanceWhereInput
    orderBy?: WorkflowInstanceOrderByWithRelationInput | WorkflowInstanceOrderByWithRelationInput[]
    cursor?: WorkflowInstanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowInstanceScalarFieldEnum | WorkflowInstanceScalarFieldEnum[]
  }

  /**
   * Workflow.templates
   */
  export type Workflow$templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    where?: WorkflowTemplateWhereInput
    orderBy?: WorkflowTemplateOrderByWithRelationInput | WorkflowTemplateOrderByWithRelationInput[]
    cursor?: WorkflowTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowTemplateScalarFieldEnum | WorkflowTemplateScalarFieldEnum[]
  }

  /**
   * Workflow.ratings
   */
  export type Workflow$ratingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRating
     */
    select?: WorkflowRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRatingInclude<ExtArgs> | null
    where?: WorkflowRatingWhereInput
    orderBy?: WorkflowRatingOrderByWithRelationInput | WorkflowRatingOrderByWithRelationInput[]
    cursor?: WorkflowRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowRatingScalarFieldEnum | WorkflowRatingScalarFieldEnum[]
  }

  /**
   * Workflow.scheduledTasks
   */
  export type Workflow$scheduledTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledTask
     */
    select?: ScheduledTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledTaskInclude<ExtArgs> | null
    where?: ScheduledTaskWhereInput
    orderBy?: ScheduledTaskOrderByWithRelationInput | ScheduledTaskOrderByWithRelationInput[]
    cursor?: ScheduledTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduledTaskScalarFieldEnum | ScheduledTaskScalarFieldEnum[]
  }

  /**
   * Workflow without action
   */
  export type WorkflowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
  }


  /**
   * Model WorkflowInstance
   */

  export type AggregateWorkflowInstance = {
    _count: WorkflowInstanceCountAggregateOutputType | null
    _avg: WorkflowInstanceAvgAggregateOutputType | null
    _sum: WorkflowInstanceSumAggregateOutputType | null
    _min: WorkflowInstanceMinAggregateOutputType | null
    _max: WorkflowInstanceMaxAggregateOutputType | null
  }

  export type WorkflowInstanceAvgAggregateOutputType = {
    progress: number | null
    retryCount: number | null
    maxRetries: number | null
    timeout: number | null
  }

  export type WorkflowInstanceSumAggregateOutputType = {
    progress: number | null
    retryCount: number | null
    maxRetries: number | null
    timeout: number | null
  }

  export type WorkflowInstanceMinAggregateOutputType = {
    id: string | null
    workflowId: string | null
    executorId: string | null
    name: string | null
    status: string | null
    priority: string | null
    input: string | null
    output: string | null
    variables: string | null
    currentStep: string | null
    progress: number | null
    startedAt: Date | null
    completedAt: Date | null
    failureReason: string | null
    retryCount: number | null
    maxRetries: number | null
    timeout: number | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkflowInstanceMaxAggregateOutputType = {
    id: string | null
    workflowId: string | null
    executorId: string | null
    name: string | null
    status: string | null
    priority: string | null
    input: string | null
    output: string | null
    variables: string | null
    currentStep: string | null
    progress: number | null
    startedAt: Date | null
    completedAt: Date | null
    failureReason: string | null
    retryCount: number | null
    maxRetries: number | null
    timeout: number | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkflowInstanceCountAggregateOutputType = {
    id: number
    workflowId: number
    executorId: number
    name: number
    status: number
    priority: number
    input: number
    output: number
    variables: number
    currentStep: number
    progress: number
    startedAt: number
    completedAt: number
    failureReason: number
    retryCount: number
    maxRetries: number
    timeout: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkflowInstanceAvgAggregateInputType = {
    progress?: true
    retryCount?: true
    maxRetries?: true
    timeout?: true
  }

  export type WorkflowInstanceSumAggregateInputType = {
    progress?: true
    retryCount?: true
    maxRetries?: true
    timeout?: true
  }

  export type WorkflowInstanceMinAggregateInputType = {
    id?: true
    workflowId?: true
    executorId?: true
    name?: true
    status?: true
    priority?: true
    input?: true
    output?: true
    variables?: true
    currentStep?: true
    progress?: true
    startedAt?: true
    completedAt?: true
    failureReason?: true
    retryCount?: true
    maxRetries?: true
    timeout?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkflowInstanceMaxAggregateInputType = {
    id?: true
    workflowId?: true
    executorId?: true
    name?: true
    status?: true
    priority?: true
    input?: true
    output?: true
    variables?: true
    currentStep?: true
    progress?: true
    startedAt?: true
    completedAt?: true
    failureReason?: true
    retryCount?: true
    maxRetries?: true
    timeout?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkflowInstanceCountAggregateInputType = {
    id?: true
    workflowId?: true
    executorId?: true
    name?: true
    status?: true
    priority?: true
    input?: true
    output?: true
    variables?: true
    currentStep?: true
    progress?: true
    startedAt?: true
    completedAt?: true
    failureReason?: true
    retryCount?: true
    maxRetries?: true
    timeout?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkflowInstanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowInstance to aggregate.
     */
    where?: WorkflowInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowInstances to fetch.
     */
    orderBy?: WorkflowInstanceOrderByWithRelationInput | WorkflowInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkflowInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkflowInstances
    **/
    _count?: true | WorkflowInstanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkflowInstanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkflowInstanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowInstanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowInstanceMaxAggregateInputType
  }

  export type GetWorkflowInstanceAggregateType<T extends WorkflowInstanceAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflowInstance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflowInstance[P]>
      : GetScalarType<T[P], AggregateWorkflowInstance[P]>
  }




  export type WorkflowInstanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowInstanceWhereInput
    orderBy?: WorkflowInstanceOrderByWithAggregationInput | WorkflowInstanceOrderByWithAggregationInput[]
    by: WorkflowInstanceScalarFieldEnum[] | WorkflowInstanceScalarFieldEnum
    having?: WorkflowInstanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowInstanceCountAggregateInputType | true
    _avg?: WorkflowInstanceAvgAggregateInputType
    _sum?: WorkflowInstanceSumAggregateInputType
    _min?: WorkflowInstanceMinAggregateInputType
    _max?: WorkflowInstanceMaxAggregateInputType
  }

  export type WorkflowInstanceGroupByOutputType = {
    id: string
    workflowId: string
    executorId: string
    name: string | null
    status: string
    priority: string
    input: string | null
    output: string | null
    variables: string
    currentStep: string | null
    progress: number
    startedAt: Date | null
    completedAt: Date | null
    failureReason: string | null
    retryCount: number
    maxRetries: number
    timeout: number | null
    metadata: string
    createdAt: Date
    updatedAt: Date
    _count: WorkflowInstanceCountAggregateOutputType | null
    _avg: WorkflowInstanceAvgAggregateOutputType | null
    _sum: WorkflowInstanceSumAggregateOutputType | null
    _min: WorkflowInstanceMinAggregateOutputType | null
    _max: WorkflowInstanceMaxAggregateOutputType | null
  }

  type GetWorkflowInstanceGroupByPayload<T extends WorkflowInstanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkflowInstanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowInstanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowInstanceGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowInstanceGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowInstanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowId?: boolean
    executorId?: boolean
    name?: boolean
    status?: boolean
    priority?: boolean
    input?: boolean
    output?: boolean
    variables?: boolean
    currentStep?: boolean
    progress?: boolean
    startedAt?: boolean
    completedAt?: boolean
    failureReason?: boolean
    retryCount?: boolean
    maxRetries?: boolean
    timeout?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
    executor?: boolean | UserDefaultArgs<ExtArgs>
    executions?: boolean | WorkflowInstance$executionsArgs<ExtArgs>
    logs?: boolean | WorkflowInstance$logsArgs<ExtArgs>
    _count?: boolean | WorkflowInstanceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowInstance"]>

  export type WorkflowInstanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowId?: boolean
    executorId?: boolean
    name?: boolean
    status?: boolean
    priority?: boolean
    input?: boolean
    output?: boolean
    variables?: boolean
    currentStep?: boolean
    progress?: boolean
    startedAt?: boolean
    completedAt?: boolean
    failureReason?: boolean
    retryCount?: boolean
    maxRetries?: boolean
    timeout?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
    executor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowInstance"]>

  export type WorkflowInstanceSelectScalar = {
    id?: boolean
    workflowId?: boolean
    executorId?: boolean
    name?: boolean
    status?: boolean
    priority?: boolean
    input?: boolean
    output?: boolean
    variables?: boolean
    currentStep?: boolean
    progress?: boolean
    startedAt?: boolean
    completedAt?: boolean
    failureReason?: boolean
    retryCount?: boolean
    maxRetries?: boolean
    timeout?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkflowInstanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
    executor?: boolean | UserDefaultArgs<ExtArgs>
    executions?: boolean | WorkflowInstance$executionsArgs<ExtArgs>
    logs?: boolean | WorkflowInstance$logsArgs<ExtArgs>
    _count?: boolean | WorkflowInstanceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkflowInstanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
    executor?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WorkflowInstancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkflowInstance"
    objects: {
      workflow: Prisma.$WorkflowPayload<ExtArgs>
      executor: Prisma.$UserPayload<ExtArgs>
      executions: Prisma.$StepExecutionPayload<ExtArgs>[]
      logs: Prisma.$WorkflowLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workflowId: string
      executorId: string
      name: string | null
      status: string
      priority: string
      input: string | null
      output: string | null
      variables: string
      currentStep: string | null
      progress: number
      startedAt: Date | null
      completedAt: Date | null
      failureReason: string | null
      retryCount: number
      maxRetries: number
      timeout: number | null
      metadata: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workflowInstance"]>
    composites: {}
  }

  type WorkflowInstanceGetPayload<S extends boolean | null | undefined | WorkflowInstanceDefaultArgs> = $Result.GetResult<Prisma.$WorkflowInstancePayload, S>

  type WorkflowInstanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkflowInstanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkflowInstanceCountAggregateInputType | true
    }

  export interface WorkflowInstanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkflowInstance'], meta: { name: 'WorkflowInstance' } }
    /**
     * Find zero or one WorkflowInstance that matches the filter.
     * @param {WorkflowInstanceFindUniqueArgs} args - Arguments to find a WorkflowInstance
     * @example
     * // Get one WorkflowInstance
     * const workflowInstance = await prisma.workflowInstance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkflowInstanceFindUniqueArgs>(args: SelectSubset<T, WorkflowInstanceFindUniqueArgs<ExtArgs>>): Prisma__WorkflowInstanceClient<$Result.GetResult<Prisma.$WorkflowInstancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkflowInstance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkflowInstanceFindUniqueOrThrowArgs} args - Arguments to find a WorkflowInstance
     * @example
     * // Get one WorkflowInstance
     * const workflowInstance = await prisma.workflowInstance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkflowInstanceFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkflowInstanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkflowInstanceClient<$Result.GetResult<Prisma.$WorkflowInstancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkflowInstance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowInstanceFindFirstArgs} args - Arguments to find a WorkflowInstance
     * @example
     * // Get one WorkflowInstance
     * const workflowInstance = await prisma.workflowInstance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkflowInstanceFindFirstArgs>(args?: SelectSubset<T, WorkflowInstanceFindFirstArgs<ExtArgs>>): Prisma__WorkflowInstanceClient<$Result.GetResult<Prisma.$WorkflowInstancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkflowInstance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowInstanceFindFirstOrThrowArgs} args - Arguments to find a WorkflowInstance
     * @example
     * // Get one WorkflowInstance
     * const workflowInstance = await prisma.workflowInstance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkflowInstanceFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkflowInstanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkflowInstanceClient<$Result.GetResult<Prisma.$WorkflowInstancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkflowInstances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowInstanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkflowInstances
     * const workflowInstances = await prisma.workflowInstance.findMany()
     * 
     * // Get first 10 WorkflowInstances
     * const workflowInstances = await prisma.workflowInstance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowInstanceWithIdOnly = await prisma.workflowInstance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkflowInstanceFindManyArgs>(args?: SelectSubset<T, WorkflowInstanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowInstancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkflowInstance.
     * @param {WorkflowInstanceCreateArgs} args - Arguments to create a WorkflowInstance.
     * @example
     * // Create one WorkflowInstance
     * const WorkflowInstance = await prisma.workflowInstance.create({
     *   data: {
     *     // ... data to create a WorkflowInstance
     *   }
     * })
     * 
     */
    create<T extends WorkflowInstanceCreateArgs>(args: SelectSubset<T, WorkflowInstanceCreateArgs<ExtArgs>>): Prisma__WorkflowInstanceClient<$Result.GetResult<Prisma.$WorkflowInstancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkflowInstances.
     * @param {WorkflowInstanceCreateManyArgs} args - Arguments to create many WorkflowInstances.
     * @example
     * // Create many WorkflowInstances
     * const workflowInstance = await prisma.workflowInstance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkflowInstanceCreateManyArgs>(args?: SelectSubset<T, WorkflowInstanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkflowInstances and returns the data saved in the database.
     * @param {WorkflowInstanceCreateManyAndReturnArgs} args - Arguments to create many WorkflowInstances.
     * @example
     * // Create many WorkflowInstances
     * const workflowInstance = await prisma.workflowInstance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkflowInstances and only return the `id`
     * const workflowInstanceWithIdOnly = await prisma.workflowInstance.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkflowInstanceCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkflowInstanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowInstancePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkflowInstance.
     * @param {WorkflowInstanceDeleteArgs} args - Arguments to delete one WorkflowInstance.
     * @example
     * // Delete one WorkflowInstance
     * const WorkflowInstance = await prisma.workflowInstance.delete({
     *   where: {
     *     // ... filter to delete one WorkflowInstance
     *   }
     * })
     * 
     */
    delete<T extends WorkflowInstanceDeleteArgs>(args: SelectSubset<T, WorkflowInstanceDeleteArgs<ExtArgs>>): Prisma__WorkflowInstanceClient<$Result.GetResult<Prisma.$WorkflowInstancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkflowInstance.
     * @param {WorkflowInstanceUpdateArgs} args - Arguments to update one WorkflowInstance.
     * @example
     * // Update one WorkflowInstance
     * const workflowInstance = await prisma.workflowInstance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkflowInstanceUpdateArgs>(args: SelectSubset<T, WorkflowInstanceUpdateArgs<ExtArgs>>): Prisma__WorkflowInstanceClient<$Result.GetResult<Prisma.$WorkflowInstancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkflowInstances.
     * @param {WorkflowInstanceDeleteManyArgs} args - Arguments to filter WorkflowInstances to delete.
     * @example
     * // Delete a few WorkflowInstances
     * const { count } = await prisma.workflowInstance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkflowInstanceDeleteManyArgs>(args?: SelectSubset<T, WorkflowInstanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowInstances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowInstanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkflowInstances
     * const workflowInstance = await prisma.workflowInstance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkflowInstanceUpdateManyArgs>(args: SelectSubset<T, WorkflowInstanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkflowInstance.
     * @param {WorkflowInstanceUpsertArgs} args - Arguments to update or create a WorkflowInstance.
     * @example
     * // Update or create a WorkflowInstance
     * const workflowInstance = await prisma.workflowInstance.upsert({
     *   create: {
     *     // ... data to create a WorkflowInstance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkflowInstance we want to update
     *   }
     * })
     */
    upsert<T extends WorkflowInstanceUpsertArgs>(args: SelectSubset<T, WorkflowInstanceUpsertArgs<ExtArgs>>): Prisma__WorkflowInstanceClient<$Result.GetResult<Prisma.$WorkflowInstancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkflowInstances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowInstanceCountArgs} args - Arguments to filter WorkflowInstances to count.
     * @example
     * // Count the number of WorkflowInstances
     * const count = await prisma.workflowInstance.count({
     *   where: {
     *     // ... the filter for the WorkflowInstances we want to count
     *   }
     * })
    **/
    count<T extends WorkflowInstanceCountArgs>(
      args?: Subset<T, WorkflowInstanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowInstanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkflowInstance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowInstanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowInstanceAggregateArgs>(args: Subset<T, WorkflowInstanceAggregateArgs>): Prisma.PrismaPromise<GetWorkflowInstanceAggregateType<T>>

    /**
     * Group by WorkflowInstance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowInstanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowInstanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowInstanceGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowInstanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowInstanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowInstanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkflowInstance model
   */
  readonly fields: WorkflowInstanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkflowInstance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkflowInstanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workflow<T extends WorkflowDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowDefaultArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    executor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    executions<T extends WorkflowInstance$executionsArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowInstance$executionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "findMany"> | Null>
    logs<T extends WorkflowInstance$logsArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowInstance$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkflowInstance model
   */ 
  interface WorkflowInstanceFieldRefs {
    readonly id: FieldRef<"WorkflowInstance", 'String'>
    readonly workflowId: FieldRef<"WorkflowInstance", 'String'>
    readonly executorId: FieldRef<"WorkflowInstance", 'String'>
    readonly name: FieldRef<"WorkflowInstance", 'String'>
    readonly status: FieldRef<"WorkflowInstance", 'String'>
    readonly priority: FieldRef<"WorkflowInstance", 'String'>
    readonly input: FieldRef<"WorkflowInstance", 'String'>
    readonly output: FieldRef<"WorkflowInstance", 'String'>
    readonly variables: FieldRef<"WorkflowInstance", 'String'>
    readonly currentStep: FieldRef<"WorkflowInstance", 'String'>
    readonly progress: FieldRef<"WorkflowInstance", 'Float'>
    readonly startedAt: FieldRef<"WorkflowInstance", 'DateTime'>
    readonly completedAt: FieldRef<"WorkflowInstance", 'DateTime'>
    readonly failureReason: FieldRef<"WorkflowInstance", 'String'>
    readonly retryCount: FieldRef<"WorkflowInstance", 'Int'>
    readonly maxRetries: FieldRef<"WorkflowInstance", 'Int'>
    readonly timeout: FieldRef<"WorkflowInstance", 'Int'>
    readonly metadata: FieldRef<"WorkflowInstance", 'String'>
    readonly createdAt: FieldRef<"WorkflowInstance", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkflowInstance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkflowInstance findUnique
   */
  export type WorkflowInstanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowInstance
     */
    select?: WorkflowInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInstanceInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowInstance to fetch.
     */
    where: WorkflowInstanceWhereUniqueInput
  }

  /**
   * WorkflowInstance findUniqueOrThrow
   */
  export type WorkflowInstanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowInstance
     */
    select?: WorkflowInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInstanceInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowInstance to fetch.
     */
    where: WorkflowInstanceWhereUniqueInput
  }

  /**
   * WorkflowInstance findFirst
   */
  export type WorkflowInstanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowInstance
     */
    select?: WorkflowInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInstanceInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowInstance to fetch.
     */
    where?: WorkflowInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowInstances to fetch.
     */
    orderBy?: WorkflowInstanceOrderByWithRelationInput | WorkflowInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowInstances.
     */
    cursor?: WorkflowInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowInstances.
     */
    distinct?: WorkflowInstanceScalarFieldEnum | WorkflowInstanceScalarFieldEnum[]
  }

  /**
   * WorkflowInstance findFirstOrThrow
   */
  export type WorkflowInstanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowInstance
     */
    select?: WorkflowInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInstanceInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowInstance to fetch.
     */
    where?: WorkflowInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowInstances to fetch.
     */
    orderBy?: WorkflowInstanceOrderByWithRelationInput | WorkflowInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowInstances.
     */
    cursor?: WorkflowInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowInstances.
     */
    distinct?: WorkflowInstanceScalarFieldEnum | WorkflowInstanceScalarFieldEnum[]
  }

  /**
   * WorkflowInstance findMany
   */
  export type WorkflowInstanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowInstance
     */
    select?: WorkflowInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInstanceInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowInstances to fetch.
     */
    where?: WorkflowInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowInstances to fetch.
     */
    orderBy?: WorkflowInstanceOrderByWithRelationInput | WorkflowInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkflowInstances.
     */
    cursor?: WorkflowInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowInstances.
     */
    skip?: number
    distinct?: WorkflowInstanceScalarFieldEnum | WorkflowInstanceScalarFieldEnum[]
  }

  /**
   * WorkflowInstance create
   */
  export type WorkflowInstanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowInstance
     */
    select?: WorkflowInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInstanceInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkflowInstance.
     */
    data: XOR<WorkflowInstanceCreateInput, WorkflowInstanceUncheckedCreateInput>
  }

  /**
   * WorkflowInstance createMany
   */
  export type WorkflowInstanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkflowInstances.
     */
    data: WorkflowInstanceCreateManyInput | WorkflowInstanceCreateManyInput[]
  }

  /**
   * WorkflowInstance createManyAndReturn
   */
  export type WorkflowInstanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowInstance
     */
    select?: WorkflowInstanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkflowInstances.
     */
    data: WorkflowInstanceCreateManyInput | WorkflowInstanceCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInstanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowInstance update
   */
  export type WorkflowInstanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowInstance
     */
    select?: WorkflowInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInstanceInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkflowInstance.
     */
    data: XOR<WorkflowInstanceUpdateInput, WorkflowInstanceUncheckedUpdateInput>
    /**
     * Choose, which WorkflowInstance to update.
     */
    where: WorkflowInstanceWhereUniqueInput
  }

  /**
   * WorkflowInstance updateMany
   */
  export type WorkflowInstanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkflowInstances.
     */
    data: XOR<WorkflowInstanceUpdateManyMutationInput, WorkflowInstanceUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowInstances to update
     */
    where?: WorkflowInstanceWhereInput
  }

  /**
   * WorkflowInstance upsert
   */
  export type WorkflowInstanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowInstance
     */
    select?: WorkflowInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInstanceInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkflowInstance to update in case it exists.
     */
    where: WorkflowInstanceWhereUniqueInput
    /**
     * In case the WorkflowInstance found by the `where` argument doesn't exist, create a new WorkflowInstance with this data.
     */
    create: XOR<WorkflowInstanceCreateInput, WorkflowInstanceUncheckedCreateInput>
    /**
     * In case the WorkflowInstance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkflowInstanceUpdateInput, WorkflowInstanceUncheckedUpdateInput>
  }

  /**
   * WorkflowInstance delete
   */
  export type WorkflowInstanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowInstance
     */
    select?: WorkflowInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInstanceInclude<ExtArgs> | null
    /**
     * Filter which WorkflowInstance to delete.
     */
    where: WorkflowInstanceWhereUniqueInput
  }

  /**
   * WorkflowInstance deleteMany
   */
  export type WorkflowInstanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowInstances to delete
     */
    where?: WorkflowInstanceWhereInput
  }

  /**
   * WorkflowInstance.executions
   */
  export type WorkflowInstance$executionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    where?: StepExecutionWhereInput
    orderBy?: StepExecutionOrderByWithRelationInput | StepExecutionOrderByWithRelationInput[]
    cursor?: StepExecutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StepExecutionScalarFieldEnum | StepExecutionScalarFieldEnum[]
  }

  /**
   * WorkflowInstance.logs
   */
  export type WorkflowInstance$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowLog
     */
    select?: WorkflowLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowLogInclude<ExtArgs> | null
    where?: WorkflowLogWhereInput
    orderBy?: WorkflowLogOrderByWithRelationInput | WorkflowLogOrderByWithRelationInput[]
    cursor?: WorkflowLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowLogScalarFieldEnum | WorkflowLogScalarFieldEnum[]
  }

  /**
   * WorkflowInstance without action
   */
  export type WorkflowInstanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowInstance
     */
    select?: WorkflowInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInstanceInclude<ExtArgs> | null
  }


  /**
   * Model StepExecution
   */

  export type AggregateStepExecution = {
    _count: StepExecutionCountAggregateOutputType | null
    _avg: StepExecutionAvgAggregateOutputType | null
    _sum: StepExecutionSumAggregateOutputType | null
    _min: StepExecutionMinAggregateOutputType | null
    _max: StepExecutionMaxAggregateOutputType | null
  }

  export type StepExecutionAvgAggregateOutputType = {
    duration: number | null
    retryCount: number | null
  }

  export type StepExecutionSumAggregateOutputType = {
    duration: number | null
    retryCount: number | null
  }

  export type StepExecutionMinAggregateOutputType = {
    id: string | null
    instanceId: string | null
    stepId: string | null
    stepType: string | null
    status: string | null
    input: string | null
    output: string | null
    error: string | null
    duration: number | null
    retryCount: number | null
    startedAt: Date | null
    completedAt: Date | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StepExecutionMaxAggregateOutputType = {
    id: string | null
    instanceId: string | null
    stepId: string | null
    stepType: string | null
    status: string | null
    input: string | null
    output: string | null
    error: string | null
    duration: number | null
    retryCount: number | null
    startedAt: Date | null
    completedAt: Date | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StepExecutionCountAggregateOutputType = {
    id: number
    instanceId: number
    stepId: number
    stepType: number
    status: number
    input: number
    output: number
    error: number
    duration: number
    retryCount: number
    startedAt: number
    completedAt: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StepExecutionAvgAggregateInputType = {
    duration?: true
    retryCount?: true
  }

  export type StepExecutionSumAggregateInputType = {
    duration?: true
    retryCount?: true
  }

  export type StepExecutionMinAggregateInputType = {
    id?: true
    instanceId?: true
    stepId?: true
    stepType?: true
    status?: true
    input?: true
    output?: true
    error?: true
    duration?: true
    retryCount?: true
    startedAt?: true
    completedAt?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StepExecutionMaxAggregateInputType = {
    id?: true
    instanceId?: true
    stepId?: true
    stepType?: true
    status?: true
    input?: true
    output?: true
    error?: true
    duration?: true
    retryCount?: true
    startedAt?: true
    completedAt?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StepExecutionCountAggregateInputType = {
    id?: true
    instanceId?: true
    stepId?: true
    stepType?: true
    status?: true
    input?: true
    output?: true
    error?: true
    duration?: true
    retryCount?: true
    startedAt?: true
    completedAt?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StepExecutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StepExecution to aggregate.
     */
    where?: StepExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StepExecutions to fetch.
     */
    orderBy?: StepExecutionOrderByWithRelationInput | StepExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StepExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StepExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StepExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StepExecutions
    **/
    _count?: true | StepExecutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StepExecutionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StepExecutionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StepExecutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StepExecutionMaxAggregateInputType
  }

  export type GetStepExecutionAggregateType<T extends StepExecutionAggregateArgs> = {
        [P in keyof T & keyof AggregateStepExecution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStepExecution[P]>
      : GetScalarType<T[P], AggregateStepExecution[P]>
  }




  export type StepExecutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StepExecutionWhereInput
    orderBy?: StepExecutionOrderByWithAggregationInput | StepExecutionOrderByWithAggregationInput[]
    by: StepExecutionScalarFieldEnum[] | StepExecutionScalarFieldEnum
    having?: StepExecutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StepExecutionCountAggregateInputType | true
    _avg?: StepExecutionAvgAggregateInputType
    _sum?: StepExecutionSumAggregateInputType
    _min?: StepExecutionMinAggregateInputType
    _max?: StepExecutionMaxAggregateInputType
  }

  export type StepExecutionGroupByOutputType = {
    id: string
    instanceId: string
    stepId: string
    stepType: string
    status: string
    input: string | null
    output: string | null
    error: string | null
    duration: number
    retryCount: number
    startedAt: Date | null
    completedAt: Date | null
    metadata: string
    createdAt: Date
    updatedAt: Date
    _count: StepExecutionCountAggregateOutputType | null
    _avg: StepExecutionAvgAggregateOutputType | null
    _sum: StepExecutionSumAggregateOutputType | null
    _min: StepExecutionMinAggregateOutputType | null
    _max: StepExecutionMaxAggregateOutputType | null
  }

  type GetStepExecutionGroupByPayload<T extends StepExecutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StepExecutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StepExecutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StepExecutionGroupByOutputType[P]>
            : GetScalarType<T[P], StepExecutionGroupByOutputType[P]>
        }
      >
    >


  export type StepExecutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceId?: boolean
    stepId?: boolean
    stepType?: boolean
    status?: boolean
    input?: boolean
    output?: boolean
    error?: boolean
    duration?: boolean
    retryCount?: boolean
    startedAt?: boolean
    completedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    instance?: boolean | WorkflowInstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stepExecution"]>

  export type StepExecutionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceId?: boolean
    stepId?: boolean
    stepType?: boolean
    status?: boolean
    input?: boolean
    output?: boolean
    error?: boolean
    duration?: boolean
    retryCount?: boolean
    startedAt?: boolean
    completedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    instance?: boolean | WorkflowInstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stepExecution"]>

  export type StepExecutionSelectScalar = {
    id?: boolean
    instanceId?: boolean
    stepId?: boolean
    stepType?: boolean
    status?: boolean
    input?: boolean
    output?: boolean
    error?: boolean
    duration?: boolean
    retryCount?: boolean
    startedAt?: boolean
    completedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StepExecutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instance?: boolean | WorkflowInstanceDefaultArgs<ExtArgs>
  }
  export type StepExecutionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instance?: boolean | WorkflowInstanceDefaultArgs<ExtArgs>
  }

  export type $StepExecutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StepExecution"
    objects: {
      instance: Prisma.$WorkflowInstancePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      instanceId: string
      stepId: string
      stepType: string
      status: string
      input: string | null
      output: string | null
      error: string | null
      duration: number
      retryCount: number
      startedAt: Date | null
      completedAt: Date | null
      metadata: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["stepExecution"]>
    composites: {}
  }

  type StepExecutionGetPayload<S extends boolean | null | undefined | StepExecutionDefaultArgs> = $Result.GetResult<Prisma.$StepExecutionPayload, S>

  type StepExecutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StepExecutionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StepExecutionCountAggregateInputType | true
    }

  export interface StepExecutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StepExecution'], meta: { name: 'StepExecution' } }
    /**
     * Find zero or one StepExecution that matches the filter.
     * @param {StepExecutionFindUniqueArgs} args - Arguments to find a StepExecution
     * @example
     * // Get one StepExecution
     * const stepExecution = await prisma.stepExecution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StepExecutionFindUniqueArgs>(args: SelectSubset<T, StepExecutionFindUniqueArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StepExecution that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StepExecutionFindUniqueOrThrowArgs} args - Arguments to find a StepExecution
     * @example
     * // Get one StepExecution
     * const stepExecution = await prisma.stepExecution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StepExecutionFindUniqueOrThrowArgs>(args: SelectSubset<T, StepExecutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StepExecution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepExecutionFindFirstArgs} args - Arguments to find a StepExecution
     * @example
     * // Get one StepExecution
     * const stepExecution = await prisma.stepExecution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StepExecutionFindFirstArgs>(args?: SelectSubset<T, StepExecutionFindFirstArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StepExecution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepExecutionFindFirstOrThrowArgs} args - Arguments to find a StepExecution
     * @example
     * // Get one StepExecution
     * const stepExecution = await prisma.stepExecution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StepExecutionFindFirstOrThrowArgs>(args?: SelectSubset<T, StepExecutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StepExecutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepExecutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StepExecutions
     * const stepExecutions = await prisma.stepExecution.findMany()
     * 
     * // Get first 10 StepExecutions
     * const stepExecutions = await prisma.stepExecution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stepExecutionWithIdOnly = await prisma.stepExecution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StepExecutionFindManyArgs>(args?: SelectSubset<T, StepExecutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StepExecution.
     * @param {StepExecutionCreateArgs} args - Arguments to create a StepExecution.
     * @example
     * // Create one StepExecution
     * const StepExecution = await prisma.stepExecution.create({
     *   data: {
     *     // ... data to create a StepExecution
     *   }
     * })
     * 
     */
    create<T extends StepExecutionCreateArgs>(args: SelectSubset<T, StepExecutionCreateArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StepExecutions.
     * @param {StepExecutionCreateManyArgs} args - Arguments to create many StepExecutions.
     * @example
     * // Create many StepExecutions
     * const stepExecution = await prisma.stepExecution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StepExecutionCreateManyArgs>(args?: SelectSubset<T, StepExecutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StepExecutions and returns the data saved in the database.
     * @param {StepExecutionCreateManyAndReturnArgs} args - Arguments to create many StepExecutions.
     * @example
     * // Create many StepExecutions
     * const stepExecution = await prisma.stepExecution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StepExecutions and only return the `id`
     * const stepExecutionWithIdOnly = await prisma.stepExecution.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StepExecutionCreateManyAndReturnArgs>(args?: SelectSubset<T, StepExecutionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StepExecution.
     * @param {StepExecutionDeleteArgs} args - Arguments to delete one StepExecution.
     * @example
     * // Delete one StepExecution
     * const StepExecution = await prisma.stepExecution.delete({
     *   where: {
     *     // ... filter to delete one StepExecution
     *   }
     * })
     * 
     */
    delete<T extends StepExecutionDeleteArgs>(args: SelectSubset<T, StepExecutionDeleteArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StepExecution.
     * @param {StepExecutionUpdateArgs} args - Arguments to update one StepExecution.
     * @example
     * // Update one StepExecution
     * const stepExecution = await prisma.stepExecution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StepExecutionUpdateArgs>(args: SelectSubset<T, StepExecutionUpdateArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StepExecutions.
     * @param {StepExecutionDeleteManyArgs} args - Arguments to filter StepExecutions to delete.
     * @example
     * // Delete a few StepExecutions
     * const { count } = await prisma.stepExecution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StepExecutionDeleteManyArgs>(args?: SelectSubset<T, StepExecutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StepExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepExecutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StepExecutions
     * const stepExecution = await prisma.stepExecution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StepExecutionUpdateManyArgs>(args: SelectSubset<T, StepExecutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StepExecution.
     * @param {StepExecutionUpsertArgs} args - Arguments to update or create a StepExecution.
     * @example
     * // Update or create a StepExecution
     * const stepExecution = await prisma.stepExecution.upsert({
     *   create: {
     *     // ... data to create a StepExecution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StepExecution we want to update
     *   }
     * })
     */
    upsert<T extends StepExecutionUpsertArgs>(args: SelectSubset<T, StepExecutionUpsertArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StepExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepExecutionCountArgs} args - Arguments to filter StepExecutions to count.
     * @example
     * // Count the number of StepExecutions
     * const count = await prisma.stepExecution.count({
     *   where: {
     *     // ... the filter for the StepExecutions we want to count
     *   }
     * })
    **/
    count<T extends StepExecutionCountArgs>(
      args?: Subset<T, StepExecutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StepExecutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StepExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepExecutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StepExecutionAggregateArgs>(args: Subset<T, StepExecutionAggregateArgs>): Prisma.PrismaPromise<GetStepExecutionAggregateType<T>>

    /**
     * Group by StepExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepExecutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StepExecutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StepExecutionGroupByArgs['orderBy'] }
        : { orderBy?: StepExecutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StepExecutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStepExecutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StepExecution model
   */
  readonly fields: StepExecutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StepExecution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StepExecutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    instance<T extends WorkflowInstanceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowInstanceDefaultArgs<ExtArgs>>): Prisma__WorkflowInstanceClient<$Result.GetResult<Prisma.$WorkflowInstancePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StepExecution model
   */ 
  interface StepExecutionFieldRefs {
    readonly id: FieldRef<"StepExecution", 'String'>
    readonly instanceId: FieldRef<"StepExecution", 'String'>
    readonly stepId: FieldRef<"StepExecution", 'String'>
    readonly stepType: FieldRef<"StepExecution", 'String'>
    readonly status: FieldRef<"StepExecution", 'String'>
    readonly input: FieldRef<"StepExecution", 'String'>
    readonly output: FieldRef<"StepExecution", 'String'>
    readonly error: FieldRef<"StepExecution", 'String'>
    readonly duration: FieldRef<"StepExecution", 'Int'>
    readonly retryCount: FieldRef<"StepExecution", 'Int'>
    readonly startedAt: FieldRef<"StepExecution", 'DateTime'>
    readonly completedAt: FieldRef<"StepExecution", 'DateTime'>
    readonly metadata: FieldRef<"StepExecution", 'String'>
    readonly createdAt: FieldRef<"StepExecution", 'DateTime'>
    readonly updatedAt: FieldRef<"StepExecution", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StepExecution findUnique
   */
  export type StepExecutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * Filter, which StepExecution to fetch.
     */
    where: StepExecutionWhereUniqueInput
  }

  /**
   * StepExecution findUniqueOrThrow
   */
  export type StepExecutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * Filter, which StepExecution to fetch.
     */
    where: StepExecutionWhereUniqueInput
  }

  /**
   * StepExecution findFirst
   */
  export type StepExecutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * Filter, which StepExecution to fetch.
     */
    where?: StepExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StepExecutions to fetch.
     */
    orderBy?: StepExecutionOrderByWithRelationInput | StepExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StepExecutions.
     */
    cursor?: StepExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StepExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StepExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StepExecutions.
     */
    distinct?: StepExecutionScalarFieldEnum | StepExecutionScalarFieldEnum[]
  }

  /**
   * StepExecution findFirstOrThrow
   */
  export type StepExecutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * Filter, which StepExecution to fetch.
     */
    where?: StepExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StepExecutions to fetch.
     */
    orderBy?: StepExecutionOrderByWithRelationInput | StepExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StepExecutions.
     */
    cursor?: StepExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StepExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StepExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StepExecutions.
     */
    distinct?: StepExecutionScalarFieldEnum | StepExecutionScalarFieldEnum[]
  }

  /**
   * StepExecution findMany
   */
  export type StepExecutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * Filter, which StepExecutions to fetch.
     */
    where?: StepExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StepExecutions to fetch.
     */
    orderBy?: StepExecutionOrderByWithRelationInput | StepExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StepExecutions.
     */
    cursor?: StepExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StepExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StepExecutions.
     */
    skip?: number
    distinct?: StepExecutionScalarFieldEnum | StepExecutionScalarFieldEnum[]
  }

  /**
   * StepExecution create
   */
  export type StepExecutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * The data needed to create a StepExecution.
     */
    data: XOR<StepExecutionCreateInput, StepExecutionUncheckedCreateInput>
  }

  /**
   * StepExecution createMany
   */
  export type StepExecutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StepExecutions.
     */
    data: StepExecutionCreateManyInput | StepExecutionCreateManyInput[]
  }

  /**
   * StepExecution createManyAndReturn
   */
  export type StepExecutionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StepExecutions.
     */
    data: StepExecutionCreateManyInput | StepExecutionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StepExecution update
   */
  export type StepExecutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * The data needed to update a StepExecution.
     */
    data: XOR<StepExecutionUpdateInput, StepExecutionUncheckedUpdateInput>
    /**
     * Choose, which StepExecution to update.
     */
    where: StepExecutionWhereUniqueInput
  }

  /**
   * StepExecution updateMany
   */
  export type StepExecutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StepExecutions.
     */
    data: XOR<StepExecutionUpdateManyMutationInput, StepExecutionUncheckedUpdateManyInput>
    /**
     * Filter which StepExecutions to update
     */
    where?: StepExecutionWhereInput
  }

  /**
   * StepExecution upsert
   */
  export type StepExecutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * The filter to search for the StepExecution to update in case it exists.
     */
    where: StepExecutionWhereUniqueInput
    /**
     * In case the StepExecution found by the `where` argument doesn't exist, create a new StepExecution with this data.
     */
    create: XOR<StepExecutionCreateInput, StepExecutionUncheckedCreateInput>
    /**
     * In case the StepExecution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StepExecutionUpdateInput, StepExecutionUncheckedUpdateInput>
  }

  /**
   * StepExecution delete
   */
  export type StepExecutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * Filter which StepExecution to delete.
     */
    where: StepExecutionWhereUniqueInput
  }

  /**
   * StepExecution deleteMany
   */
  export type StepExecutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StepExecutions to delete
     */
    where?: StepExecutionWhereInput
  }

  /**
   * StepExecution without action
   */
  export type StepExecutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
  }


  /**
   * Model WorkflowLog
   */

  export type AggregateWorkflowLog = {
    _count: WorkflowLogCountAggregateOutputType | null
    _min: WorkflowLogMinAggregateOutputType | null
    _max: WorkflowLogMaxAggregateOutputType | null
  }

  export type WorkflowLogMinAggregateOutputType = {
    id: string | null
    instanceId: string | null
    level: string | null
    message: string | null
    data: string | null
    stepId: string | null
    timestamp: Date | null
  }

  export type WorkflowLogMaxAggregateOutputType = {
    id: string | null
    instanceId: string | null
    level: string | null
    message: string | null
    data: string | null
    stepId: string | null
    timestamp: Date | null
  }

  export type WorkflowLogCountAggregateOutputType = {
    id: number
    instanceId: number
    level: number
    message: number
    data: number
    stepId: number
    timestamp: number
    _all: number
  }


  export type WorkflowLogMinAggregateInputType = {
    id?: true
    instanceId?: true
    level?: true
    message?: true
    data?: true
    stepId?: true
    timestamp?: true
  }

  export type WorkflowLogMaxAggregateInputType = {
    id?: true
    instanceId?: true
    level?: true
    message?: true
    data?: true
    stepId?: true
    timestamp?: true
  }

  export type WorkflowLogCountAggregateInputType = {
    id?: true
    instanceId?: true
    level?: true
    message?: true
    data?: true
    stepId?: true
    timestamp?: true
    _all?: true
  }

  export type WorkflowLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowLog to aggregate.
     */
    where?: WorkflowLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowLogs to fetch.
     */
    orderBy?: WorkflowLogOrderByWithRelationInput | WorkflowLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkflowLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkflowLogs
    **/
    _count?: true | WorkflowLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowLogMaxAggregateInputType
  }

  export type GetWorkflowLogAggregateType<T extends WorkflowLogAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflowLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflowLog[P]>
      : GetScalarType<T[P], AggregateWorkflowLog[P]>
  }




  export type WorkflowLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowLogWhereInput
    orderBy?: WorkflowLogOrderByWithAggregationInput | WorkflowLogOrderByWithAggregationInput[]
    by: WorkflowLogScalarFieldEnum[] | WorkflowLogScalarFieldEnum
    having?: WorkflowLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowLogCountAggregateInputType | true
    _min?: WorkflowLogMinAggregateInputType
    _max?: WorkflowLogMaxAggregateInputType
  }

  export type WorkflowLogGroupByOutputType = {
    id: string
    instanceId: string
    level: string
    message: string
    data: string | null
    stepId: string | null
    timestamp: Date
    _count: WorkflowLogCountAggregateOutputType | null
    _min: WorkflowLogMinAggregateOutputType | null
    _max: WorkflowLogMaxAggregateOutputType | null
  }

  type GetWorkflowLogGroupByPayload<T extends WorkflowLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkflowLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowLogGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowLogGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceId?: boolean
    level?: boolean
    message?: boolean
    data?: boolean
    stepId?: boolean
    timestamp?: boolean
    instance?: boolean | WorkflowInstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowLog"]>

  export type WorkflowLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceId?: boolean
    level?: boolean
    message?: boolean
    data?: boolean
    stepId?: boolean
    timestamp?: boolean
    instance?: boolean | WorkflowInstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowLog"]>

  export type WorkflowLogSelectScalar = {
    id?: boolean
    instanceId?: boolean
    level?: boolean
    message?: boolean
    data?: boolean
    stepId?: boolean
    timestamp?: boolean
  }

  export type WorkflowLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instance?: boolean | WorkflowInstanceDefaultArgs<ExtArgs>
  }
  export type WorkflowLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instance?: boolean | WorkflowInstanceDefaultArgs<ExtArgs>
  }

  export type $WorkflowLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkflowLog"
    objects: {
      instance: Prisma.$WorkflowInstancePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      instanceId: string
      level: string
      message: string
      data: string | null
      stepId: string | null
      timestamp: Date
    }, ExtArgs["result"]["workflowLog"]>
    composites: {}
  }

  type WorkflowLogGetPayload<S extends boolean | null | undefined | WorkflowLogDefaultArgs> = $Result.GetResult<Prisma.$WorkflowLogPayload, S>

  type WorkflowLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkflowLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkflowLogCountAggregateInputType | true
    }

  export interface WorkflowLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkflowLog'], meta: { name: 'WorkflowLog' } }
    /**
     * Find zero or one WorkflowLog that matches the filter.
     * @param {WorkflowLogFindUniqueArgs} args - Arguments to find a WorkflowLog
     * @example
     * // Get one WorkflowLog
     * const workflowLog = await prisma.workflowLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkflowLogFindUniqueArgs>(args: SelectSubset<T, WorkflowLogFindUniqueArgs<ExtArgs>>): Prisma__WorkflowLogClient<$Result.GetResult<Prisma.$WorkflowLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkflowLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkflowLogFindUniqueOrThrowArgs} args - Arguments to find a WorkflowLog
     * @example
     * // Get one WorkflowLog
     * const workflowLog = await prisma.workflowLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkflowLogFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkflowLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkflowLogClient<$Result.GetResult<Prisma.$WorkflowLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkflowLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowLogFindFirstArgs} args - Arguments to find a WorkflowLog
     * @example
     * // Get one WorkflowLog
     * const workflowLog = await prisma.workflowLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkflowLogFindFirstArgs>(args?: SelectSubset<T, WorkflowLogFindFirstArgs<ExtArgs>>): Prisma__WorkflowLogClient<$Result.GetResult<Prisma.$WorkflowLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkflowLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowLogFindFirstOrThrowArgs} args - Arguments to find a WorkflowLog
     * @example
     * // Get one WorkflowLog
     * const workflowLog = await prisma.workflowLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkflowLogFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkflowLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkflowLogClient<$Result.GetResult<Prisma.$WorkflowLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkflowLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkflowLogs
     * const workflowLogs = await prisma.workflowLog.findMany()
     * 
     * // Get first 10 WorkflowLogs
     * const workflowLogs = await prisma.workflowLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowLogWithIdOnly = await prisma.workflowLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkflowLogFindManyArgs>(args?: SelectSubset<T, WorkflowLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkflowLog.
     * @param {WorkflowLogCreateArgs} args - Arguments to create a WorkflowLog.
     * @example
     * // Create one WorkflowLog
     * const WorkflowLog = await prisma.workflowLog.create({
     *   data: {
     *     // ... data to create a WorkflowLog
     *   }
     * })
     * 
     */
    create<T extends WorkflowLogCreateArgs>(args: SelectSubset<T, WorkflowLogCreateArgs<ExtArgs>>): Prisma__WorkflowLogClient<$Result.GetResult<Prisma.$WorkflowLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkflowLogs.
     * @param {WorkflowLogCreateManyArgs} args - Arguments to create many WorkflowLogs.
     * @example
     * // Create many WorkflowLogs
     * const workflowLog = await prisma.workflowLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkflowLogCreateManyArgs>(args?: SelectSubset<T, WorkflowLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkflowLogs and returns the data saved in the database.
     * @param {WorkflowLogCreateManyAndReturnArgs} args - Arguments to create many WorkflowLogs.
     * @example
     * // Create many WorkflowLogs
     * const workflowLog = await prisma.workflowLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkflowLogs and only return the `id`
     * const workflowLogWithIdOnly = await prisma.workflowLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkflowLogCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkflowLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkflowLog.
     * @param {WorkflowLogDeleteArgs} args - Arguments to delete one WorkflowLog.
     * @example
     * // Delete one WorkflowLog
     * const WorkflowLog = await prisma.workflowLog.delete({
     *   where: {
     *     // ... filter to delete one WorkflowLog
     *   }
     * })
     * 
     */
    delete<T extends WorkflowLogDeleteArgs>(args: SelectSubset<T, WorkflowLogDeleteArgs<ExtArgs>>): Prisma__WorkflowLogClient<$Result.GetResult<Prisma.$WorkflowLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkflowLog.
     * @param {WorkflowLogUpdateArgs} args - Arguments to update one WorkflowLog.
     * @example
     * // Update one WorkflowLog
     * const workflowLog = await prisma.workflowLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkflowLogUpdateArgs>(args: SelectSubset<T, WorkflowLogUpdateArgs<ExtArgs>>): Prisma__WorkflowLogClient<$Result.GetResult<Prisma.$WorkflowLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkflowLogs.
     * @param {WorkflowLogDeleteManyArgs} args - Arguments to filter WorkflowLogs to delete.
     * @example
     * // Delete a few WorkflowLogs
     * const { count } = await prisma.workflowLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkflowLogDeleteManyArgs>(args?: SelectSubset<T, WorkflowLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkflowLogs
     * const workflowLog = await prisma.workflowLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkflowLogUpdateManyArgs>(args: SelectSubset<T, WorkflowLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkflowLog.
     * @param {WorkflowLogUpsertArgs} args - Arguments to update or create a WorkflowLog.
     * @example
     * // Update or create a WorkflowLog
     * const workflowLog = await prisma.workflowLog.upsert({
     *   create: {
     *     // ... data to create a WorkflowLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkflowLog we want to update
     *   }
     * })
     */
    upsert<T extends WorkflowLogUpsertArgs>(args: SelectSubset<T, WorkflowLogUpsertArgs<ExtArgs>>): Prisma__WorkflowLogClient<$Result.GetResult<Prisma.$WorkflowLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkflowLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowLogCountArgs} args - Arguments to filter WorkflowLogs to count.
     * @example
     * // Count the number of WorkflowLogs
     * const count = await prisma.workflowLog.count({
     *   where: {
     *     // ... the filter for the WorkflowLogs we want to count
     *   }
     * })
    **/
    count<T extends WorkflowLogCountArgs>(
      args?: Subset<T, WorkflowLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkflowLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowLogAggregateArgs>(args: Subset<T, WorkflowLogAggregateArgs>): Prisma.PrismaPromise<GetWorkflowLogAggregateType<T>>

    /**
     * Group by WorkflowLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowLogGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkflowLog model
   */
  readonly fields: WorkflowLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkflowLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkflowLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    instance<T extends WorkflowInstanceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowInstanceDefaultArgs<ExtArgs>>): Prisma__WorkflowInstanceClient<$Result.GetResult<Prisma.$WorkflowInstancePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkflowLog model
   */ 
  interface WorkflowLogFieldRefs {
    readonly id: FieldRef<"WorkflowLog", 'String'>
    readonly instanceId: FieldRef<"WorkflowLog", 'String'>
    readonly level: FieldRef<"WorkflowLog", 'String'>
    readonly message: FieldRef<"WorkflowLog", 'String'>
    readonly data: FieldRef<"WorkflowLog", 'String'>
    readonly stepId: FieldRef<"WorkflowLog", 'String'>
    readonly timestamp: FieldRef<"WorkflowLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkflowLog findUnique
   */
  export type WorkflowLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowLog
     */
    select?: WorkflowLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowLog to fetch.
     */
    where: WorkflowLogWhereUniqueInput
  }

  /**
   * WorkflowLog findUniqueOrThrow
   */
  export type WorkflowLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowLog
     */
    select?: WorkflowLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowLog to fetch.
     */
    where: WorkflowLogWhereUniqueInput
  }

  /**
   * WorkflowLog findFirst
   */
  export type WorkflowLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowLog
     */
    select?: WorkflowLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowLog to fetch.
     */
    where?: WorkflowLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowLogs to fetch.
     */
    orderBy?: WorkflowLogOrderByWithRelationInput | WorkflowLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowLogs.
     */
    cursor?: WorkflowLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowLogs.
     */
    distinct?: WorkflowLogScalarFieldEnum | WorkflowLogScalarFieldEnum[]
  }

  /**
   * WorkflowLog findFirstOrThrow
   */
  export type WorkflowLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowLog
     */
    select?: WorkflowLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowLog to fetch.
     */
    where?: WorkflowLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowLogs to fetch.
     */
    orderBy?: WorkflowLogOrderByWithRelationInput | WorkflowLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowLogs.
     */
    cursor?: WorkflowLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowLogs.
     */
    distinct?: WorkflowLogScalarFieldEnum | WorkflowLogScalarFieldEnum[]
  }

  /**
   * WorkflowLog findMany
   */
  export type WorkflowLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowLog
     */
    select?: WorkflowLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowLogs to fetch.
     */
    where?: WorkflowLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowLogs to fetch.
     */
    orderBy?: WorkflowLogOrderByWithRelationInput | WorkflowLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkflowLogs.
     */
    cursor?: WorkflowLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowLogs.
     */
    skip?: number
    distinct?: WorkflowLogScalarFieldEnum | WorkflowLogScalarFieldEnum[]
  }

  /**
   * WorkflowLog create
   */
  export type WorkflowLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowLog
     */
    select?: WorkflowLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowLogInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkflowLog.
     */
    data: XOR<WorkflowLogCreateInput, WorkflowLogUncheckedCreateInput>
  }

  /**
   * WorkflowLog createMany
   */
  export type WorkflowLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkflowLogs.
     */
    data: WorkflowLogCreateManyInput | WorkflowLogCreateManyInput[]
  }

  /**
   * WorkflowLog createManyAndReturn
   */
  export type WorkflowLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowLog
     */
    select?: WorkflowLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkflowLogs.
     */
    data: WorkflowLogCreateManyInput | WorkflowLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowLog update
   */
  export type WorkflowLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowLog
     */
    select?: WorkflowLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowLogInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkflowLog.
     */
    data: XOR<WorkflowLogUpdateInput, WorkflowLogUncheckedUpdateInput>
    /**
     * Choose, which WorkflowLog to update.
     */
    where: WorkflowLogWhereUniqueInput
  }

  /**
   * WorkflowLog updateMany
   */
  export type WorkflowLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkflowLogs.
     */
    data: XOR<WorkflowLogUpdateManyMutationInput, WorkflowLogUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowLogs to update
     */
    where?: WorkflowLogWhereInput
  }

  /**
   * WorkflowLog upsert
   */
  export type WorkflowLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowLog
     */
    select?: WorkflowLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowLogInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkflowLog to update in case it exists.
     */
    where: WorkflowLogWhereUniqueInput
    /**
     * In case the WorkflowLog found by the `where` argument doesn't exist, create a new WorkflowLog with this data.
     */
    create: XOR<WorkflowLogCreateInput, WorkflowLogUncheckedCreateInput>
    /**
     * In case the WorkflowLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkflowLogUpdateInput, WorkflowLogUncheckedUpdateInput>
  }

  /**
   * WorkflowLog delete
   */
  export type WorkflowLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowLog
     */
    select?: WorkflowLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowLogInclude<ExtArgs> | null
    /**
     * Filter which WorkflowLog to delete.
     */
    where: WorkflowLogWhereUniqueInput
  }

  /**
   * WorkflowLog deleteMany
   */
  export type WorkflowLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowLogs to delete
     */
    where?: WorkflowLogWhereInput
  }

  /**
   * WorkflowLog without action
   */
  export type WorkflowLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowLog
     */
    select?: WorkflowLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowLogInclude<ExtArgs> | null
  }


  /**
   * Model WorkflowTemplate
   */

  export type AggregateWorkflowTemplate = {
    _count: WorkflowTemplateCountAggregateOutputType | null
    _avg: WorkflowTemplateAvgAggregateOutputType | null
    _sum: WorkflowTemplateSumAggregateOutputType | null
    _min: WorkflowTemplateMinAggregateOutputType | null
    _max: WorkflowTemplateMaxAggregateOutputType | null
  }

  export type WorkflowTemplateAvgAggregateOutputType = {
    usageCount: number | null
    rating: number | null
    ratingCount: number | null
  }

  export type WorkflowTemplateSumAggregateOutputType = {
    usageCount: number | null
    rating: number | null
    ratingCount: number | null
  }

  export type WorkflowTemplateMinAggregateOutputType = {
    id: string | null
    workflowId: string | null
    name: string | null
    description: string | null
    category: string | null
    tags: string | null
    isOfficial: boolean | null
    usageCount: number | null
    rating: number | null
    ratingCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkflowTemplateMaxAggregateOutputType = {
    id: string | null
    workflowId: string | null
    name: string | null
    description: string | null
    category: string | null
    tags: string | null
    isOfficial: boolean | null
    usageCount: number | null
    rating: number | null
    ratingCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkflowTemplateCountAggregateOutputType = {
    id: number
    workflowId: number
    name: number
    description: number
    category: number
    tags: number
    isOfficial: number
    usageCount: number
    rating: number
    ratingCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkflowTemplateAvgAggregateInputType = {
    usageCount?: true
    rating?: true
    ratingCount?: true
  }

  export type WorkflowTemplateSumAggregateInputType = {
    usageCount?: true
    rating?: true
    ratingCount?: true
  }

  export type WorkflowTemplateMinAggregateInputType = {
    id?: true
    workflowId?: true
    name?: true
    description?: true
    category?: true
    tags?: true
    isOfficial?: true
    usageCount?: true
    rating?: true
    ratingCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkflowTemplateMaxAggregateInputType = {
    id?: true
    workflowId?: true
    name?: true
    description?: true
    category?: true
    tags?: true
    isOfficial?: true
    usageCount?: true
    rating?: true
    ratingCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkflowTemplateCountAggregateInputType = {
    id?: true
    workflowId?: true
    name?: true
    description?: true
    category?: true
    tags?: true
    isOfficial?: true
    usageCount?: true
    rating?: true
    ratingCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkflowTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowTemplate to aggregate.
     */
    where?: WorkflowTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowTemplates to fetch.
     */
    orderBy?: WorkflowTemplateOrderByWithRelationInput | WorkflowTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkflowTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkflowTemplates
    **/
    _count?: true | WorkflowTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkflowTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkflowTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowTemplateMaxAggregateInputType
  }

  export type GetWorkflowTemplateAggregateType<T extends WorkflowTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflowTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflowTemplate[P]>
      : GetScalarType<T[P], AggregateWorkflowTemplate[P]>
  }




  export type WorkflowTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowTemplateWhereInput
    orderBy?: WorkflowTemplateOrderByWithAggregationInput | WorkflowTemplateOrderByWithAggregationInput[]
    by: WorkflowTemplateScalarFieldEnum[] | WorkflowTemplateScalarFieldEnum
    having?: WorkflowTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowTemplateCountAggregateInputType | true
    _avg?: WorkflowTemplateAvgAggregateInputType
    _sum?: WorkflowTemplateSumAggregateInputType
    _min?: WorkflowTemplateMinAggregateInputType
    _max?: WorkflowTemplateMaxAggregateInputType
  }

  export type WorkflowTemplateGroupByOutputType = {
    id: string
    workflowId: string
    name: string
    description: string | null
    category: string
    tags: string
    isOfficial: boolean
    usageCount: number
    rating: number
    ratingCount: number
    createdAt: Date
    updatedAt: Date
    _count: WorkflowTemplateCountAggregateOutputType | null
    _avg: WorkflowTemplateAvgAggregateOutputType | null
    _sum: WorkflowTemplateSumAggregateOutputType | null
    _min: WorkflowTemplateMinAggregateOutputType | null
    _max: WorkflowTemplateMaxAggregateOutputType | null
  }

  type GetWorkflowTemplateGroupByPayload<T extends WorkflowTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkflowTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowTemplateGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowId?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    tags?: boolean
    isOfficial?: boolean
    usageCount?: boolean
    rating?: boolean
    ratingCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowTemplate"]>

  export type WorkflowTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowId?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    tags?: boolean
    isOfficial?: boolean
    usageCount?: boolean
    rating?: boolean
    ratingCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowTemplate"]>

  export type WorkflowTemplateSelectScalar = {
    id?: boolean
    workflowId?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    tags?: boolean
    isOfficial?: boolean
    usageCount?: boolean
    rating?: boolean
    ratingCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkflowTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }
  export type WorkflowTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }

  export type $WorkflowTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkflowTemplate"
    objects: {
      workflow: Prisma.$WorkflowPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workflowId: string
      name: string
      description: string | null
      category: string
      tags: string
      isOfficial: boolean
      usageCount: number
      rating: number
      ratingCount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workflowTemplate"]>
    composites: {}
  }

  type WorkflowTemplateGetPayload<S extends boolean | null | undefined | WorkflowTemplateDefaultArgs> = $Result.GetResult<Prisma.$WorkflowTemplatePayload, S>

  type WorkflowTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkflowTemplateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkflowTemplateCountAggregateInputType | true
    }

  export interface WorkflowTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkflowTemplate'], meta: { name: 'WorkflowTemplate' } }
    /**
     * Find zero or one WorkflowTemplate that matches the filter.
     * @param {WorkflowTemplateFindUniqueArgs} args - Arguments to find a WorkflowTemplate
     * @example
     * // Get one WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkflowTemplateFindUniqueArgs>(args: SelectSubset<T, WorkflowTemplateFindUniqueArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkflowTemplate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkflowTemplateFindUniqueOrThrowArgs} args - Arguments to find a WorkflowTemplate
     * @example
     * // Get one WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkflowTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkflowTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkflowTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateFindFirstArgs} args - Arguments to find a WorkflowTemplate
     * @example
     * // Get one WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkflowTemplateFindFirstArgs>(args?: SelectSubset<T, WorkflowTemplateFindFirstArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkflowTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateFindFirstOrThrowArgs} args - Arguments to find a WorkflowTemplate
     * @example
     * // Get one WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkflowTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkflowTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkflowTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkflowTemplates
     * const workflowTemplates = await prisma.workflowTemplate.findMany()
     * 
     * // Get first 10 WorkflowTemplates
     * const workflowTemplates = await prisma.workflowTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowTemplateWithIdOnly = await prisma.workflowTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkflowTemplateFindManyArgs>(args?: SelectSubset<T, WorkflowTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkflowTemplate.
     * @param {WorkflowTemplateCreateArgs} args - Arguments to create a WorkflowTemplate.
     * @example
     * // Create one WorkflowTemplate
     * const WorkflowTemplate = await prisma.workflowTemplate.create({
     *   data: {
     *     // ... data to create a WorkflowTemplate
     *   }
     * })
     * 
     */
    create<T extends WorkflowTemplateCreateArgs>(args: SelectSubset<T, WorkflowTemplateCreateArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkflowTemplates.
     * @param {WorkflowTemplateCreateManyArgs} args - Arguments to create many WorkflowTemplates.
     * @example
     * // Create many WorkflowTemplates
     * const workflowTemplate = await prisma.workflowTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkflowTemplateCreateManyArgs>(args?: SelectSubset<T, WorkflowTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkflowTemplates and returns the data saved in the database.
     * @param {WorkflowTemplateCreateManyAndReturnArgs} args - Arguments to create many WorkflowTemplates.
     * @example
     * // Create many WorkflowTemplates
     * const workflowTemplate = await prisma.workflowTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkflowTemplates and only return the `id`
     * const workflowTemplateWithIdOnly = await prisma.workflowTemplate.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkflowTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkflowTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkflowTemplate.
     * @param {WorkflowTemplateDeleteArgs} args - Arguments to delete one WorkflowTemplate.
     * @example
     * // Delete one WorkflowTemplate
     * const WorkflowTemplate = await prisma.workflowTemplate.delete({
     *   where: {
     *     // ... filter to delete one WorkflowTemplate
     *   }
     * })
     * 
     */
    delete<T extends WorkflowTemplateDeleteArgs>(args: SelectSubset<T, WorkflowTemplateDeleteArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkflowTemplate.
     * @param {WorkflowTemplateUpdateArgs} args - Arguments to update one WorkflowTemplate.
     * @example
     * // Update one WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkflowTemplateUpdateArgs>(args: SelectSubset<T, WorkflowTemplateUpdateArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkflowTemplates.
     * @param {WorkflowTemplateDeleteManyArgs} args - Arguments to filter WorkflowTemplates to delete.
     * @example
     * // Delete a few WorkflowTemplates
     * const { count } = await prisma.workflowTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkflowTemplateDeleteManyArgs>(args?: SelectSubset<T, WorkflowTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkflowTemplates
     * const workflowTemplate = await prisma.workflowTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkflowTemplateUpdateManyArgs>(args: SelectSubset<T, WorkflowTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkflowTemplate.
     * @param {WorkflowTemplateUpsertArgs} args - Arguments to update or create a WorkflowTemplate.
     * @example
     * // Update or create a WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.upsert({
     *   create: {
     *     // ... data to create a WorkflowTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkflowTemplate we want to update
     *   }
     * })
     */
    upsert<T extends WorkflowTemplateUpsertArgs>(args: SelectSubset<T, WorkflowTemplateUpsertArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkflowTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateCountArgs} args - Arguments to filter WorkflowTemplates to count.
     * @example
     * // Count the number of WorkflowTemplates
     * const count = await prisma.workflowTemplate.count({
     *   where: {
     *     // ... the filter for the WorkflowTemplates we want to count
     *   }
     * })
    **/
    count<T extends WorkflowTemplateCountArgs>(
      args?: Subset<T, WorkflowTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkflowTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowTemplateAggregateArgs>(args: Subset<T, WorkflowTemplateAggregateArgs>): Prisma.PrismaPromise<GetWorkflowTemplateAggregateType<T>>

    /**
     * Group by WorkflowTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowTemplateGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkflowTemplate model
   */
  readonly fields: WorkflowTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkflowTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkflowTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workflow<T extends WorkflowDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowDefaultArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkflowTemplate model
   */ 
  interface WorkflowTemplateFieldRefs {
    readonly id: FieldRef<"WorkflowTemplate", 'String'>
    readonly workflowId: FieldRef<"WorkflowTemplate", 'String'>
    readonly name: FieldRef<"WorkflowTemplate", 'String'>
    readonly description: FieldRef<"WorkflowTemplate", 'String'>
    readonly category: FieldRef<"WorkflowTemplate", 'String'>
    readonly tags: FieldRef<"WorkflowTemplate", 'String'>
    readonly isOfficial: FieldRef<"WorkflowTemplate", 'Boolean'>
    readonly usageCount: FieldRef<"WorkflowTemplate", 'Int'>
    readonly rating: FieldRef<"WorkflowTemplate", 'Float'>
    readonly ratingCount: FieldRef<"WorkflowTemplate", 'Int'>
    readonly createdAt: FieldRef<"WorkflowTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkflowTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkflowTemplate findUnique
   */
  export type WorkflowTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowTemplate to fetch.
     */
    where: WorkflowTemplateWhereUniqueInput
  }

  /**
   * WorkflowTemplate findUniqueOrThrow
   */
  export type WorkflowTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowTemplate to fetch.
     */
    where: WorkflowTemplateWhereUniqueInput
  }

  /**
   * WorkflowTemplate findFirst
   */
  export type WorkflowTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowTemplate to fetch.
     */
    where?: WorkflowTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowTemplates to fetch.
     */
    orderBy?: WorkflowTemplateOrderByWithRelationInput | WorkflowTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowTemplates.
     */
    cursor?: WorkflowTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowTemplates.
     */
    distinct?: WorkflowTemplateScalarFieldEnum | WorkflowTemplateScalarFieldEnum[]
  }

  /**
   * WorkflowTemplate findFirstOrThrow
   */
  export type WorkflowTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowTemplate to fetch.
     */
    where?: WorkflowTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowTemplates to fetch.
     */
    orderBy?: WorkflowTemplateOrderByWithRelationInput | WorkflowTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowTemplates.
     */
    cursor?: WorkflowTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowTemplates.
     */
    distinct?: WorkflowTemplateScalarFieldEnum | WorkflowTemplateScalarFieldEnum[]
  }

  /**
   * WorkflowTemplate findMany
   */
  export type WorkflowTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowTemplates to fetch.
     */
    where?: WorkflowTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowTemplates to fetch.
     */
    orderBy?: WorkflowTemplateOrderByWithRelationInput | WorkflowTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkflowTemplates.
     */
    cursor?: WorkflowTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowTemplates.
     */
    skip?: number
    distinct?: WorkflowTemplateScalarFieldEnum | WorkflowTemplateScalarFieldEnum[]
  }

  /**
   * WorkflowTemplate create
   */
  export type WorkflowTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkflowTemplate.
     */
    data: XOR<WorkflowTemplateCreateInput, WorkflowTemplateUncheckedCreateInput>
  }

  /**
   * WorkflowTemplate createMany
   */
  export type WorkflowTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkflowTemplates.
     */
    data: WorkflowTemplateCreateManyInput | WorkflowTemplateCreateManyInput[]
  }

  /**
   * WorkflowTemplate createManyAndReturn
   */
  export type WorkflowTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkflowTemplates.
     */
    data: WorkflowTemplateCreateManyInput | WorkflowTemplateCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowTemplate update
   */
  export type WorkflowTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkflowTemplate.
     */
    data: XOR<WorkflowTemplateUpdateInput, WorkflowTemplateUncheckedUpdateInput>
    /**
     * Choose, which WorkflowTemplate to update.
     */
    where: WorkflowTemplateWhereUniqueInput
  }

  /**
   * WorkflowTemplate updateMany
   */
  export type WorkflowTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkflowTemplates.
     */
    data: XOR<WorkflowTemplateUpdateManyMutationInput, WorkflowTemplateUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowTemplates to update
     */
    where?: WorkflowTemplateWhereInput
  }

  /**
   * WorkflowTemplate upsert
   */
  export type WorkflowTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkflowTemplate to update in case it exists.
     */
    where: WorkflowTemplateWhereUniqueInput
    /**
     * In case the WorkflowTemplate found by the `where` argument doesn't exist, create a new WorkflowTemplate with this data.
     */
    create: XOR<WorkflowTemplateCreateInput, WorkflowTemplateUncheckedCreateInput>
    /**
     * In case the WorkflowTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkflowTemplateUpdateInput, WorkflowTemplateUncheckedUpdateInput>
  }

  /**
   * WorkflowTemplate delete
   */
  export type WorkflowTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter which WorkflowTemplate to delete.
     */
    where: WorkflowTemplateWhereUniqueInput
  }

  /**
   * WorkflowTemplate deleteMany
   */
  export type WorkflowTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowTemplates to delete
     */
    where?: WorkflowTemplateWhereInput
  }

  /**
   * WorkflowTemplate without action
   */
  export type WorkflowTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
  }


  /**
   * Model WorkflowRating
   */

  export type AggregateWorkflowRating = {
    _count: WorkflowRatingCountAggregateOutputType | null
    _avg: WorkflowRatingAvgAggregateOutputType | null
    _sum: WorkflowRatingSumAggregateOutputType | null
    _min: WorkflowRatingMinAggregateOutputType | null
    _max: WorkflowRatingMaxAggregateOutputType | null
  }

  export type WorkflowRatingAvgAggregateOutputType = {
    rating: number | null
  }

  export type WorkflowRatingSumAggregateOutputType = {
    rating: number | null
  }

  export type WorkflowRatingMinAggregateOutputType = {
    id: string | null
    workflowId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkflowRatingMaxAggregateOutputType = {
    id: string | null
    workflowId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkflowRatingCountAggregateOutputType = {
    id: number
    workflowId: number
    userId: number
    rating: number
    comment: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkflowRatingAvgAggregateInputType = {
    rating?: true
  }

  export type WorkflowRatingSumAggregateInputType = {
    rating?: true
  }

  export type WorkflowRatingMinAggregateInputType = {
    id?: true
    workflowId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkflowRatingMaxAggregateInputType = {
    id?: true
    workflowId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkflowRatingCountAggregateInputType = {
    id?: true
    workflowId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkflowRatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowRating to aggregate.
     */
    where?: WorkflowRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowRatings to fetch.
     */
    orderBy?: WorkflowRatingOrderByWithRelationInput | WorkflowRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkflowRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkflowRatings
    **/
    _count?: true | WorkflowRatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkflowRatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkflowRatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowRatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowRatingMaxAggregateInputType
  }

  export type GetWorkflowRatingAggregateType<T extends WorkflowRatingAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflowRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflowRating[P]>
      : GetScalarType<T[P], AggregateWorkflowRating[P]>
  }




  export type WorkflowRatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowRatingWhereInput
    orderBy?: WorkflowRatingOrderByWithAggregationInput | WorkflowRatingOrderByWithAggregationInput[]
    by: WorkflowRatingScalarFieldEnum[] | WorkflowRatingScalarFieldEnum
    having?: WorkflowRatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowRatingCountAggregateInputType | true
    _avg?: WorkflowRatingAvgAggregateInputType
    _sum?: WorkflowRatingSumAggregateInputType
    _min?: WorkflowRatingMinAggregateInputType
    _max?: WorkflowRatingMaxAggregateInputType
  }

  export type WorkflowRatingGroupByOutputType = {
    id: string
    workflowId: string
    userId: string
    rating: number
    comment: string | null
    createdAt: Date
    updatedAt: Date
    _count: WorkflowRatingCountAggregateOutputType | null
    _avg: WorkflowRatingAvgAggregateOutputType | null
    _sum: WorkflowRatingSumAggregateOutputType | null
    _min: WorkflowRatingMinAggregateOutputType | null
    _max: WorkflowRatingMaxAggregateOutputType | null
  }

  type GetWorkflowRatingGroupByPayload<T extends WorkflowRatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkflowRatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowRatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowRatingGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowRatingGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowRatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowRating"]>

  export type WorkflowRatingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowRating"]>

  export type WorkflowRatingSelectScalar = {
    id?: boolean
    workflowId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkflowRatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WorkflowRatingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WorkflowRatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkflowRating"
    objects: {
      workflow: Prisma.$WorkflowPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workflowId: string
      userId: string
      rating: number
      comment: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workflowRating"]>
    composites: {}
  }

  type WorkflowRatingGetPayload<S extends boolean | null | undefined | WorkflowRatingDefaultArgs> = $Result.GetResult<Prisma.$WorkflowRatingPayload, S>

  type WorkflowRatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkflowRatingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkflowRatingCountAggregateInputType | true
    }

  export interface WorkflowRatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkflowRating'], meta: { name: 'WorkflowRating' } }
    /**
     * Find zero or one WorkflowRating that matches the filter.
     * @param {WorkflowRatingFindUniqueArgs} args - Arguments to find a WorkflowRating
     * @example
     * // Get one WorkflowRating
     * const workflowRating = await prisma.workflowRating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkflowRatingFindUniqueArgs>(args: SelectSubset<T, WorkflowRatingFindUniqueArgs<ExtArgs>>): Prisma__WorkflowRatingClient<$Result.GetResult<Prisma.$WorkflowRatingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkflowRating that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkflowRatingFindUniqueOrThrowArgs} args - Arguments to find a WorkflowRating
     * @example
     * // Get one WorkflowRating
     * const workflowRating = await prisma.workflowRating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkflowRatingFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkflowRatingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkflowRatingClient<$Result.GetResult<Prisma.$WorkflowRatingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkflowRating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowRatingFindFirstArgs} args - Arguments to find a WorkflowRating
     * @example
     * // Get one WorkflowRating
     * const workflowRating = await prisma.workflowRating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkflowRatingFindFirstArgs>(args?: SelectSubset<T, WorkflowRatingFindFirstArgs<ExtArgs>>): Prisma__WorkflowRatingClient<$Result.GetResult<Prisma.$WorkflowRatingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkflowRating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowRatingFindFirstOrThrowArgs} args - Arguments to find a WorkflowRating
     * @example
     * // Get one WorkflowRating
     * const workflowRating = await prisma.workflowRating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkflowRatingFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkflowRatingFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkflowRatingClient<$Result.GetResult<Prisma.$WorkflowRatingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkflowRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowRatingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkflowRatings
     * const workflowRatings = await prisma.workflowRating.findMany()
     * 
     * // Get first 10 WorkflowRatings
     * const workflowRatings = await prisma.workflowRating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowRatingWithIdOnly = await prisma.workflowRating.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkflowRatingFindManyArgs>(args?: SelectSubset<T, WorkflowRatingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowRatingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkflowRating.
     * @param {WorkflowRatingCreateArgs} args - Arguments to create a WorkflowRating.
     * @example
     * // Create one WorkflowRating
     * const WorkflowRating = await prisma.workflowRating.create({
     *   data: {
     *     // ... data to create a WorkflowRating
     *   }
     * })
     * 
     */
    create<T extends WorkflowRatingCreateArgs>(args: SelectSubset<T, WorkflowRatingCreateArgs<ExtArgs>>): Prisma__WorkflowRatingClient<$Result.GetResult<Prisma.$WorkflowRatingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkflowRatings.
     * @param {WorkflowRatingCreateManyArgs} args - Arguments to create many WorkflowRatings.
     * @example
     * // Create many WorkflowRatings
     * const workflowRating = await prisma.workflowRating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkflowRatingCreateManyArgs>(args?: SelectSubset<T, WorkflowRatingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkflowRatings and returns the data saved in the database.
     * @param {WorkflowRatingCreateManyAndReturnArgs} args - Arguments to create many WorkflowRatings.
     * @example
     * // Create many WorkflowRatings
     * const workflowRating = await prisma.workflowRating.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkflowRatings and only return the `id`
     * const workflowRatingWithIdOnly = await prisma.workflowRating.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkflowRatingCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkflowRatingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowRatingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkflowRating.
     * @param {WorkflowRatingDeleteArgs} args - Arguments to delete one WorkflowRating.
     * @example
     * // Delete one WorkflowRating
     * const WorkflowRating = await prisma.workflowRating.delete({
     *   where: {
     *     // ... filter to delete one WorkflowRating
     *   }
     * })
     * 
     */
    delete<T extends WorkflowRatingDeleteArgs>(args: SelectSubset<T, WorkflowRatingDeleteArgs<ExtArgs>>): Prisma__WorkflowRatingClient<$Result.GetResult<Prisma.$WorkflowRatingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkflowRating.
     * @param {WorkflowRatingUpdateArgs} args - Arguments to update one WorkflowRating.
     * @example
     * // Update one WorkflowRating
     * const workflowRating = await prisma.workflowRating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkflowRatingUpdateArgs>(args: SelectSubset<T, WorkflowRatingUpdateArgs<ExtArgs>>): Prisma__WorkflowRatingClient<$Result.GetResult<Prisma.$WorkflowRatingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkflowRatings.
     * @param {WorkflowRatingDeleteManyArgs} args - Arguments to filter WorkflowRatings to delete.
     * @example
     * // Delete a few WorkflowRatings
     * const { count } = await prisma.workflowRating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkflowRatingDeleteManyArgs>(args?: SelectSubset<T, WorkflowRatingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowRatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkflowRatings
     * const workflowRating = await prisma.workflowRating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkflowRatingUpdateManyArgs>(args: SelectSubset<T, WorkflowRatingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkflowRating.
     * @param {WorkflowRatingUpsertArgs} args - Arguments to update or create a WorkflowRating.
     * @example
     * // Update or create a WorkflowRating
     * const workflowRating = await prisma.workflowRating.upsert({
     *   create: {
     *     // ... data to create a WorkflowRating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkflowRating we want to update
     *   }
     * })
     */
    upsert<T extends WorkflowRatingUpsertArgs>(args: SelectSubset<T, WorkflowRatingUpsertArgs<ExtArgs>>): Prisma__WorkflowRatingClient<$Result.GetResult<Prisma.$WorkflowRatingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkflowRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowRatingCountArgs} args - Arguments to filter WorkflowRatings to count.
     * @example
     * // Count the number of WorkflowRatings
     * const count = await prisma.workflowRating.count({
     *   where: {
     *     // ... the filter for the WorkflowRatings we want to count
     *   }
     * })
    **/
    count<T extends WorkflowRatingCountArgs>(
      args?: Subset<T, WorkflowRatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowRatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkflowRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowRatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowRatingAggregateArgs>(args: Subset<T, WorkflowRatingAggregateArgs>): Prisma.PrismaPromise<GetWorkflowRatingAggregateType<T>>

    /**
     * Group by WorkflowRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowRatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowRatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowRatingGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowRatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowRatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkflowRating model
   */
  readonly fields: WorkflowRatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkflowRating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkflowRatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workflow<T extends WorkflowDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowDefaultArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkflowRating model
   */ 
  interface WorkflowRatingFieldRefs {
    readonly id: FieldRef<"WorkflowRating", 'String'>
    readonly workflowId: FieldRef<"WorkflowRating", 'String'>
    readonly userId: FieldRef<"WorkflowRating", 'String'>
    readonly rating: FieldRef<"WorkflowRating", 'Float'>
    readonly comment: FieldRef<"WorkflowRating", 'String'>
    readonly createdAt: FieldRef<"WorkflowRating", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkflowRating", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkflowRating findUnique
   */
  export type WorkflowRatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRating
     */
    select?: WorkflowRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRatingInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowRating to fetch.
     */
    where: WorkflowRatingWhereUniqueInput
  }

  /**
   * WorkflowRating findUniqueOrThrow
   */
  export type WorkflowRatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRating
     */
    select?: WorkflowRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRatingInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowRating to fetch.
     */
    where: WorkflowRatingWhereUniqueInput
  }

  /**
   * WorkflowRating findFirst
   */
  export type WorkflowRatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRating
     */
    select?: WorkflowRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRatingInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowRating to fetch.
     */
    where?: WorkflowRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowRatings to fetch.
     */
    orderBy?: WorkflowRatingOrderByWithRelationInput | WorkflowRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowRatings.
     */
    cursor?: WorkflowRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowRatings.
     */
    distinct?: WorkflowRatingScalarFieldEnum | WorkflowRatingScalarFieldEnum[]
  }

  /**
   * WorkflowRating findFirstOrThrow
   */
  export type WorkflowRatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRating
     */
    select?: WorkflowRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRatingInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowRating to fetch.
     */
    where?: WorkflowRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowRatings to fetch.
     */
    orderBy?: WorkflowRatingOrderByWithRelationInput | WorkflowRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowRatings.
     */
    cursor?: WorkflowRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowRatings.
     */
    distinct?: WorkflowRatingScalarFieldEnum | WorkflowRatingScalarFieldEnum[]
  }

  /**
   * WorkflowRating findMany
   */
  export type WorkflowRatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRating
     */
    select?: WorkflowRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRatingInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowRatings to fetch.
     */
    where?: WorkflowRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowRatings to fetch.
     */
    orderBy?: WorkflowRatingOrderByWithRelationInput | WorkflowRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkflowRatings.
     */
    cursor?: WorkflowRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowRatings.
     */
    skip?: number
    distinct?: WorkflowRatingScalarFieldEnum | WorkflowRatingScalarFieldEnum[]
  }

  /**
   * WorkflowRating create
   */
  export type WorkflowRatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRating
     */
    select?: WorkflowRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRatingInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkflowRating.
     */
    data: XOR<WorkflowRatingCreateInput, WorkflowRatingUncheckedCreateInput>
  }

  /**
   * WorkflowRating createMany
   */
  export type WorkflowRatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkflowRatings.
     */
    data: WorkflowRatingCreateManyInput | WorkflowRatingCreateManyInput[]
  }

  /**
   * WorkflowRating createManyAndReturn
   */
  export type WorkflowRatingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRating
     */
    select?: WorkflowRatingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkflowRatings.
     */
    data: WorkflowRatingCreateManyInput | WorkflowRatingCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRatingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowRating update
   */
  export type WorkflowRatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRating
     */
    select?: WorkflowRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRatingInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkflowRating.
     */
    data: XOR<WorkflowRatingUpdateInput, WorkflowRatingUncheckedUpdateInput>
    /**
     * Choose, which WorkflowRating to update.
     */
    where: WorkflowRatingWhereUniqueInput
  }

  /**
   * WorkflowRating updateMany
   */
  export type WorkflowRatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkflowRatings.
     */
    data: XOR<WorkflowRatingUpdateManyMutationInput, WorkflowRatingUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowRatings to update
     */
    where?: WorkflowRatingWhereInput
  }

  /**
   * WorkflowRating upsert
   */
  export type WorkflowRatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRating
     */
    select?: WorkflowRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRatingInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkflowRating to update in case it exists.
     */
    where: WorkflowRatingWhereUniqueInput
    /**
     * In case the WorkflowRating found by the `where` argument doesn't exist, create a new WorkflowRating with this data.
     */
    create: XOR<WorkflowRatingCreateInput, WorkflowRatingUncheckedCreateInput>
    /**
     * In case the WorkflowRating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkflowRatingUpdateInput, WorkflowRatingUncheckedUpdateInput>
  }

  /**
   * WorkflowRating delete
   */
  export type WorkflowRatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRating
     */
    select?: WorkflowRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRatingInclude<ExtArgs> | null
    /**
     * Filter which WorkflowRating to delete.
     */
    where: WorkflowRatingWhereUniqueInput
  }

  /**
   * WorkflowRating deleteMany
   */
  export type WorkflowRatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowRatings to delete
     */
    where?: WorkflowRatingWhereInput
  }

  /**
   * WorkflowRating without action
   */
  export type WorkflowRatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRating
     */
    select?: WorkflowRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRatingInclude<ExtArgs> | null
  }


  /**
   * Model ScheduledTask
   */

  export type AggregateScheduledTask = {
    _count: ScheduledTaskCountAggregateOutputType | null
    _avg: ScheduledTaskAvgAggregateOutputType | null
    _sum: ScheduledTaskSumAggregateOutputType | null
    _min: ScheduledTaskMinAggregateOutputType | null
    _max: ScheduledTaskMaxAggregateOutputType | null
  }

  export type ScheduledTaskAvgAggregateOutputType = {
    runCount: number | null
    failureCount: number | null
    maxRuns: number | null
  }

  export type ScheduledTaskSumAggregateOutputType = {
    runCount: number | null
    failureCount: number | null
    maxRuns: number | null
  }

  export type ScheduledTaskMinAggregateOutputType = {
    id: string | null
    name: string | null
    workflowId: string | null
    creatorId: string | null
    cronExpression: string | null
    timezone: string | null
    isEnabled: boolean | null
    input: string | null
    lastRunAt: Date | null
    nextRunAt: Date | null
    runCount: number | null
    failureCount: number | null
    maxRuns: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduledTaskMaxAggregateOutputType = {
    id: string | null
    name: string | null
    workflowId: string | null
    creatorId: string | null
    cronExpression: string | null
    timezone: string | null
    isEnabled: boolean | null
    input: string | null
    lastRunAt: Date | null
    nextRunAt: Date | null
    runCount: number | null
    failureCount: number | null
    maxRuns: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduledTaskCountAggregateOutputType = {
    id: number
    name: number
    workflowId: number
    creatorId: number
    cronExpression: number
    timezone: number
    isEnabled: number
    input: number
    lastRunAt: number
    nextRunAt: number
    runCount: number
    failureCount: number
    maxRuns: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScheduledTaskAvgAggregateInputType = {
    runCount?: true
    failureCount?: true
    maxRuns?: true
  }

  export type ScheduledTaskSumAggregateInputType = {
    runCount?: true
    failureCount?: true
    maxRuns?: true
  }

  export type ScheduledTaskMinAggregateInputType = {
    id?: true
    name?: true
    workflowId?: true
    creatorId?: true
    cronExpression?: true
    timezone?: true
    isEnabled?: true
    input?: true
    lastRunAt?: true
    nextRunAt?: true
    runCount?: true
    failureCount?: true
    maxRuns?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduledTaskMaxAggregateInputType = {
    id?: true
    name?: true
    workflowId?: true
    creatorId?: true
    cronExpression?: true
    timezone?: true
    isEnabled?: true
    input?: true
    lastRunAt?: true
    nextRunAt?: true
    runCount?: true
    failureCount?: true
    maxRuns?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduledTaskCountAggregateInputType = {
    id?: true
    name?: true
    workflowId?: true
    creatorId?: true
    cronExpression?: true
    timezone?: true
    isEnabled?: true
    input?: true
    lastRunAt?: true
    nextRunAt?: true
    runCount?: true
    failureCount?: true
    maxRuns?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScheduledTaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduledTask to aggregate.
     */
    where?: ScheduledTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledTasks to fetch.
     */
    orderBy?: ScheduledTaskOrderByWithRelationInput | ScheduledTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduledTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScheduledTasks
    **/
    _count?: true | ScheduledTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduledTaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduledTaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduledTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduledTaskMaxAggregateInputType
  }

  export type GetScheduledTaskAggregateType<T extends ScheduledTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateScheduledTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScheduledTask[P]>
      : GetScalarType<T[P], AggregateScheduledTask[P]>
  }




  export type ScheduledTaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduledTaskWhereInput
    orderBy?: ScheduledTaskOrderByWithAggregationInput | ScheduledTaskOrderByWithAggregationInput[]
    by: ScheduledTaskScalarFieldEnum[] | ScheduledTaskScalarFieldEnum
    having?: ScheduledTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduledTaskCountAggregateInputType | true
    _avg?: ScheduledTaskAvgAggregateInputType
    _sum?: ScheduledTaskSumAggregateInputType
    _min?: ScheduledTaskMinAggregateInputType
    _max?: ScheduledTaskMaxAggregateInputType
  }

  export type ScheduledTaskGroupByOutputType = {
    id: string
    name: string
    workflowId: string
    creatorId: string
    cronExpression: string
    timezone: string
    isEnabled: boolean
    input: string | null
    lastRunAt: Date | null
    nextRunAt: Date | null
    runCount: number
    failureCount: number
    maxRuns: number | null
    createdAt: Date
    updatedAt: Date
    _count: ScheduledTaskCountAggregateOutputType | null
    _avg: ScheduledTaskAvgAggregateOutputType | null
    _sum: ScheduledTaskSumAggregateOutputType | null
    _min: ScheduledTaskMinAggregateOutputType | null
    _max: ScheduledTaskMaxAggregateOutputType | null
  }

  type GetScheduledTaskGroupByPayload<T extends ScheduledTaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduledTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduledTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduledTaskGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduledTaskGroupByOutputType[P]>
        }
      >
    >


  export type ScheduledTaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    workflowId?: boolean
    creatorId?: boolean
    cronExpression?: boolean
    timezone?: boolean
    isEnabled?: boolean
    input?: boolean
    lastRunAt?: boolean
    nextRunAt?: boolean
    runCount?: boolean
    failureCount?: boolean
    maxRuns?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scheduledTask"]>

  export type ScheduledTaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    workflowId?: boolean
    creatorId?: boolean
    cronExpression?: boolean
    timezone?: boolean
    isEnabled?: boolean
    input?: boolean
    lastRunAt?: boolean
    nextRunAt?: boolean
    runCount?: boolean
    failureCount?: boolean
    maxRuns?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scheduledTask"]>

  export type ScheduledTaskSelectScalar = {
    id?: boolean
    name?: boolean
    workflowId?: boolean
    creatorId?: boolean
    cronExpression?: boolean
    timezone?: boolean
    isEnabled?: boolean
    input?: boolean
    lastRunAt?: boolean
    nextRunAt?: boolean
    runCount?: boolean
    failureCount?: boolean
    maxRuns?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScheduledTaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ScheduledTaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ScheduledTaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScheduledTask"
    objects: {
      workflow: Prisma.$WorkflowPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      workflowId: string
      creatorId: string
      cronExpression: string
      timezone: string
      isEnabled: boolean
      input: string | null
      lastRunAt: Date | null
      nextRunAt: Date | null
      runCount: number
      failureCount: number
      maxRuns: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scheduledTask"]>
    composites: {}
  }

  type ScheduledTaskGetPayload<S extends boolean | null | undefined | ScheduledTaskDefaultArgs> = $Result.GetResult<Prisma.$ScheduledTaskPayload, S>

  type ScheduledTaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduledTaskFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScheduledTaskCountAggregateInputType | true
    }

  export interface ScheduledTaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScheduledTask'], meta: { name: 'ScheduledTask' } }
    /**
     * Find zero or one ScheduledTask that matches the filter.
     * @param {ScheduledTaskFindUniqueArgs} args - Arguments to find a ScheduledTask
     * @example
     * // Get one ScheduledTask
     * const scheduledTask = await prisma.scheduledTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduledTaskFindUniqueArgs>(args: SelectSubset<T, ScheduledTaskFindUniqueArgs<ExtArgs>>): Prisma__ScheduledTaskClient<$Result.GetResult<Prisma.$ScheduledTaskPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ScheduledTask that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScheduledTaskFindUniqueOrThrowArgs} args - Arguments to find a ScheduledTask
     * @example
     * // Get one ScheduledTask
     * const scheduledTask = await prisma.scheduledTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduledTaskFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduledTaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduledTaskClient<$Result.GetResult<Prisma.$ScheduledTaskPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ScheduledTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledTaskFindFirstArgs} args - Arguments to find a ScheduledTask
     * @example
     * // Get one ScheduledTask
     * const scheduledTask = await prisma.scheduledTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduledTaskFindFirstArgs>(args?: SelectSubset<T, ScheduledTaskFindFirstArgs<ExtArgs>>): Prisma__ScheduledTaskClient<$Result.GetResult<Prisma.$ScheduledTaskPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ScheduledTask that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledTaskFindFirstOrThrowArgs} args - Arguments to find a ScheduledTask
     * @example
     * // Get one ScheduledTask
     * const scheduledTask = await prisma.scheduledTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduledTaskFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduledTaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduledTaskClient<$Result.GetResult<Prisma.$ScheduledTaskPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ScheduledTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledTaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScheduledTasks
     * const scheduledTasks = await prisma.scheduledTask.findMany()
     * 
     * // Get first 10 ScheduledTasks
     * const scheduledTasks = await prisma.scheduledTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduledTaskWithIdOnly = await prisma.scheduledTask.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduledTaskFindManyArgs>(args?: SelectSubset<T, ScheduledTaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledTaskPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ScheduledTask.
     * @param {ScheduledTaskCreateArgs} args - Arguments to create a ScheduledTask.
     * @example
     * // Create one ScheduledTask
     * const ScheduledTask = await prisma.scheduledTask.create({
     *   data: {
     *     // ... data to create a ScheduledTask
     *   }
     * })
     * 
     */
    create<T extends ScheduledTaskCreateArgs>(args: SelectSubset<T, ScheduledTaskCreateArgs<ExtArgs>>): Prisma__ScheduledTaskClient<$Result.GetResult<Prisma.$ScheduledTaskPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ScheduledTasks.
     * @param {ScheduledTaskCreateManyArgs} args - Arguments to create many ScheduledTasks.
     * @example
     * // Create many ScheduledTasks
     * const scheduledTask = await prisma.scheduledTask.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduledTaskCreateManyArgs>(args?: SelectSubset<T, ScheduledTaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScheduledTasks and returns the data saved in the database.
     * @param {ScheduledTaskCreateManyAndReturnArgs} args - Arguments to create many ScheduledTasks.
     * @example
     * // Create many ScheduledTasks
     * const scheduledTask = await prisma.scheduledTask.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScheduledTasks and only return the `id`
     * const scheduledTaskWithIdOnly = await prisma.scheduledTask.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScheduledTaskCreateManyAndReturnArgs>(args?: SelectSubset<T, ScheduledTaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledTaskPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ScheduledTask.
     * @param {ScheduledTaskDeleteArgs} args - Arguments to delete one ScheduledTask.
     * @example
     * // Delete one ScheduledTask
     * const ScheduledTask = await prisma.scheduledTask.delete({
     *   where: {
     *     // ... filter to delete one ScheduledTask
     *   }
     * })
     * 
     */
    delete<T extends ScheduledTaskDeleteArgs>(args: SelectSubset<T, ScheduledTaskDeleteArgs<ExtArgs>>): Prisma__ScheduledTaskClient<$Result.GetResult<Prisma.$ScheduledTaskPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ScheduledTask.
     * @param {ScheduledTaskUpdateArgs} args - Arguments to update one ScheduledTask.
     * @example
     * // Update one ScheduledTask
     * const scheduledTask = await prisma.scheduledTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduledTaskUpdateArgs>(args: SelectSubset<T, ScheduledTaskUpdateArgs<ExtArgs>>): Prisma__ScheduledTaskClient<$Result.GetResult<Prisma.$ScheduledTaskPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ScheduledTasks.
     * @param {ScheduledTaskDeleteManyArgs} args - Arguments to filter ScheduledTasks to delete.
     * @example
     * // Delete a few ScheduledTasks
     * const { count } = await prisma.scheduledTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduledTaskDeleteManyArgs>(args?: SelectSubset<T, ScheduledTaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScheduledTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScheduledTasks
     * const scheduledTask = await prisma.scheduledTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduledTaskUpdateManyArgs>(args: SelectSubset<T, ScheduledTaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScheduledTask.
     * @param {ScheduledTaskUpsertArgs} args - Arguments to update or create a ScheduledTask.
     * @example
     * // Update or create a ScheduledTask
     * const scheduledTask = await prisma.scheduledTask.upsert({
     *   create: {
     *     // ... data to create a ScheduledTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScheduledTask we want to update
     *   }
     * })
     */
    upsert<T extends ScheduledTaskUpsertArgs>(args: SelectSubset<T, ScheduledTaskUpsertArgs<ExtArgs>>): Prisma__ScheduledTaskClient<$Result.GetResult<Prisma.$ScheduledTaskPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ScheduledTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledTaskCountArgs} args - Arguments to filter ScheduledTasks to count.
     * @example
     * // Count the number of ScheduledTasks
     * const count = await prisma.scheduledTask.count({
     *   where: {
     *     // ... the filter for the ScheduledTasks we want to count
     *   }
     * })
    **/
    count<T extends ScheduledTaskCountArgs>(
      args?: Subset<T, ScheduledTaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduledTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScheduledTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduledTaskAggregateArgs>(args: Subset<T, ScheduledTaskAggregateArgs>): Prisma.PrismaPromise<GetScheduledTaskAggregateType<T>>

    /**
     * Group by ScheduledTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduledTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduledTaskGroupByArgs['orderBy'] }
        : { orderBy?: ScheduledTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduledTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduledTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScheduledTask model
   */
  readonly fields: ScheduledTaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScheduledTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduledTaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workflow<T extends WorkflowDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowDefaultArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScheduledTask model
   */ 
  interface ScheduledTaskFieldRefs {
    readonly id: FieldRef<"ScheduledTask", 'String'>
    readonly name: FieldRef<"ScheduledTask", 'String'>
    readonly workflowId: FieldRef<"ScheduledTask", 'String'>
    readonly creatorId: FieldRef<"ScheduledTask", 'String'>
    readonly cronExpression: FieldRef<"ScheduledTask", 'String'>
    readonly timezone: FieldRef<"ScheduledTask", 'String'>
    readonly isEnabled: FieldRef<"ScheduledTask", 'Boolean'>
    readonly input: FieldRef<"ScheduledTask", 'String'>
    readonly lastRunAt: FieldRef<"ScheduledTask", 'DateTime'>
    readonly nextRunAt: FieldRef<"ScheduledTask", 'DateTime'>
    readonly runCount: FieldRef<"ScheduledTask", 'Int'>
    readonly failureCount: FieldRef<"ScheduledTask", 'Int'>
    readonly maxRuns: FieldRef<"ScheduledTask", 'Int'>
    readonly createdAt: FieldRef<"ScheduledTask", 'DateTime'>
    readonly updatedAt: FieldRef<"ScheduledTask", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScheduledTask findUnique
   */
  export type ScheduledTaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledTask
     */
    select?: ScheduledTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledTaskInclude<ExtArgs> | null
    /**
     * Filter, which ScheduledTask to fetch.
     */
    where: ScheduledTaskWhereUniqueInput
  }

  /**
   * ScheduledTask findUniqueOrThrow
   */
  export type ScheduledTaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledTask
     */
    select?: ScheduledTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledTaskInclude<ExtArgs> | null
    /**
     * Filter, which ScheduledTask to fetch.
     */
    where: ScheduledTaskWhereUniqueInput
  }

  /**
   * ScheduledTask findFirst
   */
  export type ScheduledTaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledTask
     */
    select?: ScheduledTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledTaskInclude<ExtArgs> | null
    /**
     * Filter, which ScheduledTask to fetch.
     */
    where?: ScheduledTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledTasks to fetch.
     */
    orderBy?: ScheduledTaskOrderByWithRelationInput | ScheduledTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduledTasks.
     */
    cursor?: ScheduledTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduledTasks.
     */
    distinct?: ScheduledTaskScalarFieldEnum | ScheduledTaskScalarFieldEnum[]
  }

  /**
   * ScheduledTask findFirstOrThrow
   */
  export type ScheduledTaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledTask
     */
    select?: ScheduledTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledTaskInclude<ExtArgs> | null
    /**
     * Filter, which ScheduledTask to fetch.
     */
    where?: ScheduledTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledTasks to fetch.
     */
    orderBy?: ScheduledTaskOrderByWithRelationInput | ScheduledTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduledTasks.
     */
    cursor?: ScheduledTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduledTasks.
     */
    distinct?: ScheduledTaskScalarFieldEnum | ScheduledTaskScalarFieldEnum[]
  }

  /**
   * ScheduledTask findMany
   */
  export type ScheduledTaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledTask
     */
    select?: ScheduledTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledTaskInclude<ExtArgs> | null
    /**
     * Filter, which ScheduledTasks to fetch.
     */
    where?: ScheduledTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledTasks to fetch.
     */
    orderBy?: ScheduledTaskOrderByWithRelationInput | ScheduledTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScheduledTasks.
     */
    cursor?: ScheduledTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledTasks.
     */
    skip?: number
    distinct?: ScheduledTaskScalarFieldEnum | ScheduledTaskScalarFieldEnum[]
  }

  /**
   * ScheduledTask create
   */
  export type ScheduledTaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledTask
     */
    select?: ScheduledTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledTaskInclude<ExtArgs> | null
    /**
     * The data needed to create a ScheduledTask.
     */
    data: XOR<ScheduledTaskCreateInput, ScheduledTaskUncheckedCreateInput>
  }

  /**
   * ScheduledTask createMany
   */
  export type ScheduledTaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScheduledTasks.
     */
    data: ScheduledTaskCreateManyInput | ScheduledTaskCreateManyInput[]
  }

  /**
   * ScheduledTask createManyAndReturn
   */
  export type ScheduledTaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledTask
     */
    select?: ScheduledTaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ScheduledTasks.
     */
    data: ScheduledTaskCreateManyInput | ScheduledTaskCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledTaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScheduledTask update
   */
  export type ScheduledTaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledTask
     */
    select?: ScheduledTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledTaskInclude<ExtArgs> | null
    /**
     * The data needed to update a ScheduledTask.
     */
    data: XOR<ScheduledTaskUpdateInput, ScheduledTaskUncheckedUpdateInput>
    /**
     * Choose, which ScheduledTask to update.
     */
    where: ScheduledTaskWhereUniqueInput
  }

  /**
   * ScheduledTask updateMany
   */
  export type ScheduledTaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScheduledTasks.
     */
    data: XOR<ScheduledTaskUpdateManyMutationInput, ScheduledTaskUncheckedUpdateManyInput>
    /**
     * Filter which ScheduledTasks to update
     */
    where?: ScheduledTaskWhereInput
  }

  /**
   * ScheduledTask upsert
   */
  export type ScheduledTaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledTask
     */
    select?: ScheduledTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledTaskInclude<ExtArgs> | null
    /**
     * The filter to search for the ScheduledTask to update in case it exists.
     */
    where: ScheduledTaskWhereUniqueInput
    /**
     * In case the ScheduledTask found by the `where` argument doesn't exist, create a new ScheduledTask with this data.
     */
    create: XOR<ScheduledTaskCreateInput, ScheduledTaskUncheckedCreateInput>
    /**
     * In case the ScheduledTask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduledTaskUpdateInput, ScheduledTaskUncheckedUpdateInput>
  }

  /**
   * ScheduledTask delete
   */
  export type ScheduledTaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledTask
     */
    select?: ScheduledTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledTaskInclude<ExtArgs> | null
    /**
     * Filter which ScheduledTask to delete.
     */
    where: ScheduledTaskWhereUniqueInput
  }

  /**
   * ScheduledTask deleteMany
   */
  export type ScheduledTaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduledTasks to delete
     */
    where?: ScheduledTaskWhereInput
  }

  /**
   * ScheduledTask without action
   */
  export type ScheduledTaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledTask
     */
    select?: ScheduledTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledTaskInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    passwordHash: 'passwordHash',
    avatar: 'avatar',
    bio: 'bio',
    role: 'role',
    credits: 'credits',
    subscriptionTier: 'subscriptionTier',
    subscriptionExpiresAt: 'subscriptionExpiresAt',
    isActive: 'isActive',
    isVerified: 'isVerified',
    verificationToken: 'verificationToken',
    resetPasswordToken: 'resetPasswordToken',
    resetPasswordExpires: 'resetPasswordExpires',
    lastLoginAt: 'lastLoginAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OAuthAccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    provider: 'provider',
    providerId: 'providerId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OAuthAccountScalarFieldEnum = (typeof OAuthAccountScalarFieldEnum)[keyof typeof OAuthAccountScalarFieldEnum]


  export const RefreshTokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type RefreshTokenScalarFieldEnum = (typeof RefreshTokenScalarFieldEnum)[keyof typeof RefreshTokenScalarFieldEnum]


  export const CharacterScalarFieldEnum: {
    id: 'id',
    creatorId: 'creatorId',
    name: 'name',
    description: 'description',
    fullDescription: 'fullDescription',
    personality: 'personality',
    backstory: 'backstory',
    speakingStyle: 'speakingStyle',
    scenario: 'scenario',
    firstMessage: 'firstMessage',
    systemPrompt: 'systemPrompt',
    exampleDialogs: 'exampleDialogs',
    avatar: 'avatar',
    coverImage: 'coverImage',
    category: 'category',
    tags: 'tags',
    language: 'language',
    model: 'model',
    temperature: 'temperature',
    maxTokens: 'maxTokens',
    isPublic: 'isPublic',
    isNSFW: 'isNSFW',
    isFeatured: 'isFeatured',
    rating: 'rating',
    ratingCount: 'ratingCount',
    chatCount: 'chatCount',
    favoriteCount: 'favoriteCount',
    importedFrom: 'importedFrom',
    version: 'version',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CharacterScalarFieldEnum = (typeof CharacterScalarFieldEnum)[keyof typeof CharacterScalarFieldEnum]


  export const ChatSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    characterId: 'characterId',
    title: 'title',
    model: 'model',
    presetId: 'presetId',
    worldInfoId: 'worldInfoId',
    lastMessageAt: 'lastMessageAt',
    messageCount: 'messageCount',
    totalTokens: 'totalTokens',
    isArchived: 'isArchived',
    isPinned: 'isPinned',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChatSessionScalarFieldEnum = (typeof ChatSessionScalarFieldEnum)[keyof typeof ChatSessionScalarFieldEnum]


  export const ChatRoomScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    ownerId: 'ownerId',
    maxParticipants: 'maxParticipants',
    isPrivate: 'isPrivate',
    allowSpectators: 'allowSpectators',
    roomType: 'roomType',
    settings: 'settings',
    lastMessageAt: 'lastMessageAt',
    messageCount: 'messageCount',
    totalTokens: 'totalTokens',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChatRoomScalarFieldEnum = (typeof ChatRoomScalarFieldEnum)[keyof typeof ChatRoomScalarFieldEnum]


  export const ChatParticipantScalarFieldEnum: {
    id: 'id',
    roomId: 'roomId',
    userId: 'userId',
    characterId: 'characterId',
    role: 'role',
    permissions: 'permissions',
    joinedAt: 'joinedAt',
    lastSeenAt: 'lastSeenAt',
    isActive: 'isActive',
    isMuted: 'isMuted'
  };

  export type ChatParticipantScalarFieldEnum = (typeof ChatParticipantScalarFieldEnum)[keyof typeof ChatParticipantScalarFieldEnum]


  export const ChatMessageScalarFieldEnum: {
    id: 'id',
    roomId: 'roomId',
    senderId: 'senderId',
    characterId: 'characterId',
    content: 'content',
    messageType: 'messageType',
    replyToId: 'replyToId',
    tokens: 'tokens',
    isEdited: 'isEdited',
    isDeleted: 'isDeleted',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    amount: 'amount',
    currency: 'currency',
    status: 'status',
    method: 'method',
    externalId: 'externalId',
    description: 'description',
    metadata: 'metadata',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    userId: 'userId',
    characterId: 'characterId',
    role: 'role',
    content: 'content',
    tokens: 'tokens',
    edited: 'edited',
    deleted: 'deleted',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const CharacterFavoriteScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    characterId: 'characterId',
    createdAt: 'createdAt'
  };

  export type CharacterFavoriteScalarFieldEnum = (typeof CharacterFavoriteScalarFieldEnum)[keyof typeof CharacterFavoriteScalarFieldEnum]


  export const CharacterRatingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    characterId: 'characterId',
    rating: 'rating',
    comment: 'comment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CharacterRatingScalarFieldEnum = (typeof CharacterRatingScalarFieldEnum)[keyof typeof CharacterRatingScalarFieldEnum]


  export const AdminLogScalarFieldEnum: {
    id: 'id',
    adminId: 'adminId',
    action: 'action',
    targetType: 'targetType',
    targetId: 'targetId',
    details: 'details',
    ip: 'ip',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type AdminLogScalarFieldEnum = (typeof AdminLogScalarFieldEnum)[keyof typeof AdminLogScalarFieldEnum]


  export const UsageLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    endpoint: 'endpoint',
    method: 'method',
    statusCode: 'statusCode',
    responseTime: 'responseTime',
    ip: 'ip',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type UsageLogScalarFieldEnum = (typeof UsageLogScalarFieldEnum)[keyof typeof UsageLogScalarFieldEnum]


  export const AlertScalarFieldEnum: {
    id: 'id',
    type: 'type',
    severity: 'severity',
    title: 'title',
    message: 'message',
    source: 'source',
    metadata: 'metadata',
    isRead: 'isRead',
    isResolved: 'isResolved',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AlertScalarFieldEnum = (typeof AlertScalarFieldEnum)[keyof typeof AlertScalarFieldEnum]


  export const ChannelScalarFieldEnum: {
    id: 'id',
    name: 'name',
    provider: 'provider',
    apiKey: 'apiKey',
    baseUrl: 'baseUrl',
    models: 'models',
    isActive: 'isActive',
    priority: 'priority',
    weight: 'weight',
    maxTokens: 'maxTokens',
    rpmLimit: 'rpmLimit',
    tpmLimit: 'tpmLimit',
    usageCount: 'usageCount',
    errorCount: 'errorCount',
    lastUsedAt: 'lastUsedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChannelScalarFieldEnum = (typeof ChannelScalarFieldEnum)[keyof typeof ChannelScalarFieldEnum]


  export const WorkflowScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    creatorId: 'creatorId',
    version: 'version',
    status: 'status',
    isTemplate: 'isTemplate',
    isPublic: 'isPublic',
    category: 'category',
    tags: 'tags',
    definition: 'definition',
    variables: 'variables',
    settings: 'settings',
    usageCount: 'usageCount',
    rating: 'rating',
    ratingCount: 'ratingCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkflowScalarFieldEnum = (typeof WorkflowScalarFieldEnum)[keyof typeof WorkflowScalarFieldEnum]


  export const WorkflowInstanceScalarFieldEnum: {
    id: 'id',
    workflowId: 'workflowId',
    executorId: 'executorId',
    name: 'name',
    status: 'status',
    priority: 'priority',
    input: 'input',
    output: 'output',
    variables: 'variables',
    currentStep: 'currentStep',
    progress: 'progress',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    failureReason: 'failureReason',
    retryCount: 'retryCount',
    maxRetries: 'maxRetries',
    timeout: 'timeout',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkflowInstanceScalarFieldEnum = (typeof WorkflowInstanceScalarFieldEnum)[keyof typeof WorkflowInstanceScalarFieldEnum]


  export const StepExecutionScalarFieldEnum: {
    id: 'id',
    instanceId: 'instanceId',
    stepId: 'stepId',
    stepType: 'stepType',
    status: 'status',
    input: 'input',
    output: 'output',
    error: 'error',
    duration: 'duration',
    retryCount: 'retryCount',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StepExecutionScalarFieldEnum = (typeof StepExecutionScalarFieldEnum)[keyof typeof StepExecutionScalarFieldEnum]


  export const WorkflowLogScalarFieldEnum: {
    id: 'id',
    instanceId: 'instanceId',
    level: 'level',
    message: 'message',
    data: 'data',
    stepId: 'stepId',
    timestamp: 'timestamp'
  };

  export type WorkflowLogScalarFieldEnum = (typeof WorkflowLogScalarFieldEnum)[keyof typeof WorkflowLogScalarFieldEnum]


  export const WorkflowTemplateScalarFieldEnum: {
    id: 'id',
    workflowId: 'workflowId',
    name: 'name',
    description: 'description',
    category: 'category',
    tags: 'tags',
    isOfficial: 'isOfficial',
    usageCount: 'usageCount',
    rating: 'rating',
    ratingCount: 'ratingCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkflowTemplateScalarFieldEnum = (typeof WorkflowTemplateScalarFieldEnum)[keyof typeof WorkflowTemplateScalarFieldEnum]


  export const WorkflowRatingScalarFieldEnum: {
    id: 'id',
    workflowId: 'workflowId',
    userId: 'userId',
    rating: 'rating',
    comment: 'comment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkflowRatingScalarFieldEnum = (typeof WorkflowRatingScalarFieldEnum)[keyof typeof WorkflowRatingScalarFieldEnum]


  export const ScheduledTaskScalarFieldEnum: {
    id: 'id',
    name: 'name',
    workflowId: 'workflowId',
    creatorId: 'creatorId',
    cronExpression: 'cronExpression',
    timezone: 'timezone',
    isEnabled: 'isEnabled',
    input: 'input',
    lastRunAt: 'lastRunAt',
    nextRunAt: 'nextRunAt',
    runCount: 'runCount',
    failureCount: 'failureCount',
    maxRuns: 'maxRuns',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScheduledTaskScalarFieldEnum = (typeof ScheduledTaskScalarFieldEnum)[keyof typeof ScheduledTaskScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    credits?: IntFilter<"User"> | number
    subscriptionTier?: StringFilter<"User"> | string
    subscriptionExpiresAt?: DateTimeNullableFilter<"User"> | Date | string | null
    isActive?: BoolFilter<"User"> | boolean
    isVerified?: BoolFilter<"User"> | boolean
    verificationToken?: StringNullableFilter<"User"> | string | null
    resetPasswordToken?: StringNullableFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    characters?: CharacterListRelationFilter
    chatSessions?: ChatSessionListRelationFilter
    messages?: MessageListRelationFilter
    favorites?: CharacterFavoriteListRelationFilter
    ratings?: CharacterRatingListRelationFilter
    transactions?: TransactionListRelationFilter
    oauthAccounts?: OAuthAccountListRelationFilter
    refreshTokens?: RefreshTokenListRelationFilter
    ownedChatRooms?: ChatRoomListRelationFilter
    chatParticipants?: ChatParticipantListRelationFilter
    chatMessages?: ChatMessageListRelationFilter
    workflows?: WorkflowListRelationFilter
    workflowInstances?: WorkflowInstanceListRelationFilter
    workflowRatings?: WorkflowRatingListRelationFilter
    scheduledTasks?: ScheduledTaskListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    role?: SortOrder
    credits?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionExpiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    resetPasswordToken?: SortOrderInput | SortOrder
    resetPasswordExpires?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    characters?: CharacterOrderByRelationAggregateInput
    chatSessions?: ChatSessionOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    favorites?: CharacterFavoriteOrderByRelationAggregateInput
    ratings?: CharacterRatingOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
    oauthAccounts?: OAuthAccountOrderByRelationAggregateInput
    refreshTokens?: RefreshTokenOrderByRelationAggregateInput
    ownedChatRooms?: ChatRoomOrderByRelationAggregateInput
    chatParticipants?: ChatParticipantOrderByRelationAggregateInput
    chatMessages?: ChatMessageOrderByRelationAggregateInput
    workflows?: WorkflowOrderByRelationAggregateInput
    workflowInstances?: WorkflowInstanceOrderByRelationAggregateInput
    workflowRatings?: WorkflowRatingOrderByRelationAggregateInput
    scheduledTasks?: ScheduledTaskOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    credits?: IntFilter<"User"> | number
    subscriptionTier?: StringFilter<"User"> | string
    subscriptionExpiresAt?: DateTimeNullableFilter<"User"> | Date | string | null
    isActive?: BoolFilter<"User"> | boolean
    isVerified?: BoolFilter<"User"> | boolean
    verificationToken?: StringNullableFilter<"User"> | string | null
    resetPasswordToken?: StringNullableFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    characters?: CharacterListRelationFilter
    chatSessions?: ChatSessionListRelationFilter
    messages?: MessageListRelationFilter
    favorites?: CharacterFavoriteListRelationFilter
    ratings?: CharacterRatingListRelationFilter
    transactions?: TransactionListRelationFilter
    oauthAccounts?: OAuthAccountListRelationFilter
    refreshTokens?: RefreshTokenListRelationFilter
    ownedChatRooms?: ChatRoomListRelationFilter
    chatParticipants?: ChatParticipantListRelationFilter
    chatMessages?: ChatMessageListRelationFilter
    workflows?: WorkflowListRelationFilter
    workflowInstances?: WorkflowInstanceListRelationFilter
    workflowRatings?: WorkflowRatingListRelationFilter
    scheduledTasks?: ScheduledTaskListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    role?: SortOrder
    credits?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionExpiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    resetPasswordToken?: SortOrderInput | SortOrder
    resetPasswordExpires?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: StringWithAggregatesFilter<"User"> | string
    credits?: IntWithAggregatesFilter<"User"> | number
    subscriptionTier?: StringWithAggregatesFilter<"User"> | string
    subscriptionExpiresAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    verificationToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetPasswordToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type OAuthAccountWhereInput = {
    AND?: OAuthAccountWhereInput | OAuthAccountWhereInput[]
    OR?: OAuthAccountWhereInput[]
    NOT?: OAuthAccountWhereInput | OAuthAccountWhereInput[]
    id?: StringFilter<"OAuthAccount"> | string
    userId?: StringFilter<"OAuthAccount"> | string
    provider?: StringFilter<"OAuthAccount"> | string
    providerId?: StringFilter<"OAuthAccount"> | string
    accessToken?: StringNullableFilter<"OAuthAccount"> | string | null
    refreshToken?: StringNullableFilter<"OAuthAccount"> | string | null
    expiresAt?: DateTimeNullableFilter<"OAuthAccount"> | Date | string | null
    createdAt?: DateTimeFilter<"OAuthAccount"> | Date | string
    updatedAt?: DateTimeFilter<"OAuthAccount"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type OAuthAccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type OAuthAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerId?: OAuthAccountProviderProviderIdCompoundUniqueInput
    AND?: OAuthAccountWhereInput | OAuthAccountWhereInput[]
    OR?: OAuthAccountWhereInput[]
    NOT?: OAuthAccountWhereInput | OAuthAccountWhereInput[]
    userId?: StringFilter<"OAuthAccount"> | string
    provider?: StringFilter<"OAuthAccount"> | string
    providerId?: StringFilter<"OAuthAccount"> | string
    accessToken?: StringNullableFilter<"OAuthAccount"> | string | null
    refreshToken?: StringNullableFilter<"OAuthAccount"> | string | null
    expiresAt?: DateTimeNullableFilter<"OAuthAccount"> | Date | string | null
    createdAt?: DateTimeFilter<"OAuthAccount"> | Date | string
    updatedAt?: DateTimeFilter<"OAuthAccount"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "provider_providerId">

  export type OAuthAccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OAuthAccountCountOrderByAggregateInput
    _max?: OAuthAccountMaxOrderByAggregateInput
    _min?: OAuthAccountMinOrderByAggregateInput
  }

  export type OAuthAccountScalarWhereWithAggregatesInput = {
    AND?: OAuthAccountScalarWhereWithAggregatesInput | OAuthAccountScalarWhereWithAggregatesInput[]
    OR?: OAuthAccountScalarWhereWithAggregatesInput[]
    NOT?: OAuthAccountScalarWhereWithAggregatesInput | OAuthAccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OAuthAccount"> | string
    userId?: StringWithAggregatesFilter<"OAuthAccount"> | string
    provider?: StringWithAggregatesFilter<"OAuthAccount"> | string
    providerId?: StringWithAggregatesFilter<"OAuthAccount"> | string
    accessToken?: StringNullableWithAggregatesFilter<"OAuthAccount"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"OAuthAccount"> | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"OAuthAccount"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"OAuthAccount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OAuthAccount"> | Date | string
  }

  export type RefreshTokenWhereInput = {
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    id?: StringFilter<"RefreshToken"> | string
    userId?: StringFilter<"RefreshToken"> | string
    token?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RefreshTokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RefreshTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    userId?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type RefreshTokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: RefreshTokenCountOrderByAggregateInput
    _max?: RefreshTokenMaxOrderByAggregateInput
    _min?: RefreshTokenMinOrderByAggregateInput
  }

  export type RefreshTokenScalarWhereWithAggregatesInput = {
    AND?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    OR?: RefreshTokenScalarWhereWithAggregatesInput[]
    NOT?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RefreshToken"> | string
    userId?: StringWithAggregatesFilter<"RefreshToken"> | string
    token?: StringWithAggregatesFilter<"RefreshToken"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
  }

  export type CharacterWhereInput = {
    AND?: CharacterWhereInput | CharacterWhereInput[]
    OR?: CharacterWhereInput[]
    NOT?: CharacterWhereInput | CharacterWhereInput[]
    id?: StringFilter<"Character"> | string
    creatorId?: StringFilter<"Character"> | string
    name?: StringFilter<"Character"> | string
    description?: StringFilter<"Character"> | string
    fullDescription?: StringNullableFilter<"Character"> | string | null
    personality?: StringNullableFilter<"Character"> | string | null
    backstory?: StringNullableFilter<"Character"> | string | null
    speakingStyle?: StringNullableFilter<"Character"> | string | null
    scenario?: StringNullableFilter<"Character"> | string | null
    firstMessage?: StringNullableFilter<"Character"> | string | null
    systemPrompt?: StringNullableFilter<"Character"> | string | null
    exampleDialogs?: StringNullableFilter<"Character"> | string | null
    avatar?: StringNullableFilter<"Character"> | string | null
    coverImage?: StringNullableFilter<"Character"> | string | null
    category?: StringFilter<"Character"> | string
    tags?: StringFilter<"Character"> | string
    language?: StringFilter<"Character"> | string
    model?: StringFilter<"Character"> | string
    temperature?: FloatFilter<"Character"> | number
    maxTokens?: IntFilter<"Character"> | number
    isPublic?: BoolFilter<"Character"> | boolean
    isNSFW?: BoolFilter<"Character"> | boolean
    isFeatured?: BoolFilter<"Character"> | boolean
    rating?: FloatFilter<"Character"> | number
    ratingCount?: IntFilter<"Character"> | number
    chatCount?: IntFilter<"Character"> | number
    favoriteCount?: IntFilter<"Character"> | number
    importedFrom?: StringNullableFilter<"Character"> | string | null
    version?: IntFilter<"Character"> | number
    metadata?: StringNullableFilter<"Character"> | string | null
    createdAt?: DateTimeFilter<"Character"> | Date | string
    updatedAt?: DateTimeFilter<"Character"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    chatSessions?: ChatSessionListRelationFilter
    messages?: MessageListRelationFilter
    favorites?: CharacterFavoriteListRelationFilter
    ratings?: CharacterRatingListRelationFilter
    chatParticipants?: ChatParticipantListRelationFilter
    chatMessages?: ChatMessageListRelationFilter
  }

  export type CharacterOrderByWithRelationInput = {
    id?: SortOrder
    creatorId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    fullDescription?: SortOrderInput | SortOrder
    personality?: SortOrderInput | SortOrder
    backstory?: SortOrderInput | SortOrder
    speakingStyle?: SortOrderInput | SortOrder
    scenario?: SortOrderInput | SortOrder
    firstMessage?: SortOrderInput | SortOrder
    systemPrompt?: SortOrderInput | SortOrder
    exampleDialogs?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    coverImage?: SortOrderInput | SortOrder
    category?: SortOrder
    tags?: SortOrder
    language?: SortOrder
    model?: SortOrder
    temperature?: SortOrder
    maxTokens?: SortOrder
    isPublic?: SortOrder
    isNSFW?: SortOrder
    isFeatured?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    chatCount?: SortOrder
    favoriteCount?: SortOrder
    importedFrom?: SortOrderInput | SortOrder
    version?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creator?: UserOrderByWithRelationInput
    chatSessions?: ChatSessionOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    favorites?: CharacterFavoriteOrderByRelationAggregateInput
    ratings?: CharacterRatingOrderByRelationAggregateInput
    chatParticipants?: ChatParticipantOrderByRelationAggregateInput
    chatMessages?: ChatMessageOrderByRelationAggregateInput
  }

  export type CharacterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_creatorId?: CharacterNameCreatorIdCompoundUniqueInput
    AND?: CharacterWhereInput | CharacterWhereInput[]
    OR?: CharacterWhereInput[]
    NOT?: CharacterWhereInput | CharacterWhereInput[]
    creatorId?: StringFilter<"Character"> | string
    name?: StringFilter<"Character"> | string
    description?: StringFilter<"Character"> | string
    fullDescription?: StringNullableFilter<"Character"> | string | null
    personality?: StringNullableFilter<"Character"> | string | null
    backstory?: StringNullableFilter<"Character"> | string | null
    speakingStyle?: StringNullableFilter<"Character"> | string | null
    scenario?: StringNullableFilter<"Character"> | string | null
    firstMessage?: StringNullableFilter<"Character"> | string | null
    systemPrompt?: StringNullableFilter<"Character"> | string | null
    exampleDialogs?: StringNullableFilter<"Character"> | string | null
    avatar?: StringNullableFilter<"Character"> | string | null
    coverImage?: StringNullableFilter<"Character"> | string | null
    category?: StringFilter<"Character"> | string
    tags?: StringFilter<"Character"> | string
    language?: StringFilter<"Character"> | string
    model?: StringFilter<"Character"> | string
    temperature?: FloatFilter<"Character"> | number
    maxTokens?: IntFilter<"Character"> | number
    isPublic?: BoolFilter<"Character"> | boolean
    isNSFW?: BoolFilter<"Character"> | boolean
    isFeatured?: BoolFilter<"Character"> | boolean
    rating?: FloatFilter<"Character"> | number
    ratingCount?: IntFilter<"Character"> | number
    chatCount?: IntFilter<"Character"> | number
    favoriteCount?: IntFilter<"Character"> | number
    importedFrom?: StringNullableFilter<"Character"> | string | null
    version?: IntFilter<"Character"> | number
    metadata?: StringNullableFilter<"Character"> | string | null
    createdAt?: DateTimeFilter<"Character"> | Date | string
    updatedAt?: DateTimeFilter<"Character"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    chatSessions?: ChatSessionListRelationFilter
    messages?: MessageListRelationFilter
    favorites?: CharacterFavoriteListRelationFilter
    ratings?: CharacterRatingListRelationFilter
    chatParticipants?: ChatParticipantListRelationFilter
    chatMessages?: ChatMessageListRelationFilter
  }, "id" | "name_creatorId">

  export type CharacterOrderByWithAggregationInput = {
    id?: SortOrder
    creatorId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    fullDescription?: SortOrderInput | SortOrder
    personality?: SortOrderInput | SortOrder
    backstory?: SortOrderInput | SortOrder
    speakingStyle?: SortOrderInput | SortOrder
    scenario?: SortOrderInput | SortOrder
    firstMessage?: SortOrderInput | SortOrder
    systemPrompt?: SortOrderInput | SortOrder
    exampleDialogs?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    coverImage?: SortOrderInput | SortOrder
    category?: SortOrder
    tags?: SortOrder
    language?: SortOrder
    model?: SortOrder
    temperature?: SortOrder
    maxTokens?: SortOrder
    isPublic?: SortOrder
    isNSFW?: SortOrder
    isFeatured?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    chatCount?: SortOrder
    favoriteCount?: SortOrder
    importedFrom?: SortOrderInput | SortOrder
    version?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CharacterCountOrderByAggregateInput
    _avg?: CharacterAvgOrderByAggregateInput
    _max?: CharacterMaxOrderByAggregateInput
    _min?: CharacterMinOrderByAggregateInput
    _sum?: CharacterSumOrderByAggregateInput
  }

  export type CharacterScalarWhereWithAggregatesInput = {
    AND?: CharacterScalarWhereWithAggregatesInput | CharacterScalarWhereWithAggregatesInput[]
    OR?: CharacterScalarWhereWithAggregatesInput[]
    NOT?: CharacterScalarWhereWithAggregatesInput | CharacterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Character"> | string
    creatorId?: StringWithAggregatesFilter<"Character"> | string
    name?: StringWithAggregatesFilter<"Character"> | string
    description?: StringWithAggregatesFilter<"Character"> | string
    fullDescription?: StringNullableWithAggregatesFilter<"Character"> | string | null
    personality?: StringNullableWithAggregatesFilter<"Character"> | string | null
    backstory?: StringNullableWithAggregatesFilter<"Character"> | string | null
    speakingStyle?: StringNullableWithAggregatesFilter<"Character"> | string | null
    scenario?: StringNullableWithAggregatesFilter<"Character"> | string | null
    firstMessage?: StringNullableWithAggregatesFilter<"Character"> | string | null
    systemPrompt?: StringNullableWithAggregatesFilter<"Character"> | string | null
    exampleDialogs?: StringNullableWithAggregatesFilter<"Character"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"Character"> | string | null
    coverImage?: StringNullableWithAggregatesFilter<"Character"> | string | null
    category?: StringWithAggregatesFilter<"Character"> | string
    tags?: StringWithAggregatesFilter<"Character"> | string
    language?: StringWithAggregatesFilter<"Character"> | string
    model?: StringWithAggregatesFilter<"Character"> | string
    temperature?: FloatWithAggregatesFilter<"Character"> | number
    maxTokens?: IntWithAggregatesFilter<"Character"> | number
    isPublic?: BoolWithAggregatesFilter<"Character"> | boolean
    isNSFW?: BoolWithAggregatesFilter<"Character"> | boolean
    isFeatured?: BoolWithAggregatesFilter<"Character"> | boolean
    rating?: FloatWithAggregatesFilter<"Character"> | number
    ratingCount?: IntWithAggregatesFilter<"Character"> | number
    chatCount?: IntWithAggregatesFilter<"Character"> | number
    favoriteCount?: IntWithAggregatesFilter<"Character"> | number
    importedFrom?: StringNullableWithAggregatesFilter<"Character"> | string | null
    version?: IntWithAggregatesFilter<"Character"> | number
    metadata?: StringNullableWithAggregatesFilter<"Character"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Character"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Character"> | Date | string
  }

  export type ChatSessionWhereInput = {
    AND?: ChatSessionWhereInput | ChatSessionWhereInput[]
    OR?: ChatSessionWhereInput[]
    NOT?: ChatSessionWhereInput | ChatSessionWhereInput[]
    id?: StringFilter<"ChatSession"> | string
    userId?: StringFilter<"ChatSession"> | string
    characterId?: StringFilter<"ChatSession"> | string
    title?: StringNullableFilter<"ChatSession"> | string | null
    model?: StringFilter<"ChatSession"> | string
    presetId?: StringNullableFilter<"ChatSession"> | string | null
    worldInfoId?: StringNullableFilter<"ChatSession"> | string | null
    lastMessageAt?: DateTimeNullableFilter<"ChatSession"> | Date | string | null
    messageCount?: IntFilter<"ChatSession"> | number
    totalTokens?: IntFilter<"ChatSession"> | number
    isArchived?: BoolFilter<"ChatSession"> | boolean
    isPinned?: BoolFilter<"ChatSession"> | boolean
    metadata?: StringNullableFilter<"ChatSession"> | string | null
    createdAt?: DateTimeFilter<"ChatSession"> | Date | string
    updatedAt?: DateTimeFilter<"ChatSession"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    character?: XOR<CharacterRelationFilter, CharacterWhereInput>
    messages?: MessageListRelationFilter
  }

  export type ChatSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    title?: SortOrderInput | SortOrder
    model?: SortOrder
    presetId?: SortOrderInput | SortOrder
    worldInfoId?: SortOrderInput | SortOrder
    lastMessageAt?: SortOrderInput | SortOrder
    messageCount?: SortOrder
    totalTokens?: SortOrder
    isArchived?: SortOrder
    isPinned?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    character?: CharacterOrderByWithRelationInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type ChatSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatSessionWhereInput | ChatSessionWhereInput[]
    OR?: ChatSessionWhereInput[]
    NOT?: ChatSessionWhereInput | ChatSessionWhereInput[]
    userId?: StringFilter<"ChatSession"> | string
    characterId?: StringFilter<"ChatSession"> | string
    title?: StringNullableFilter<"ChatSession"> | string | null
    model?: StringFilter<"ChatSession"> | string
    presetId?: StringNullableFilter<"ChatSession"> | string | null
    worldInfoId?: StringNullableFilter<"ChatSession"> | string | null
    lastMessageAt?: DateTimeNullableFilter<"ChatSession"> | Date | string | null
    messageCount?: IntFilter<"ChatSession"> | number
    totalTokens?: IntFilter<"ChatSession"> | number
    isArchived?: BoolFilter<"ChatSession"> | boolean
    isPinned?: BoolFilter<"ChatSession"> | boolean
    metadata?: StringNullableFilter<"ChatSession"> | string | null
    createdAt?: DateTimeFilter<"ChatSession"> | Date | string
    updatedAt?: DateTimeFilter<"ChatSession"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    character?: XOR<CharacterRelationFilter, CharacterWhereInput>
    messages?: MessageListRelationFilter
  }, "id">

  export type ChatSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    title?: SortOrderInput | SortOrder
    model?: SortOrder
    presetId?: SortOrderInput | SortOrder
    worldInfoId?: SortOrderInput | SortOrder
    lastMessageAt?: SortOrderInput | SortOrder
    messageCount?: SortOrder
    totalTokens?: SortOrder
    isArchived?: SortOrder
    isPinned?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChatSessionCountOrderByAggregateInput
    _avg?: ChatSessionAvgOrderByAggregateInput
    _max?: ChatSessionMaxOrderByAggregateInput
    _min?: ChatSessionMinOrderByAggregateInput
    _sum?: ChatSessionSumOrderByAggregateInput
  }

  export type ChatSessionScalarWhereWithAggregatesInput = {
    AND?: ChatSessionScalarWhereWithAggregatesInput | ChatSessionScalarWhereWithAggregatesInput[]
    OR?: ChatSessionScalarWhereWithAggregatesInput[]
    NOT?: ChatSessionScalarWhereWithAggregatesInput | ChatSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatSession"> | string
    userId?: StringWithAggregatesFilter<"ChatSession"> | string
    characterId?: StringWithAggregatesFilter<"ChatSession"> | string
    title?: StringNullableWithAggregatesFilter<"ChatSession"> | string | null
    model?: StringWithAggregatesFilter<"ChatSession"> | string
    presetId?: StringNullableWithAggregatesFilter<"ChatSession"> | string | null
    worldInfoId?: StringNullableWithAggregatesFilter<"ChatSession"> | string | null
    lastMessageAt?: DateTimeNullableWithAggregatesFilter<"ChatSession"> | Date | string | null
    messageCount?: IntWithAggregatesFilter<"ChatSession"> | number
    totalTokens?: IntWithAggregatesFilter<"ChatSession"> | number
    isArchived?: BoolWithAggregatesFilter<"ChatSession"> | boolean
    isPinned?: BoolWithAggregatesFilter<"ChatSession"> | boolean
    metadata?: StringNullableWithAggregatesFilter<"ChatSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ChatSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatSession"> | Date | string
  }

  export type ChatRoomWhereInput = {
    AND?: ChatRoomWhereInput | ChatRoomWhereInput[]
    OR?: ChatRoomWhereInput[]
    NOT?: ChatRoomWhereInput | ChatRoomWhereInput[]
    id?: StringFilter<"ChatRoom"> | string
    name?: StringFilter<"ChatRoom"> | string
    description?: StringNullableFilter<"ChatRoom"> | string | null
    ownerId?: StringFilter<"ChatRoom"> | string
    maxParticipants?: IntFilter<"ChatRoom"> | number
    isPrivate?: BoolFilter<"ChatRoom"> | boolean
    allowSpectators?: BoolFilter<"ChatRoom"> | boolean
    roomType?: StringFilter<"ChatRoom"> | string
    settings?: StringNullableFilter<"ChatRoom"> | string | null
    lastMessageAt?: DateTimeNullableFilter<"ChatRoom"> | Date | string | null
    messageCount?: IntFilter<"ChatRoom"> | number
    totalTokens?: IntFilter<"ChatRoom"> | number
    isActive?: BoolFilter<"ChatRoom"> | boolean
    createdAt?: DateTimeFilter<"ChatRoom"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoom"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    participants?: ChatParticipantListRelationFilter
    messages?: ChatMessageListRelationFilter
  }

  export type ChatRoomOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    maxParticipants?: SortOrder
    isPrivate?: SortOrder
    allowSpectators?: SortOrder
    roomType?: SortOrder
    settings?: SortOrderInput | SortOrder
    lastMessageAt?: SortOrderInput | SortOrder
    messageCount?: SortOrder
    totalTokens?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    participants?: ChatParticipantOrderByRelationAggregateInput
    messages?: ChatMessageOrderByRelationAggregateInput
  }

  export type ChatRoomWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatRoomWhereInput | ChatRoomWhereInput[]
    OR?: ChatRoomWhereInput[]
    NOT?: ChatRoomWhereInput | ChatRoomWhereInput[]
    name?: StringFilter<"ChatRoom"> | string
    description?: StringNullableFilter<"ChatRoom"> | string | null
    ownerId?: StringFilter<"ChatRoom"> | string
    maxParticipants?: IntFilter<"ChatRoom"> | number
    isPrivate?: BoolFilter<"ChatRoom"> | boolean
    allowSpectators?: BoolFilter<"ChatRoom"> | boolean
    roomType?: StringFilter<"ChatRoom"> | string
    settings?: StringNullableFilter<"ChatRoom"> | string | null
    lastMessageAt?: DateTimeNullableFilter<"ChatRoom"> | Date | string | null
    messageCount?: IntFilter<"ChatRoom"> | number
    totalTokens?: IntFilter<"ChatRoom"> | number
    isActive?: BoolFilter<"ChatRoom"> | boolean
    createdAt?: DateTimeFilter<"ChatRoom"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoom"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    participants?: ChatParticipantListRelationFilter
    messages?: ChatMessageListRelationFilter
  }, "id">

  export type ChatRoomOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    maxParticipants?: SortOrder
    isPrivate?: SortOrder
    allowSpectators?: SortOrder
    roomType?: SortOrder
    settings?: SortOrderInput | SortOrder
    lastMessageAt?: SortOrderInput | SortOrder
    messageCount?: SortOrder
    totalTokens?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChatRoomCountOrderByAggregateInput
    _avg?: ChatRoomAvgOrderByAggregateInput
    _max?: ChatRoomMaxOrderByAggregateInput
    _min?: ChatRoomMinOrderByAggregateInput
    _sum?: ChatRoomSumOrderByAggregateInput
  }

  export type ChatRoomScalarWhereWithAggregatesInput = {
    AND?: ChatRoomScalarWhereWithAggregatesInput | ChatRoomScalarWhereWithAggregatesInput[]
    OR?: ChatRoomScalarWhereWithAggregatesInput[]
    NOT?: ChatRoomScalarWhereWithAggregatesInput | ChatRoomScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatRoom"> | string
    name?: StringWithAggregatesFilter<"ChatRoom"> | string
    description?: StringNullableWithAggregatesFilter<"ChatRoom"> | string | null
    ownerId?: StringWithAggregatesFilter<"ChatRoom"> | string
    maxParticipants?: IntWithAggregatesFilter<"ChatRoom"> | number
    isPrivate?: BoolWithAggregatesFilter<"ChatRoom"> | boolean
    allowSpectators?: BoolWithAggregatesFilter<"ChatRoom"> | boolean
    roomType?: StringWithAggregatesFilter<"ChatRoom"> | string
    settings?: StringNullableWithAggregatesFilter<"ChatRoom"> | string | null
    lastMessageAt?: DateTimeNullableWithAggregatesFilter<"ChatRoom"> | Date | string | null
    messageCount?: IntWithAggregatesFilter<"ChatRoom"> | number
    totalTokens?: IntWithAggregatesFilter<"ChatRoom"> | number
    isActive?: BoolWithAggregatesFilter<"ChatRoom"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ChatRoom"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatRoom"> | Date | string
  }

  export type ChatParticipantWhereInput = {
    AND?: ChatParticipantWhereInput | ChatParticipantWhereInput[]
    OR?: ChatParticipantWhereInput[]
    NOT?: ChatParticipantWhereInput | ChatParticipantWhereInput[]
    id?: StringFilter<"ChatParticipant"> | string
    roomId?: StringFilter<"ChatParticipant"> | string
    userId?: StringNullableFilter<"ChatParticipant"> | string | null
    characterId?: StringNullableFilter<"ChatParticipant"> | string | null
    role?: StringFilter<"ChatParticipant"> | string
    permissions?: StringFilter<"ChatParticipant"> | string
    joinedAt?: DateTimeFilter<"ChatParticipant"> | Date | string
    lastSeenAt?: DateTimeFilter<"ChatParticipant"> | Date | string
    isActive?: BoolFilter<"ChatParticipant"> | boolean
    isMuted?: BoolFilter<"ChatParticipant"> | boolean
    room?: XOR<ChatRoomRelationFilter, ChatRoomWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    character?: XOR<CharacterNullableRelationFilter, CharacterWhereInput> | null
  }

  export type ChatParticipantOrderByWithRelationInput = {
    id?: SortOrder
    roomId?: SortOrder
    userId?: SortOrderInput | SortOrder
    characterId?: SortOrderInput | SortOrder
    role?: SortOrder
    permissions?: SortOrder
    joinedAt?: SortOrder
    lastSeenAt?: SortOrder
    isActive?: SortOrder
    isMuted?: SortOrder
    room?: ChatRoomOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    character?: CharacterOrderByWithRelationInput
  }

  export type ChatParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    roomId_userId?: ChatParticipantRoomIdUserIdCompoundUniqueInput
    roomId_characterId?: ChatParticipantRoomIdCharacterIdCompoundUniqueInput
    AND?: ChatParticipantWhereInput | ChatParticipantWhereInput[]
    OR?: ChatParticipantWhereInput[]
    NOT?: ChatParticipantWhereInput | ChatParticipantWhereInput[]
    roomId?: StringFilter<"ChatParticipant"> | string
    userId?: StringNullableFilter<"ChatParticipant"> | string | null
    characterId?: StringNullableFilter<"ChatParticipant"> | string | null
    role?: StringFilter<"ChatParticipant"> | string
    permissions?: StringFilter<"ChatParticipant"> | string
    joinedAt?: DateTimeFilter<"ChatParticipant"> | Date | string
    lastSeenAt?: DateTimeFilter<"ChatParticipant"> | Date | string
    isActive?: BoolFilter<"ChatParticipant"> | boolean
    isMuted?: BoolFilter<"ChatParticipant"> | boolean
    room?: XOR<ChatRoomRelationFilter, ChatRoomWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    character?: XOR<CharacterNullableRelationFilter, CharacterWhereInput> | null
  }, "id" | "roomId_userId" | "roomId_characterId">

  export type ChatParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    roomId?: SortOrder
    userId?: SortOrderInput | SortOrder
    characterId?: SortOrderInput | SortOrder
    role?: SortOrder
    permissions?: SortOrder
    joinedAt?: SortOrder
    lastSeenAt?: SortOrder
    isActive?: SortOrder
    isMuted?: SortOrder
    _count?: ChatParticipantCountOrderByAggregateInput
    _max?: ChatParticipantMaxOrderByAggregateInput
    _min?: ChatParticipantMinOrderByAggregateInput
  }

  export type ChatParticipantScalarWhereWithAggregatesInput = {
    AND?: ChatParticipantScalarWhereWithAggregatesInput | ChatParticipantScalarWhereWithAggregatesInput[]
    OR?: ChatParticipantScalarWhereWithAggregatesInput[]
    NOT?: ChatParticipantScalarWhereWithAggregatesInput | ChatParticipantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatParticipant"> | string
    roomId?: StringWithAggregatesFilter<"ChatParticipant"> | string
    userId?: StringNullableWithAggregatesFilter<"ChatParticipant"> | string | null
    characterId?: StringNullableWithAggregatesFilter<"ChatParticipant"> | string | null
    role?: StringWithAggregatesFilter<"ChatParticipant"> | string
    permissions?: StringWithAggregatesFilter<"ChatParticipant"> | string
    joinedAt?: DateTimeWithAggregatesFilter<"ChatParticipant"> | Date | string
    lastSeenAt?: DateTimeWithAggregatesFilter<"ChatParticipant"> | Date | string
    isActive?: BoolWithAggregatesFilter<"ChatParticipant"> | boolean
    isMuted?: BoolWithAggregatesFilter<"ChatParticipant"> | boolean
  }

  export type ChatMessageWhereInput = {
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    roomId?: StringFilter<"ChatMessage"> | string
    senderId?: StringNullableFilter<"ChatMessage"> | string | null
    characterId?: StringNullableFilter<"ChatMessage"> | string | null
    content?: StringFilter<"ChatMessage"> | string
    messageType?: StringFilter<"ChatMessage"> | string
    replyToId?: StringNullableFilter<"ChatMessage"> | string | null
    tokens?: IntFilter<"ChatMessage"> | number
    isEdited?: BoolFilter<"ChatMessage"> | boolean
    isDeleted?: BoolFilter<"ChatMessage"> | boolean
    metadata?: StringNullableFilter<"ChatMessage"> | string | null
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    updatedAt?: DateTimeFilter<"ChatMessage"> | Date | string
    room?: XOR<ChatRoomRelationFilter, ChatRoomWhereInput>
    sender?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    character?: XOR<CharacterNullableRelationFilter, CharacterWhereInput> | null
    replyTo?: XOR<ChatMessageNullableRelationFilter, ChatMessageWhereInput> | null
    replies?: ChatMessageListRelationFilter
  }

  export type ChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    roomId?: SortOrder
    senderId?: SortOrderInput | SortOrder
    characterId?: SortOrderInput | SortOrder
    content?: SortOrder
    messageType?: SortOrder
    replyToId?: SortOrderInput | SortOrder
    tokens?: SortOrder
    isEdited?: SortOrder
    isDeleted?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    room?: ChatRoomOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
    character?: CharacterOrderByWithRelationInput
    replyTo?: ChatMessageOrderByWithRelationInput
    replies?: ChatMessageOrderByRelationAggregateInput
  }

  export type ChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    roomId?: StringFilter<"ChatMessage"> | string
    senderId?: StringNullableFilter<"ChatMessage"> | string | null
    characterId?: StringNullableFilter<"ChatMessage"> | string | null
    content?: StringFilter<"ChatMessage"> | string
    messageType?: StringFilter<"ChatMessage"> | string
    replyToId?: StringNullableFilter<"ChatMessage"> | string | null
    tokens?: IntFilter<"ChatMessage"> | number
    isEdited?: BoolFilter<"ChatMessage"> | boolean
    isDeleted?: BoolFilter<"ChatMessage"> | boolean
    metadata?: StringNullableFilter<"ChatMessage"> | string | null
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    updatedAt?: DateTimeFilter<"ChatMessage"> | Date | string
    room?: XOR<ChatRoomRelationFilter, ChatRoomWhereInput>
    sender?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    character?: XOR<CharacterNullableRelationFilter, CharacterWhereInput> | null
    replyTo?: XOR<ChatMessageNullableRelationFilter, ChatMessageWhereInput> | null
    replies?: ChatMessageListRelationFilter
  }, "id">

  export type ChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    roomId?: SortOrder
    senderId?: SortOrderInput | SortOrder
    characterId?: SortOrderInput | SortOrder
    content?: SortOrder
    messageType?: SortOrder
    replyToId?: SortOrderInput | SortOrder
    tokens?: SortOrder
    isEdited?: SortOrder
    isDeleted?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChatMessageCountOrderByAggregateInput
    _avg?: ChatMessageAvgOrderByAggregateInput
    _max?: ChatMessageMaxOrderByAggregateInput
    _min?: ChatMessageMinOrderByAggregateInput
    _sum?: ChatMessageSumOrderByAggregateInput
  }

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    OR?: ChatMessageScalarWhereWithAggregatesInput[]
    NOT?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatMessage"> | string
    roomId?: StringWithAggregatesFilter<"ChatMessage"> | string
    senderId?: StringNullableWithAggregatesFilter<"ChatMessage"> | string | null
    characterId?: StringNullableWithAggregatesFilter<"ChatMessage"> | string | null
    content?: StringWithAggregatesFilter<"ChatMessage"> | string
    messageType?: StringWithAggregatesFilter<"ChatMessage"> | string
    replyToId?: StringNullableWithAggregatesFilter<"ChatMessage"> | string | null
    tokens?: IntWithAggregatesFilter<"ChatMessage"> | number
    isEdited?: BoolWithAggregatesFilter<"ChatMessage"> | boolean
    isDeleted?: BoolWithAggregatesFilter<"ChatMessage"> | boolean
    metadata?: StringNullableWithAggregatesFilter<"ChatMessage"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: StringFilter<"Transaction"> | string
    userId?: StringFilter<"Transaction"> | string
    type?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    currency?: StringFilter<"Transaction"> | string
    status?: StringFilter<"Transaction"> | string
    method?: StringFilter<"Transaction"> | string
    externalId?: StringNullableFilter<"Transaction"> | string | null
    description?: StringFilter<"Transaction"> | string
    metadata?: StringNullableFilter<"Transaction"> | string | null
    completedAt?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    method?: SortOrder
    externalId?: SortOrderInput | SortOrder
    description?: SortOrder
    metadata?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    userId?: StringFilter<"Transaction"> | string
    type?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    currency?: StringFilter<"Transaction"> | string
    status?: StringFilter<"Transaction"> | string
    method?: StringFilter<"Transaction"> | string
    externalId?: StringNullableFilter<"Transaction"> | string | null
    description?: StringFilter<"Transaction"> | string
    metadata?: StringNullableFilter<"Transaction"> | string | null
    completedAt?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    method?: SortOrder
    externalId?: SortOrderInput | SortOrder
    description?: SortOrder
    metadata?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transaction"> | string
    userId?: StringWithAggregatesFilter<"Transaction"> | string
    type?: StringWithAggregatesFilter<"Transaction"> | string
    amount?: FloatWithAggregatesFilter<"Transaction"> | number
    currency?: StringWithAggregatesFilter<"Transaction"> | string
    status?: StringWithAggregatesFilter<"Transaction"> | string
    method?: StringWithAggregatesFilter<"Transaction"> | string
    externalId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    description?: StringWithAggregatesFilter<"Transaction"> | string
    metadata?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"Transaction"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    sessionId?: StringFilter<"Message"> | string
    userId?: StringNullableFilter<"Message"> | string | null
    characterId?: StringNullableFilter<"Message"> | string | null
    role?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    tokens?: IntFilter<"Message"> | number
    edited?: BoolFilter<"Message"> | boolean
    deleted?: BoolFilter<"Message"> | boolean
    metadata?: StringNullableFilter<"Message"> | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    session?: XOR<ChatSessionRelationFilter, ChatSessionWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    character?: XOR<CharacterNullableRelationFilter, CharacterWhereInput> | null
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrderInput | SortOrder
    characterId?: SortOrderInput | SortOrder
    role?: SortOrder
    content?: SortOrder
    tokens?: SortOrder
    edited?: SortOrder
    deleted?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    session?: ChatSessionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    character?: CharacterOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    sessionId?: StringFilter<"Message"> | string
    userId?: StringNullableFilter<"Message"> | string | null
    characterId?: StringNullableFilter<"Message"> | string | null
    role?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    tokens?: IntFilter<"Message"> | number
    edited?: BoolFilter<"Message"> | boolean
    deleted?: BoolFilter<"Message"> | boolean
    metadata?: StringNullableFilter<"Message"> | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    session?: XOR<ChatSessionRelationFilter, ChatSessionWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    character?: XOR<CharacterNullableRelationFilter, CharacterWhereInput> | null
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrderInput | SortOrder
    characterId?: SortOrderInput | SortOrder
    role?: SortOrder
    content?: SortOrder
    tokens?: SortOrder
    edited?: SortOrder
    deleted?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    sessionId?: StringWithAggregatesFilter<"Message"> | string
    userId?: StringNullableWithAggregatesFilter<"Message"> | string | null
    characterId?: StringNullableWithAggregatesFilter<"Message"> | string | null
    role?: StringWithAggregatesFilter<"Message"> | string
    content?: StringWithAggregatesFilter<"Message"> | string
    tokens?: IntWithAggregatesFilter<"Message"> | number
    edited?: BoolWithAggregatesFilter<"Message"> | boolean
    deleted?: BoolWithAggregatesFilter<"Message"> | boolean
    metadata?: StringNullableWithAggregatesFilter<"Message"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
  }

  export type CharacterFavoriteWhereInput = {
    AND?: CharacterFavoriteWhereInput | CharacterFavoriteWhereInput[]
    OR?: CharacterFavoriteWhereInput[]
    NOT?: CharacterFavoriteWhereInput | CharacterFavoriteWhereInput[]
    id?: StringFilter<"CharacterFavorite"> | string
    userId?: StringFilter<"CharacterFavorite"> | string
    characterId?: StringFilter<"CharacterFavorite"> | string
    createdAt?: DateTimeFilter<"CharacterFavorite"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    character?: XOR<CharacterRelationFilter, CharacterWhereInput>
  }

  export type CharacterFavoriteOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    character?: CharacterOrderByWithRelationInput
  }

  export type CharacterFavoriteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_characterId?: CharacterFavoriteUserIdCharacterIdCompoundUniqueInput
    AND?: CharacterFavoriteWhereInput | CharacterFavoriteWhereInput[]
    OR?: CharacterFavoriteWhereInput[]
    NOT?: CharacterFavoriteWhereInput | CharacterFavoriteWhereInput[]
    userId?: StringFilter<"CharacterFavorite"> | string
    characterId?: StringFilter<"CharacterFavorite"> | string
    createdAt?: DateTimeFilter<"CharacterFavorite"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    character?: XOR<CharacterRelationFilter, CharacterWhereInput>
  }, "id" | "userId_characterId">

  export type CharacterFavoriteOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    createdAt?: SortOrder
    _count?: CharacterFavoriteCountOrderByAggregateInput
    _max?: CharacterFavoriteMaxOrderByAggregateInput
    _min?: CharacterFavoriteMinOrderByAggregateInput
  }

  export type CharacterFavoriteScalarWhereWithAggregatesInput = {
    AND?: CharacterFavoriteScalarWhereWithAggregatesInput | CharacterFavoriteScalarWhereWithAggregatesInput[]
    OR?: CharacterFavoriteScalarWhereWithAggregatesInput[]
    NOT?: CharacterFavoriteScalarWhereWithAggregatesInput | CharacterFavoriteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CharacterFavorite"> | string
    userId?: StringWithAggregatesFilter<"CharacterFavorite"> | string
    characterId?: StringWithAggregatesFilter<"CharacterFavorite"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CharacterFavorite"> | Date | string
  }

  export type CharacterRatingWhereInput = {
    AND?: CharacterRatingWhereInput | CharacterRatingWhereInput[]
    OR?: CharacterRatingWhereInput[]
    NOT?: CharacterRatingWhereInput | CharacterRatingWhereInput[]
    id?: StringFilter<"CharacterRating"> | string
    userId?: StringFilter<"CharacterRating"> | string
    characterId?: StringFilter<"CharacterRating"> | string
    rating?: FloatFilter<"CharacterRating"> | number
    comment?: StringNullableFilter<"CharacterRating"> | string | null
    createdAt?: DateTimeFilter<"CharacterRating"> | Date | string
    updatedAt?: DateTimeFilter<"CharacterRating"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    character?: XOR<CharacterRelationFilter, CharacterWhereInput>
  }

  export type CharacterRatingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    character?: CharacterOrderByWithRelationInput
  }

  export type CharacterRatingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_characterId?: CharacterRatingUserIdCharacterIdCompoundUniqueInput
    AND?: CharacterRatingWhereInput | CharacterRatingWhereInput[]
    OR?: CharacterRatingWhereInput[]
    NOT?: CharacterRatingWhereInput | CharacterRatingWhereInput[]
    userId?: StringFilter<"CharacterRating"> | string
    characterId?: StringFilter<"CharacterRating"> | string
    rating?: FloatFilter<"CharacterRating"> | number
    comment?: StringNullableFilter<"CharacterRating"> | string | null
    createdAt?: DateTimeFilter<"CharacterRating"> | Date | string
    updatedAt?: DateTimeFilter<"CharacterRating"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    character?: XOR<CharacterRelationFilter, CharacterWhereInput>
  }, "id" | "userId_characterId">

  export type CharacterRatingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CharacterRatingCountOrderByAggregateInput
    _avg?: CharacterRatingAvgOrderByAggregateInput
    _max?: CharacterRatingMaxOrderByAggregateInput
    _min?: CharacterRatingMinOrderByAggregateInput
    _sum?: CharacterRatingSumOrderByAggregateInput
  }

  export type CharacterRatingScalarWhereWithAggregatesInput = {
    AND?: CharacterRatingScalarWhereWithAggregatesInput | CharacterRatingScalarWhereWithAggregatesInput[]
    OR?: CharacterRatingScalarWhereWithAggregatesInput[]
    NOT?: CharacterRatingScalarWhereWithAggregatesInput | CharacterRatingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CharacterRating"> | string
    userId?: StringWithAggregatesFilter<"CharacterRating"> | string
    characterId?: StringWithAggregatesFilter<"CharacterRating"> | string
    rating?: FloatWithAggregatesFilter<"CharacterRating"> | number
    comment?: StringNullableWithAggregatesFilter<"CharacterRating"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CharacterRating"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CharacterRating"> | Date | string
  }

  export type AdminLogWhereInput = {
    AND?: AdminLogWhereInput | AdminLogWhereInput[]
    OR?: AdminLogWhereInput[]
    NOT?: AdminLogWhereInput | AdminLogWhereInput[]
    id?: StringFilter<"AdminLog"> | string
    adminId?: StringFilter<"AdminLog"> | string
    action?: StringFilter<"AdminLog"> | string
    targetType?: StringFilter<"AdminLog"> | string
    targetId?: StringNullableFilter<"AdminLog"> | string | null
    details?: StringNullableFilter<"AdminLog"> | string | null
    ip?: StringNullableFilter<"AdminLog"> | string | null
    userAgent?: StringNullableFilter<"AdminLog"> | string | null
    createdAt?: DateTimeFilter<"AdminLog"> | Date | string
  }

  export type AdminLogOrderByWithRelationInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type AdminLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdminLogWhereInput | AdminLogWhereInput[]
    OR?: AdminLogWhereInput[]
    NOT?: AdminLogWhereInput | AdminLogWhereInput[]
    adminId?: StringFilter<"AdminLog"> | string
    action?: StringFilter<"AdminLog"> | string
    targetType?: StringFilter<"AdminLog"> | string
    targetId?: StringNullableFilter<"AdminLog"> | string | null
    details?: StringNullableFilter<"AdminLog"> | string | null
    ip?: StringNullableFilter<"AdminLog"> | string | null
    userAgent?: StringNullableFilter<"AdminLog"> | string | null
    createdAt?: DateTimeFilter<"AdminLog"> | Date | string
  }, "id">

  export type AdminLogOrderByWithAggregationInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AdminLogCountOrderByAggregateInput
    _max?: AdminLogMaxOrderByAggregateInput
    _min?: AdminLogMinOrderByAggregateInput
  }

  export type AdminLogScalarWhereWithAggregatesInput = {
    AND?: AdminLogScalarWhereWithAggregatesInput | AdminLogScalarWhereWithAggregatesInput[]
    OR?: AdminLogScalarWhereWithAggregatesInput[]
    NOT?: AdminLogScalarWhereWithAggregatesInput | AdminLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdminLog"> | string
    adminId?: StringWithAggregatesFilter<"AdminLog"> | string
    action?: StringWithAggregatesFilter<"AdminLog"> | string
    targetType?: StringWithAggregatesFilter<"AdminLog"> | string
    targetId?: StringNullableWithAggregatesFilter<"AdminLog"> | string | null
    details?: StringNullableWithAggregatesFilter<"AdminLog"> | string | null
    ip?: StringNullableWithAggregatesFilter<"AdminLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AdminLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AdminLog"> | Date | string
  }

  export type UsageLogWhereInput = {
    AND?: UsageLogWhereInput | UsageLogWhereInput[]
    OR?: UsageLogWhereInput[]
    NOT?: UsageLogWhereInput | UsageLogWhereInput[]
    id?: StringFilter<"UsageLog"> | string
    userId?: StringNullableFilter<"UsageLog"> | string | null
    endpoint?: StringFilter<"UsageLog"> | string
    method?: StringFilter<"UsageLog"> | string
    statusCode?: IntFilter<"UsageLog"> | number
    responseTime?: IntFilter<"UsageLog"> | number
    ip?: StringNullableFilter<"UsageLog"> | string | null
    userAgent?: StringNullableFilter<"UsageLog"> | string | null
    createdAt?: DateTimeFilter<"UsageLog"> | Date | string
  }

  export type UsageLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    responseTime?: SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type UsageLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UsageLogWhereInput | UsageLogWhereInput[]
    OR?: UsageLogWhereInput[]
    NOT?: UsageLogWhereInput | UsageLogWhereInput[]
    userId?: StringNullableFilter<"UsageLog"> | string | null
    endpoint?: StringFilter<"UsageLog"> | string
    method?: StringFilter<"UsageLog"> | string
    statusCode?: IntFilter<"UsageLog"> | number
    responseTime?: IntFilter<"UsageLog"> | number
    ip?: StringNullableFilter<"UsageLog"> | string | null
    userAgent?: StringNullableFilter<"UsageLog"> | string | null
    createdAt?: DateTimeFilter<"UsageLog"> | Date | string
  }, "id">

  export type UsageLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    responseTime?: SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UsageLogCountOrderByAggregateInput
    _avg?: UsageLogAvgOrderByAggregateInput
    _max?: UsageLogMaxOrderByAggregateInput
    _min?: UsageLogMinOrderByAggregateInput
    _sum?: UsageLogSumOrderByAggregateInput
  }

  export type UsageLogScalarWhereWithAggregatesInput = {
    AND?: UsageLogScalarWhereWithAggregatesInput | UsageLogScalarWhereWithAggregatesInput[]
    OR?: UsageLogScalarWhereWithAggregatesInput[]
    NOT?: UsageLogScalarWhereWithAggregatesInput | UsageLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UsageLog"> | string
    userId?: StringNullableWithAggregatesFilter<"UsageLog"> | string | null
    endpoint?: StringWithAggregatesFilter<"UsageLog"> | string
    method?: StringWithAggregatesFilter<"UsageLog"> | string
    statusCode?: IntWithAggregatesFilter<"UsageLog"> | number
    responseTime?: IntWithAggregatesFilter<"UsageLog"> | number
    ip?: StringNullableWithAggregatesFilter<"UsageLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"UsageLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UsageLog"> | Date | string
  }

  export type AlertWhereInput = {
    AND?: AlertWhereInput | AlertWhereInput[]
    OR?: AlertWhereInput[]
    NOT?: AlertWhereInput | AlertWhereInput[]
    id?: StringFilter<"Alert"> | string
    type?: StringFilter<"Alert"> | string
    severity?: StringFilter<"Alert"> | string
    title?: StringFilter<"Alert"> | string
    message?: StringFilter<"Alert"> | string
    source?: StringNullableFilter<"Alert"> | string | null
    metadata?: StringNullableFilter<"Alert"> | string | null
    isRead?: BoolFilter<"Alert"> | boolean
    isResolved?: BoolFilter<"Alert"> | boolean
    createdAt?: DateTimeFilter<"Alert"> | Date | string
    updatedAt?: DateTimeFilter<"Alert"> | Date | string
  }

  export type AlertOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    message?: SortOrder
    source?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    isRead?: SortOrder
    isResolved?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlertWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AlertWhereInput | AlertWhereInput[]
    OR?: AlertWhereInput[]
    NOT?: AlertWhereInput | AlertWhereInput[]
    type?: StringFilter<"Alert"> | string
    severity?: StringFilter<"Alert"> | string
    title?: StringFilter<"Alert"> | string
    message?: StringFilter<"Alert"> | string
    source?: StringNullableFilter<"Alert"> | string | null
    metadata?: StringNullableFilter<"Alert"> | string | null
    isRead?: BoolFilter<"Alert"> | boolean
    isResolved?: BoolFilter<"Alert"> | boolean
    createdAt?: DateTimeFilter<"Alert"> | Date | string
    updatedAt?: DateTimeFilter<"Alert"> | Date | string
  }, "id">

  export type AlertOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    message?: SortOrder
    source?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    isRead?: SortOrder
    isResolved?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AlertCountOrderByAggregateInput
    _max?: AlertMaxOrderByAggregateInput
    _min?: AlertMinOrderByAggregateInput
  }

  export type AlertScalarWhereWithAggregatesInput = {
    AND?: AlertScalarWhereWithAggregatesInput | AlertScalarWhereWithAggregatesInput[]
    OR?: AlertScalarWhereWithAggregatesInput[]
    NOT?: AlertScalarWhereWithAggregatesInput | AlertScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Alert"> | string
    type?: StringWithAggregatesFilter<"Alert"> | string
    severity?: StringWithAggregatesFilter<"Alert"> | string
    title?: StringWithAggregatesFilter<"Alert"> | string
    message?: StringWithAggregatesFilter<"Alert"> | string
    source?: StringNullableWithAggregatesFilter<"Alert"> | string | null
    metadata?: StringNullableWithAggregatesFilter<"Alert"> | string | null
    isRead?: BoolWithAggregatesFilter<"Alert"> | boolean
    isResolved?: BoolWithAggregatesFilter<"Alert"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Alert"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Alert"> | Date | string
  }

  export type ChannelWhereInput = {
    AND?: ChannelWhereInput | ChannelWhereInput[]
    OR?: ChannelWhereInput[]
    NOT?: ChannelWhereInput | ChannelWhereInput[]
    id?: StringFilter<"Channel"> | string
    name?: StringFilter<"Channel"> | string
    provider?: StringFilter<"Channel"> | string
    apiKey?: StringFilter<"Channel"> | string
    baseUrl?: StringNullableFilter<"Channel"> | string | null
    models?: StringFilter<"Channel"> | string
    isActive?: BoolFilter<"Channel"> | boolean
    priority?: IntFilter<"Channel"> | number
    weight?: IntFilter<"Channel"> | number
    maxTokens?: IntNullableFilter<"Channel"> | number | null
    rpmLimit?: IntNullableFilter<"Channel"> | number | null
    tpmLimit?: IntNullableFilter<"Channel"> | number | null
    usageCount?: IntFilter<"Channel"> | number
    errorCount?: IntFilter<"Channel"> | number
    lastUsedAt?: DateTimeNullableFilter<"Channel"> | Date | string | null
    createdAt?: DateTimeFilter<"Channel"> | Date | string
    updatedAt?: DateTimeFilter<"Channel"> | Date | string
  }

  export type ChannelOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    apiKey?: SortOrder
    baseUrl?: SortOrderInput | SortOrder
    models?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    weight?: SortOrder
    maxTokens?: SortOrderInput | SortOrder
    rpmLimit?: SortOrderInput | SortOrder
    tpmLimit?: SortOrderInput | SortOrder
    usageCount?: SortOrder
    errorCount?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChannelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ChannelWhereInput | ChannelWhereInput[]
    OR?: ChannelWhereInput[]
    NOT?: ChannelWhereInput | ChannelWhereInput[]
    provider?: StringFilter<"Channel"> | string
    apiKey?: StringFilter<"Channel"> | string
    baseUrl?: StringNullableFilter<"Channel"> | string | null
    models?: StringFilter<"Channel"> | string
    isActive?: BoolFilter<"Channel"> | boolean
    priority?: IntFilter<"Channel"> | number
    weight?: IntFilter<"Channel"> | number
    maxTokens?: IntNullableFilter<"Channel"> | number | null
    rpmLimit?: IntNullableFilter<"Channel"> | number | null
    tpmLimit?: IntNullableFilter<"Channel"> | number | null
    usageCount?: IntFilter<"Channel"> | number
    errorCount?: IntFilter<"Channel"> | number
    lastUsedAt?: DateTimeNullableFilter<"Channel"> | Date | string | null
    createdAt?: DateTimeFilter<"Channel"> | Date | string
    updatedAt?: DateTimeFilter<"Channel"> | Date | string
  }, "id" | "name">

  export type ChannelOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    apiKey?: SortOrder
    baseUrl?: SortOrderInput | SortOrder
    models?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    weight?: SortOrder
    maxTokens?: SortOrderInput | SortOrder
    rpmLimit?: SortOrderInput | SortOrder
    tpmLimit?: SortOrderInput | SortOrder
    usageCount?: SortOrder
    errorCount?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChannelCountOrderByAggregateInput
    _avg?: ChannelAvgOrderByAggregateInput
    _max?: ChannelMaxOrderByAggregateInput
    _min?: ChannelMinOrderByAggregateInput
    _sum?: ChannelSumOrderByAggregateInput
  }

  export type ChannelScalarWhereWithAggregatesInput = {
    AND?: ChannelScalarWhereWithAggregatesInput | ChannelScalarWhereWithAggregatesInput[]
    OR?: ChannelScalarWhereWithAggregatesInput[]
    NOT?: ChannelScalarWhereWithAggregatesInput | ChannelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Channel"> | string
    name?: StringWithAggregatesFilter<"Channel"> | string
    provider?: StringWithAggregatesFilter<"Channel"> | string
    apiKey?: StringWithAggregatesFilter<"Channel"> | string
    baseUrl?: StringNullableWithAggregatesFilter<"Channel"> | string | null
    models?: StringWithAggregatesFilter<"Channel"> | string
    isActive?: BoolWithAggregatesFilter<"Channel"> | boolean
    priority?: IntWithAggregatesFilter<"Channel"> | number
    weight?: IntWithAggregatesFilter<"Channel"> | number
    maxTokens?: IntNullableWithAggregatesFilter<"Channel"> | number | null
    rpmLimit?: IntNullableWithAggregatesFilter<"Channel"> | number | null
    tpmLimit?: IntNullableWithAggregatesFilter<"Channel"> | number | null
    usageCount?: IntWithAggregatesFilter<"Channel"> | number
    errorCount?: IntWithAggregatesFilter<"Channel"> | number
    lastUsedAt?: DateTimeNullableWithAggregatesFilter<"Channel"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Channel"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Channel"> | Date | string
  }

  export type WorkflowWhereInput = {
    AND?: WorkflowWhereInput | WorkflowWhereInput[]
    OR?: WorkflowWhereInput[]
    NOT?: WorkflowWhereInput | WorkflowWhereInput[]
    id?: StringFilter<"Workflow"> | string
    name?: StringFilter<"Workflow"> | string
    description?: StringNullableFilter<"Workflow"> | string | null
    creatorId?: StringFilter<"Workflow"> | string
    version?: StringFilter<"Workflow"> | string
    status?: StringFilter<"Workflow"> | string
    isTemplate?: BoolFilter<"Workflow"> | boolean
    isPublic?: BoolFilter<"Workflow"> | boolean
    category?: StringFilter<"Workflow"> | string
    tags?: StringFilter<"Workflow"> | string
    definition?: StringFilter<"Workflow"> | string
    variables?: StringFilter<"Workflow"> | string
    settings?: StringFilter<"Workflow"> | string
    usageCount?: IntFilter<"Workflow"> | number
    rating?: FloatFilter<"Workflow"> | number
    ratingCount?: IntFilter<"Workflow"> | number
    createdAt?: DateTimeFilter<"Workflow"> | Date | string
    updatedAt?: DateTimeFilter<"Workflow"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    instances?: WorkflowInstanceListRelationFilter
    templates?: WorkflowTemplateListRelationFilter
    ratings?: WorkflowRatingListRelationFilter
    scheduledTasks?: ScheduledTaskListRelationFilter
  }

  export type WorkflowOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    creatorId?: SortOrder
    version?: SortOrder
    status?: SortOrder
    isTemplate?: SortOrder
    isPublic?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    definition?: SortOrder
    variables?: SortOrder
    settings?: SortOrder
    usageCount?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creator?: UserOrderByWithRelationInput
    instances?: WorkflowInstanceOrderByRelationAggregateInput
    templates?: WorkflowTemplateOrderByRelationAggregateInput
    ratings?: WorkflowRatingOrderByRelationAggregateInput
    scheduledTasks?: ScheduledTaskOrderByRelationAggregateInput
  }

  export type WorkflowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_creatorId?: WorkflowNameCreatorIdCompoundUniqueInput
    AND?: WorkflowWhereInput | WorkflowWhereInput[]
    OR?: WorkflowWhereInput[]
    NOT?: WorkflowWhereInput | WorkflowWhereInput[]
    name?: StringFilter<"Workflow"> | string
    description?: StringNullableFilter<"Workflow"> | string | null
    creatorId?: StringFilter<"Workflow"> | string
    version?: StringFilter<"Workflow"> | string
    status?: StringFilter<"Workflow"> | string
    isTemplate?: BoolFilter<"Workflow"> | boolean
    isPublic?: BoolFilter<"Workflow"> | boolean
    category?: StringFilter<"Workflow"> | string
    tags?: StringFilter<"Workflow"> | string
    definition?: StringFilter<"Workflow"> | string
    variables?: StringFilter<"Workflow"> | string
    settings?: StringFilter<"Workflow"> | string
    usageCount?: IntFilter<"Workflow"> | number
    rating?: FloatFilter<"Workflow"> | number
    ratingCount?: IntFilter<"Workflow"> | number
    createdAt?: DateTimeFilter<"Workflow"> | Date | string
    updatedAt?: DateTimeFilter<"Workflow"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    instances?: WorkflowInstanceListRelationFilter
    templates?: WorkflowTemplateListRelationFilter
    ratings?: WorkflowRatingListRelationFilter
    scheduledTasks?: ScheduledTaskListRelationFilter
  }, "id" | "name_creatorId">

  export type WorkflowOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    creatorId?: SortOrder
    version?: SortOrder
    status?: SortOrder
    isTemplate?: SortOrder
    isPublic?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    definition?: SortOrder
    variables?: SortOrder
    settings?: SortOrder
    usageCount?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkflowCountOrderByAggregateInput
    _avg?: WorkflowAvgOrderByAggregateInput
    _max?: WorkflowMaxOrderByAggregateInput
    _min?: WorkflowMinOrderByAggregateInput
    _sum?: WorkflowSumOrderByAggregateInput
  }

  export type WorkflowScalarWhereWithAggregatesInput = {
    AND?: WorkflowScalarWhereWithAggregatesInput | WorkflowScalarWhereWithAggregatesInput[]
    OR?: WorkflowScalarWhereWithAggregatesInput[]
    NOT?: WorkflowScalarWhereWithAggregatesInput | WorkflowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Workflow"> | string
    name?: StringWithAggregatesFilter<"Workflow"> | string
    description?: StringNullableWithAggregatesFilter<"Workflow"> | string | null
    creatorId?: StringWithAggregatesFilter<"Workflow"> | string
    version?: StringWithAggregatesFilter<"Workflow"> | string
    status?: StringWithAggregatesFilter<"Workflow"> | string
    isTemplate?: BoolWithAggregatesFilter<"Workflow"> | boolean
    isPublic?: BoolWithAggregatesFilter<"Workflow"> | boolean
    category?: StringWithAggregatesFilter<"Workflow"> | string
    tags?: StringWithAggregatesFilter<"Workflow"> | string
    definition?: StringWithAggregatesFilter<"Workflow"> | string
    variables?: StringWithAggregatesFilter<"Workflow"> | string
    settings?: StringWithAggregatesFilter<"Workflow"> | string
    usageCount?: IntWithAggregatesFilter<"Workflow"> | number
    rating?: FloatWithAggregatesFilter<"Workflow"> | number
    ratingCount?: IntWithAggregatesFilter<"Workflow"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Workflow"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Workflow"> | Date | string
  }

  export type WorkflowInstanceWhereInput = {
    AND?: WorkflowInstanceWhereInput | WorkflowInstanceWhereInput[]
    OR?: WorkflowInstanceWhereInput[]
    NOT?: WorkflowInstanceWhereInput | WorkflowInstanceWhereInput[]
    id?: StringFilter<"WorkflowInstance"> | string
    workflowId?: StringFilter<"WorkflowInstance"> | string
    executorId?: StringFilter<"WorkflowInstance"> | string
    name?: StringNullableFilter<"WorkflowInstance"> | string | null
    status?: StringFilter<"WorkflowInstance"> | string
    priority?: StringFilter<"WorkflowInstance"> | string
    input?: StringNullableFilter<"WorkflowInstance"> | string | null
    output?: StringNullableFilter<"WorkflowInstance"> | string | null
    variables?: StringFilter<"WorkflowInstance"> | string
    currentStep?: StringNullableFilter<"WorkflowInstance"> | string | null
    progress?: FloatFilter<"WorkflowInstance"> | number
    startedAt?: DateTimeNullableFilter<"WorkflowInstance"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"WorkflowInstance"> | Date | string | null
    failureReason?: StringNullableFilter<"WorkflowInstance"> | string | null
    retryCount?: IntFilter<"WorkflowInstance"> | number
    maxRetries?: IntFilter<"WorkflowInstance"> | number
    timeout?: IntNullableFilter<"WorkflowInstance"> | number | null
    metadata?: StringFilter<"WorkflowInstance"> | string
    createdAt?: DateTimeFilter<"WorkflowInstance"> | Date | string
    updatedAt?: DateTimeFilter<"WorkflowInstance"> | Date | string
    workflow?: XOR<WorkflowRelationFilter, WorkflowWhereInput>
    executor?: XOR<UserRelationFilter, UserWhereInput>
    executions?: StepExecutionListRelationFilter
    logs?: WorkflowLogListRelationFilter
  }

  export type WorkflowInstanceOrderByWithRelationInput = {
    id?: SortOrder
    workflowId?: SortOrder
    executorId?: SortOrder
    name?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    input?: SortOrderInput | SortOrder
    output?: SortOrderInput | SortOrder
    variables?: SortOrder
    currentStep?: SortOrderInput | SortOrder
    progress?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    failureReason?: SortOrderInput | SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    timeout?: SortOrderInput | SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workflow?: WorkflowOrderByWithRelationInput
    executor?: UserOrderByWithRelationInput
    executions?: StepExecutionOrderByRelationAggregateInput
    logs?: WorkflowLogOrderByRelationAggregateInput
  }

  export type WorkflowInstanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkflowInstanceWhereInput | WorkflowInstanceWhereInput[]
    OR?: WorkflowInstanceWhereInput[]
    NOT?: WorkflowInstanceWhereInput | WorkflowInstanceWhereInput[]
    workflowId?: StringFilter<"WorkflowInstance"> | string
    executorId?: StringFilter<"WorkflowInstance"> | string
    name?: StringNullableFilter<"WorkflowInstance"> | string | null
    status?: StringFilter<"WorkflowInstance"> | string
    priority?: StringFilter<"WorkflowInstance"> | string
    input?: StringNullableFilter<"WorkflowInstance"> | string | null
    output?: StringNullableFilter<"WorkflowInstance"> | string | null
    variables?: StringFilter<"WorkflowInstance"> | string
    currentStep?: StringNullableFilter<"WorkflowInstance"> | string | null
    progress?: FloatFilter<"WorkflowInstance"> | number
    startedAt?: DateTimeNullableFilter<"WorkflowInstance"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"WorkflowInstance"> | Date | string | null
    failureReason?: StringNullableFilter<"WorkflowInstance"> | string | null
    retryCount?: IntFilter<"WorkflowInstance"> | number
    maxRetries?: IntFilter<"WorkflowInstance"> | number
    timeout?: IntNullableFilter<"WorkflowInstance"> | number | null
    metadata?: StringFilter<"WorkflowInstance"> | string
    createdAt?: DateTimeFilter<"WorkflowInstance"> | Date | string
    updatedAt?: DateTimeFilter<"WorkflowInstance"> | Date | string
    workflow?: XOR<WorkflowRelationFilter, WorkflowWhereInput>
    executor?: XOR<UserRelationFilter, UserWhereInput>
    executions?: StepExecutionListRelationFilter
    logs?: WorkflowLogListRelationFilter
  }, "id">

  export type WorkflowInstanceOrderByWithAggregationInput = {
    id?: SortOrder
    workflowId?: SortOrder
    executorId?: SortOrder
    name?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    input?: SortOrderInput | SortOrder
    output?: SortOrderInput | SortOrder
    variables?: SortOrder
    currentStep?: SortOrderInput | SortOrder
    progress?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    failureReason?: SortOrderInput | SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    timeout?: SortOrderInput | SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkflowInstanceCountOrderByAggregateInput
    _avg?: WorkflowInstanceAvgOrderByAggregateInput
    _max?: WorkflowInstanceMaxOrderByAggregateInput
    _min?: WorkflowInstanceMinOrderByAggregateInput
    _sum?: WorkflowInstanceSumOrderByAggregateInput
  }

  export type WorkflowInstanceScalarWhereWithAggregatesInput = {
    AND?: WorkflowInstanceScalarWhereWithAggregatesInput | WorkflowInstanceScalarWhereWithAggregatesInput[]
    OR?: WorkflowInstanceScalarWhereWithAggregatesInput[]
    NOT?: WorkflowInstanceScalarWhereWithAggregatesInput | WorkflowInstanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkflowInstance"> | string
    workflowId?: StringWithAggregatesFilter<"WorkflowInstance"> | string
    executorId?: StringWithAggregatesFilter<"WorkflowInstance"> | string
    name?: StringNullableWithAggregatesFilter<"WorkflowInstance"> | string | null
    status?: StringWithAggregatesFilter<"WorkflowInstance"> | string
    priority?: StringWithAggregatesFilter<"WorkflowInstance"> | string
    input?: StringNullableWithAggregatesFilter<"WorkflowInstance"> | string | null
    output?: StringNullableWithAggregatesFilter<"WorkflowInstance"> | string | null
    variables?: StringWithAggregatesFilter<"WorkflowInstance"> | string
    currentStep?: StringNullableWithAggregatesFilter<"WorkflowInstance"> | string | null
    progress?: FloatWithAggregatesFilter<"WorkflowInstance"> | number
    startedAt?: DateTimeNullableWithAggregatesFilter<"WorkflowInstance"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"WorkflowInstance"> | Date | string | null
    failureReason?: StringNullableWithAggregatesFilter<"WorkflowInstance"> | string | null
    retryCount?: IntWithAggregatesFilter<"WorkflowInstance"> | number
    maxRetries?: IntWithAggregatesFilter<"WorkflowInstance"> | number
    timeout?: IntNullableWithAggregatesFilter<"WorkflowInstance"> | number | null
    metadata?: StringWithAggregatesFilter<"WorkflowInstance"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WorkflowInstance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkflowInstance"> | Date | string
  }

  export type StepExecutionWhereInput = {
    AND?: StepExecutionWhereInput | StepExecutionWhereInput[]
    OR?: StepExecutionWhereInput[]
    NOT?: StepExecutionWhereInput | StepExecutionWhereInput[]
    id?: StringFilter<"StepExecution"> | string
    instanceId?: StringFilter<"StepExecution"> | string
    stepId?: StringFilter<"StepExecution"> | string
    stepType?: StringFilter<"StepExecution"> | string
    status?: StringFilter<"StepExecution"> | string
    input?: StringNullableFilter<"StepExecution"> | string | null
    output?: StringNullableFilter<"StepExecution"> | string | null
    error?: StringNullableFilter<"StepExecution"> | string | null
    duration?: IntFilter<"StepExecution"> | number
    retryCount?: IntFilter<"StepExecution"> | number
    startedAt?: DateTimeNullableFilter<"StepExecution"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"StepExecution"> | Date | string | null
    metadata?: StringFilter<"StepExecution"> | string
    createdAt?: DateTimeFilter<"StepExecution"> | Date | string
    updatedAt?: DateTimeFilter<"StepExecution"> | Date | string
    instance?: XOR<WorkflowInstanceRelationFilter, WorkflowInstanceWhereInput>
  }

  export type StepExecutionOrderByWithRelationInput = {
    id?: SortOrder
    instanceId?: SortOrder
    stepId?: SortOrder
    stepType?: SortOrder
    status?: SortOrder
    input?: SortOrderInput | SortOrder
    output?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    duration?: SortOrder
    retryCount?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    instance?: WorkflowInstanceOrderByWithRelationInput
  }

  export type StepExecutionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StepExecutionWhereInput | StepExecutionWhereInput[]
    OR?: StepExecutionWhereInput[]
    NOT?: StepExecutionWhereInput | StepExecutionWhereInput[]
    instanceId?: StringFilter<"StepExecution"> | string
    stepId?: StringFilter<"StepExecution"> | string
    stepType?: StringFilter<"StepExecution"> | string
    status?: StringFilter<"StepExecution"> | string
    input?: StringNullableFilter<"StepExecution"> | string | null
    output?: StringNullableFilter<"StepExecution"> | string | null
    error?: StringNullableFilter<"StepExecution"> | string | null
    duration?: IntFilter<"StepExecution"> | number
    retryCount?: IntFilter<"StepExecution"> | number
    startedAt?: DateTimeNullableFilter<"StepExecution"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"StepExecution"> | Date | string | null
    metadata?: StringFilter<"StepExecution"> | string
    createdAt?: DateTimeFilter<"StepExecution"> | Date | string
    updatedAt?: DateTimeFilter<"StepExecution"> | Date | string
    instance?: XOR<WorkflowInstanceRelationFilter, WorkflowInstanceWhereInput>
  }, "id">

  export type StepExecutionOrderByWithAggregationInput = {
    id?: SortOrder
    instanceId?: SortOrder
    stepId?: SortOrder
    stepType?: SortOrder
    status?: SortOrder
    input?: SortOrderInput | SortOrder
    output?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    duration?: SortOrder
    retryCount?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StepExecutionCountOrderByAggregateInput
    _avg?: StepExecutionAvgOrderByAggregateInput
    _max?: StepExecutionMaxOrderByAggregateInput
    _min?: StepExecutionMinOrderByAggregateInput
    _sum?: StepExecutionSumOrderByAggregateInput
  }

  export type StepExecutionScalarWhereWithAggregatesInput = {
    AND?: StepExecutionScalarWhereWithAggregatesInput | StepExecutionScalarWhereWithAggregatesInput[]
    OR?: StepExecutionScalarWhereWithAggregatesInput[]
    NOT?: StepExecutionScalarWhereWithAggregatesInput | StepExecutionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StepExecution"> | string
    instanceId?: StringWithAggregatesFilter<"StepExecution"> | string
    stepId?: StringWithAggregatesFilter<"StepExecution"> | string
    stepType?: StringWithAggregatesFilter<"StepExecution"> | string
    status?: StringWithAggregatesFilter<"StepExecution"> | string
    input?: StringNullableWithAggregatesFilter<"StepExecution"> | string | null
    output?: StringNullableWithAggregatesFilter<"StepExecution"> | string | null
    error?: StringNullableWithAggregatesFilter<"StepExecution"> | string | null
    duration?: IntWithAggregatesFilter<"StepExecution"> | number
    retryCount?: IntWithAggregatesFilter<"StepExecution"> | number
    startedAt?: DateTimeNullableWithAggregatesFilter<"StepExecution"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"StepExecution"> | Date | string | null
    metadata?: StringWithAggregatesFilter<"StepExecution"> | string
    createdAt?: DateTimeWithAggregatesFilter<"StepExecution"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StepExecution"> | Date | string
  }

  export type WorkflowLogWhereInput = {
    AND?: WorkflowLogWhereInput | WorkflowLogWhereInput[]
    OR?: WorkflowLogWhereInput[]
    NOT?: WorkflowLogWhereInput | WorkflowLogWhereInput[]
    id?: StringFilter<"WorkflowLog"> | string
    instanceId?: StringFilter<"WorkflowLog"> | string
    level?: StringFilter<"WorkflowLog"> | string
    message?: StringFilter<"WorkflowLog"> | string
    data?: StringNullableFilter<"WorkflowLog"> | string | null
    stepId?: StringNullableFilter<"WorkflowLog"> | string | null
    timestamp?: DateTimeFilter<"WorkflowLog"> | Date | string
    instance?: XOR<WorkflowInstanceRelationFilter, WorkflowInstanceWhereInput>
  }

  export type WorkflowLogOrderByWithRelationInput = {
    id?: SortOrder
    instanceId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    data?: SortOrderInput | SortOrder
    stepId?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    instance?: WorkflowInstanceOrderByWithRelationInput
  }

  export type WorkflowLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkflowLogWhereInput | WorkflowLogWhereInput[]
    OR?: WorkflowLogWhereInput[]
    NOT?: WorkflowLogWhereInput | WorkflowLogWhereInput[]
    instanceId?: StringFilter<"WorkflowLog"> | string
    level?: StringFilter<"WorkflowLog"> | string
    message?: StringFilter<"WorkflowLog"> | string
    data?: StringNullableFilter<"WorkflowLog"> | string | null
    stepId?: StringNullableFilter<"WorkflowLog"> | string | null
    timestamp?: DateTimeFilter<"WorkflowLog"> | Date | string
    instance?: XOR<WorkflowInstanceRelationFilter, WorkflowInstanceWhereInput>
  }, "id">

  export type WorkflowLogOrderByWithAggregationInput = {
    id?: SortOrder
    instanceId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    data?: SortOrderInput | SortOrder
    stepId?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: WorkflowLogCountOrderByAggregateInput
    _max?: WorkflowLogMaxOrderByAggregateInput
    _min?: WorkflowLogMinOrderByAggregateInput
  }

  export type WorkflowLogScalarWhereWithAggregatesInput = {
    AND?: WorkflowLogScalarWhereWithAggregatesInput | WorkflowLogScalarWhereWithAggregatesInput[]
    OR?: WorkflowLogScalarWhereWithAggregatesInput[]
    NOT?: WorkflowLogScalarWhereWithAggregatesInput | WorkflowLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkflowLog"> | string
    instanceId?: StringWithAggregatesFilter<"WorkflowLog"> | string
    level?: StringWithAggregatesFilter<"WorkflowLog"> | string
    message?: StringWithAggregatesFilter<"WorkflowLog"> | string
    data?: StringNullableWithAggregatesFilter<"WorkflowLog"> | string | null
    stepId?: StringNullableWithAggregatesFilter<"WorkflowLog"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"WorkflowLog"> | Date | string
  }

  export type WorkflowTemplateWhereInput = {
    AND?: WorkflowTemplateWhereInput | WorkflowTemplateWhereInput[]
    OR?: WorkflowTemplateWhereInput[]
    NOT?: WorkflowTemplateWhereInput | WorkflowTemplateWhereInput[]
    id?: StringFilter<"WorkflowTemplate"> | string
    workflowId?: StringFilter<"WorkflowTemplate"> | string
    name?: StringFilter<"WorkflowTemplate"> | string
    description?: StringNullableFilter<"WorkflowTemplate"> | string | null
    category?: StringFilter<"WorkflowTemplate"> | string
    tags?: StringFilter<"WorkflowTemplate"> | string
    isOfficial?: BoolFilter<"WorkflowTemplate"> | boolean
    usageCount?: IntFilter<"WorkflowTemplate"> | number
    rating?: FloatFilter<"WorkflowTemplate"> | number
    ratingCount?: IntFilter<"WorkflowTemplate"> | number
    createdAt?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    workflow?: XOR<WorkflowRelationFilter, WorkflowWhereInput>
  }

  export type WorkflowTemplateOrderByWithRelationInput = {
    id?: SortOrder
    workflowId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    tags?: SortOrder
    isOfficial?: SortOrder
    usageCount?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workflow?: WorkflowOrderByWithRelationInput
  }

  export type WorkflowTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkflowTemplateWhereInput | WorkflowTemplateWhereInput[]
    OR?: WorkflowTemplateWhereInput[]
    NOT?: WorkflowTemplateWhereInput | WorkflowTemplateWhereInput[]
    workflowId?: StringFilter<"WorkflowTemplate"> | string
    name?: StringFilter<"WorkflowTemplate"> | string
    description?: StringNullableFilter<"WorkflowTemplate"> | string | null
    category?: StringFilter<"WorkflowTemplate"> | string
    tags?: StringFilter<"WorkflowTemplate"> | string
    isOfficial?: BoolFilter<"WorkflowTemplate"> | boolean
    usageCount?: IntFilter<"WorkflowTemplate"> | number
    rating?: FloatFilter<"WorkflowTemplate"> | number
    ratingCount?: IntFilter<"WorkflowTemplate"> | number
    createdAt?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    workflow?: XOR<WorkflowRelationFilter, WorkflowWhereInput>
  }, "id">

  export type WorkflowTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    workflowId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    tags?: SortOrder
    isOfficial?: SortOrder
    usageCount?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkflowTemplateCountOrderByAggregateInput
    _avg?: WorkflowTemplateAvgOrderByAggregateInput
    _max?: WorkflowTemplateMaxOrderByAggregateInput
    _min?: WorkflowTemplateMinOrderByAggregateInput
    _sum?: WorkflowTemplateSumOrderByAggregateInput
  }

  export type WorkflowTemplateScalarWhereWithAggregatesInput = {
    AND?: WorkflowTemplateScalarWhereWithAggregatesInput | WorkflowTemplateScalarWhereWithAggregatesInput[]
    OR?: WorkflowTemplateScalarWhereWithAggregatesInput[]
    NOT?: WorkflowTemplateScalarWhereWithAggregatesInput | WorkflowTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkflowTemplate"> | string
    workflowId?: StringWithAggregatesFilter<"WorkflowTemplate"> | string
    name?: StringWithAggregatesFilter<"WorkflowTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"WorkflowTemplate"> | string | null
    category?: StringWithAggregatesFilter<"WorkflowTemplate"> | string
    tags?: StringWithAggregatesFilter<"WorkflowTemplate"> | string
    isOfficial?: BoolWithAggregatesFilter<"WorkflowTemplate"> | boolean
    usageCount?: IntWithAggregatesFilter<"WorkflowTemplate"> | number
    rating?: FloatWithAggregatesFilter<"WorkflowTemplate"> | number
    ratingCount?: IntWithAggregatesFilter<"WorkflowTemplate"> | number
    createdAt?: DateTimeWithAggregatesFilter<"WorkflowTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkflowTemplate"> | Date | string
  }

  export type WorkflowRatingWhereInput = {
    AND?: WorkflowRatingWhereInput | WorkflowRatingWhereInput[]
    OR?: WorkflowRatingWhereInput[]
    NOT?: WorkflowRatingWhereInput | WorkflowRatingWhereInput[]
    id?: StringFilter<"WorkflowRating"> | string
    workflowId?: StringFilter<"WorkflowRating"> | string
    userId?: StringFilter<"WorkflowRating"> | string
    rating?: FloatFilter<"WorkflowRating"> | number
    comment?: StringNullableFilter<"WorkflowRating"> | string | null
    createdAt?: DateTimeFilter<"WorkflowRating"> | Date | string
    updatedAt?: DateTimeFilter<"WorkflowRating"> | Date | string
    workflow?: XOR<WorkflowRelationFilter, WorkflowWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type WorkflowRatingOrderByWithRelationInput = {
    id?: SortOrder
    workflowId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workflow?: WorkflowOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type WorkflowRatingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    workflowId_userId?: WorkflowRatingWorkflowIdUserIdCompoundUniqueInput
    AND?: WorkflowRatingWhereInput | WorkflowRatingWhereInput[]
    OR?: WorkflowRatingWhereInput[]
    NOT?: WorkflowRatingWhereInput | WorkflowRatingWhereInput[]
    workflowId?: StringFilter<"WorkflowRating"> | string
    userId?: StringFilter<"WorkflowRating"> | string
    rating?: FloatFilter<"WorkflowRating"> | number
    comment?: StringNullableFilter<"WorkflowRating"> | string | null
    createdAt?: DateTimeFilter<"WorkflowRating"> | Date | string
    updatedAt?: DateTimeFilter<"WorkflowRating"> | Date | string
    workflow?: XOR<WorkflowRelationFilter, WorkflowWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "workflowId_userId">

  export type WorkflowRatingOrderByWithAggregationInput = {
    id?: SortOrder
    workflowId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkflowRatingCountOrderByAggregateInput
    _avg?: WorkflowRatingAvgOrderByAggregateInput
    _max?: WorkflowRatingMaxOrderByAggregateInput
    _min?: WorkflowRatingMinOrderByAggregateInput
    _sum?: WorkflowRatingSumOrderByAggregateInput
  }

  export type WorkflowRatingScalarWhereWithAggregatesInput = {
    AND?: WorkflowRatingScalarWhereWithAggregatesInput | WorkflowRatingScalarWhereWithAggregatesInput[]
    OR?: WorkflowRatingScalarWhereWithAggregatesInput[]
    NOT?: WorkflowRatingScalarWhereWithAggregatesInput | WorkflowRatingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkflowRating"> | string
    workflowId?: StringWithAggregatesFilter<"WorkflowRating"> | string
    userId?: StringWithAggregatesFilter<"WorkflowRating"> | string
    rating?: FloatWithAggregatesFilter<"WorkflowRating"> | number
    comment?: StringNullableWithAggregatesFilter<"WorkflowRating"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WorkflowRating"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkflowRating"> | Date | string
  }

  export type ScheduledTaskWhereInput = {
    AND?: ScheduledTaskWhereInput | ScheduledTaskWhereInput[]
    OR?: ScheduledTaskWhereInput[]
    NOT?: ScheduledTaskWhereInput | ScheduledTaskWhereInput[]
    id?: StringFilter<"ScheduledTask"> | string
    name?: StringFilter<"ScheduledTask"> | string
    workflowId?: StringFilter<"ScheduledTask"> | string
    creatorId?: StringFilter<"ScheduledTask"> | string
    cronExpression?: StringFilter<"ScheduledTask"> | string
    timezone?: StringFilter<"ScheduledTask"> | string
    isEnabled?: BoolFilter<"ScheduledTask"> | boolean
    input?: StringNullableFilter<"ScheduledTask"> | string | null
    lastRunAt?: DateTimeNullableFilter<"ScheduledTask"> | Date | string | null
    nextRunAt?: DateTimeNullableFilter<"ScheduledTask"> | Date | string | null
    runCount?: IntFilter<"ScheduledTask"> | number
    failureCount?: IntFilter<"ScheduledTask"> | number
    maxRuns?: IntNullableFilter<"ScheduledTask"> | number | null
    createdAt?: DateTimeFilter<"ScheduledTask"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduledTask"> | Date | string
    workflow?: XOR<WorkflowRelationFilter, WorkflowWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ScheduledTaskOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    workflowId?: SortOrder
    creatorId?: SortOrder
    cronExpression?: SortOrder
    timezone?: SortOrder
    isEnabled?: SortOrder
    input?: SortOrderInput | SortOrder
    lastRunAt?: SortOrderInput | SortOrder
    nextRunAt?: SortOrderInput | SortOrder
    runCount?: SortOrder
    failureCount?: SortOrder
    maxRuns?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workflow?: WorkflowOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
  }

  export type ScheduledTaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScheduledTaskWhereInput | ScheduledTaskWhereInput[]
    OR?: ScheduledTaskWhereInput[]
    NOT?: ScheduledTaskWhereInput | ScheduledTaskWhereInput[]
    name?: StringFilter<"ScheduledTask"> | string
    workflowId?: StringFilter<"ScheduledTask"> | string
    creatorId?: StringFilter<"ScheduledTask"> | string
    cronExpression?: StringFilter<"ScheduledTask"> | string
    timezone?: StringFilter<"ScheduledTask"> | string
    isEnabled?: BoolFilter<"ScheduledTask"> | boolean
    input?: StringNullableFilter<"ScheduledTask"> | string | null
    lastRunAt?: DateTimeNullableFilter<"ScheduledTask"> | Date | string | null
    nextRunAt?: DateTimeNullableFilter<"ScheduledTask"> | Date | string | null
    runCount?: IntFilter<"ScheduledTask"> | number
    failureCount?: IntFilter<"ScheduledTask"> | number
    maxRuns?: IntNullableFilter<"ScheduledTask"> | number | null
    createdAt?: DateTimeFilter<"ScheduledTask"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduledTask"> | Date | string
    workflow?: XOR<WorkflowRelationFilter, WorkflowWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ScheduledTaskOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    workflowId?: SortOrder
    creatorId?: SortOrder
    cronExpression?: SortOrder
    timezone?: SortOrder
    isEnabled?: SortOrder
    input?: SortOrderInput | SortOrder
    lastRunAt?: SortOrderInput | SortOrder
    nextRunAt?: SortOrderInput | SortOrder
    runCount?: SortOrder
    failureCount?: SortOrder
    maxRuns?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScheduledTaskCountOrderByAggregateInput
    _avg?: ScheduledTaskAvgOrderByAggregateInput
    _max?: ScheduledTaskMaxOrderByAggregateInput
    _min?: ScheduledTaskMinOrderByAggregateInput
    _sum?: ScheduledTaskSumOrderByAggregateInput
  }

  export type ScheduledTaskScalarWhereWithAggregatesInput = {
    AND?: ScheduledTaskScalarWhereWithAggregatesInput | ScheduledTaskScalarWhereWithAggregatesInput[]
    OR?: ScheduledTaskScalarWhereWithAggregatesInput[]
    NOT?: ScheduledTaskScalarWhereWithAggregatesInput | ScheduledTaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScheduledTask"> | string
    name?: StringWithAggregatesFilter<"ScheduledTask"> | string
    workflowId?: StringWithAggregatesFilter<"ScheduledTask"> | string
    creatorId?: StringWithAggregatesFilter<"ScheduledTask"> | string
    cronExpression?: StringWithAggregatesFilter<"ScheduledTask"> | string
    timezone?: StringWithAggregatesFilter<"ScheduledTask"> | string
    isEnabled?: BoolWithAggregatesFilter<"ScheduledTask"> | boolean
    input?: StringNullableWithAggregatesFilter<"ScheduledTask"> | string | null
    lastRunAt?: DateTimeNullableWithAggregatesFilter<"ScheduledTask"> | Date | string | null
    nextRunAt?: DateTimeNullableWithAggregatesFilter<"ScheduledTask"> | Date | string | null
    runCount?: IntWithAggregatesFilter<"ScheduledTask"> | number
    failureCount?: IntWithAggregatesFilter<"ScheduledTask"> | number
    maxRuns?: IntNullableWithAggregatesFilter<"ScheduledTask"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ScheduledTask"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScheduledTask"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    workflows?: WorkflowCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomUncheckedCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingUncheckedCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OAuthAccountCreateInput = {
    id?: string
    provider: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOauthAccountsInput
  }

  export type OAuthAccountUncheckedCreateInput = {
    id?: string
    userId: string
    provider: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OAuthAccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOauthAccountsNestedInput
  }

  export type OAuthAccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OAuthAccountCreateManyInput = {
    id?: string
    userId: string
    provider: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OAuthAccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OAuthAccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenCreateInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRefreshTokensInput
  }

  export type RefreshTokenUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRefreshTokensNestedInput
  }

  export type RefreshTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenCreateManyInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterCreateInput = {
    id?: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCharactersInput
    chatSessions?: ChatSessionCreateNestedManyWithoutCharacterInput
    messages?: MessageCreateNestedManyWithoutCharacterInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutCharacterInput
    ratings?: CharacterRatingCreateNestedManyWithoutCharacterInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutCharacterInput
    chatMessages?: ChatMessageCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateInput = {
    id?: string
    creatorId: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutCharacterInput
    messages?: MessageUncheckedCreateNestedManyWithoutCharacterInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutCharacterInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutCharacterInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutCharacterInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCharactersNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutCharacterNestedInput
    messages?: MessageUpdateManyWithoutCharacterNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutCharacterNestedInput
    ratings?: CharacterRatingUpdateManyWithoutCharacterNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutCharacterNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutCharacterNestedInput
    messages?: MessageUncheckedUpdateManyWithoutCharacterNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutCharacterNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutCharacterNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutCharacterNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterCreateManyInput = {
    id?: string
    creatorId: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionCreateInput = {
    id?: string
    title?: string | null
    model?: string
    presetId?: string | null
    worldInfoId?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isArchived?: boolean
    isPinned?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutChatSessionsInput
    character: CharacterCreateNestedOneWithoutChatSessionsInput
    messages?: MessageCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionUncheckedCreateInput = {
    id?: string
    userId: string
    characterId: string
    title?: string | null
    model?: string
    presetId?: string | null
    worldInfoId?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isArchived?: boolean
    isPinned?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    model?: StringFieldUpdateOperationsInput | string
    presetId?: NullableStringFieldUpdateOperationsInput | string | null
    worldInfoId?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChatSessionsNestedInput
    character?: CharacterUpdateOneRequiredWithoutChatSessionsNestedInput
    messages?: MessageUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    model?: StringFieldUpdateOperationsInput | string
    presetId?: NullableStringFieldUpdateOperationsInput | string | null
    worldInfoId?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionCreateManyInput = {
    id?: string
    userId: string
    characterId: string
    title?: string | null
    model?: string
    presetId?: string | null
    worldInfoId?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isArchived?: boolean
    isPinned?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    model?: StringFieldUpdateOperationsInput | string
    presetId?: NullableStringFieldUpdateOperationsInput | string | null
    worldInfoId?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    model?: StringFieldUpdateOperationsInput | string
    presetId?: NullableStringFieldUpdateOperationsInput | string | null
    worldInfoId?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomCreateInput = {
    id?: string
    name: string
    description?: string | null
    maxParticipants?: number
    isPrivate?: boolean
    allowSpectators?: boolean
    roomType?: string
    settings?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedChatRoomsInput
    participants?: ChatParticipantCreateNestedManyWithoutRoomInput
    messages?: ChatMessageCreateNestedManyWithoutRoomInput
  }

  export type ChatRoomUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    ownerId: string
    maxParticipants?: number
    isPrivate?: boolean
    allowSpectators?: boolean
    roomType?: string
    settings?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: ChatParticipantUncheckedCreateNestedManyWithoutRoomInput
    messages?: ChatMessageUncheckedCreateNestedManyWithoutRoomInput
  }

  export type ChatRoomUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    allowSpectators?: BoolFieldUpdateOperationsInput | boolean
    roomType?: StringFieldUpdateOperationsInput | string
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedChatRoomsNestedInput
    participants?: ChatParticipantUpdateManyWithoutRoomNestedInput
    messages?: ChatMessageUpdateManyWithoutRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    allowSpectators?: BoolFieldUpdateOperationsInput | boolean
    roomType?: StringFieldUpdateOperationsInput | string
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: ChatParticipantUncheckedUpdateManyWithoutRoomNestedInput
    messages?: ChatMessageUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type ChatRoomCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    ownerId: string
    maxParticipants?: number
    isPrivate?: boolean
    allowSpectators?: boolean
    roomType?: string
    settings?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatRoomUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    allowSpectators?: BoolFieldUpdateOperationsInput | boolean
    roomType?: StringFieldUpdateOperationsInput | string
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    allowSpectators?: BoolFieldUpdateOperationsInput | boolean
    roomType?: StringFieldUpdateOperationsInput | string
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatParticipantCreateInput = {
    id?: string
    role?: string
    permissions?: string
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    isActive?: boolean
    isMuted?: boolean
    room: ChatRoomCreateNestedOneWithoutParticipantsInput
    user?: UserCreateNestedOneWithoutChatParticipantsInput
    character?: CharacterCreateNestedOneWithoutChatParticipantsInput
  }

  export type ChatParticipantUncheckedCreateInput = {
    id?: string
    roomId: string
    userId?: string | null
    characterId?: string | null
    role?: string
    permissions?: string
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    isActive?: boolean
    isMuted?: boolean
  }

  export type ChatParticipantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isMuted?: BoolFieldUpdateOperationsInput | boolean
    room?: ChatRoomUpdateOneRequiredWithoutParticipantsNestedInput
    user?: UserUpdateOneWithoutChatParticipantsNestedInput
    character?: CharacterUpdateOneWithoutChatParticipantsNestedInput
  }

  export type ChatParticipantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isMuted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChatParticipantCreateManyInput = {
    id?: string
    roomId: string
    userId?: string | null
    characterId?: string | null
    role?: string
    permissions?: string
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    isActive?: boolean
    isMuted?: boolean
  }

  export type ChatParticipantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isMuted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChatParticipantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isMuted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChatMessageCreateInput = {
    id?: string
    content: string
    messageType?: string
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    room: ChatRoomCreateNestedOneWithoutMessagesInput
    sender?: UserCreateNestedOneWithoutChatMessagesInput
    character?: CharacterCreateNestedOneWithoutChatMessagesInput
    replyTo?: ChatMessageCreateNestedOneWithoutRepliesInput
    replies?: ChatMessageCreateNestedManyWithoutReplyToInput
  }

  export type ChatMessageUncheckedCreateInput = {
    id?: string
    roomId: string
    senderId?: string | null
    characterId?: string | null
    content: string
    messageType?: string
    replyToId?: string | null
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: ChatMessageUncheckedCreateNestedManyWithoutReplyToInput
  }

  export type ChatMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneWithoutChatMessagesNestedInput
    character?: CharacterUpdateOneWithoutChatMessagesNestedInput
    replyTo?: ChatMessageUpdateOneWithoutRepliesNestedInput
    replies?: ChatMessageUpdateManyWithoutReplyToNestedInput
  }

  export type ChatMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: ChatMessageUncheckedUpdateManyWithoutReplyToNestedInput
  }

  export type ChatMessageCreateManyInput = {
    id?: string
    roomId: string
    senderId?: string | null
    characterId?: string | null
    content: string
    messageType?: string
    replyToId?: string | null
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    status: string
    method: string
    externalId?: string | null
    description: string
    metadata?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    amount: number
    currency?: string
    status: string
    method: string
    externalId?: string | null
    description: string
    metadata?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInput = {
    id?: string
    userId: string
    type: string
    amount: number
    currency?: string
    status: string
    method: string
    externalId?: string | null
    description: string
    metadata?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateInput = {
    id?: string
    role: string
    content: string
    tokens?: number
    edited?: boolean
    deleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    session: ChatSessionCreateNestedOneWithoutMessagesInput
    user?: UserCreateNestedOneWithoutMessagesInput
    character?: CharacterCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    sessionId: string
    userId?: string | null
    characterId?: string | null
    role: string
    content: string
    tokens?: number
    edited?: boolean
    deleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    edited?: BoolFieldUpdateOperationsInput | boolean
    deleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: ChatSessionUpdateOneRequiredWithoutMessagesNestedInput
    user?: UserUpdateOneWithoutMessagesNestedInput
    character?: CharacterUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    edited?: BoolFieldUpdateOperationsInput | boolean
    deleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyInput = {
    id?: string
    sessionId: string
    userId?: string | null
    characterId?: string | null
    role: string
    content: string
    tokens?: number
    edited?: boolean
    deleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    edited?: BoolFieldUpdateOperationsInput | boolean
    deleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    edited?: BoolFieldUpdateOperationsInput | boolean
    deleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterFavoriteCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFavoritesInput
    character: CharacterCreateNestedOneWithoutFavoritesInput
  }

  export type CharacterFavoriteUncheckedCreateInput = {
    id?: string
    userId: string
    characterId: string
    createdAt?: Date | string
  }

  export type CharacterFavoriteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoritesNestedInput
    character?: CharacterUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type CharacterFavoriteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterFavoriteCreateManyInput = {
    id?: string
    userId: string
    characterId: string
    createdAt?: Date | string
  }

  export type CharacterFavoriteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterFavoriteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterRatingCreateInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRatingsInput
    character: CharacterCreateNestedOneWithoutRatingsInput
  }

  export type CharacterRatingUncheckedCreateInput = {
    id?: string
    userId: string
    characterId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterRatingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRatingsNestedInput
    character?: CharacterUpdateOneRequiredWithoutRatingsNestedInput
  }

  export type CharacterRatingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterRatingCreateManyInput = {
    id?: string
    userId: string
    characterId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterRatingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterRatingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminLogCreateInput = {
    id?: string
    adminId: string
    action: string
    targetType: string
    targetId?: string | null
    details?: string | null
    ip?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AdminLogUncheckedCreateInput = {
    id?: string
    adminId: string
    action: string
    targetType: string
    targetId?: string | null
    details?: string | null
    ip?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AdminLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminLogCreateManyInput = {
    id?: string
    adminId: string
    action: string
    targetType: string
    targetId?: string | null
    details?: string | null
    ip?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AdminLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageLogCreateInput = {
    id?: string
    userId?: string | null
    endpoint: string
    method: string
    statusCode: number
    responseTime: number
    ip?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type UsageLogUncheckedCreateInput = {
    id?: string
    userId?: string | null
    endpoint: string
    method: string
    statusCode: number
    responseTime: number
    ip?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type UsageLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    responseTime?: IntFieldUpdateOperationsInput | number
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    responseTime?: IntFieldUpdateOperationsInput | number
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageLogCreateManyInput = {
    id?: string
    userId?: string | null
    endpoint: string
    method: string
    statusCode: number
    responseTime: number
    ip?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type UsageLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    responseTime?: IntFieldUpdateOperationsInput | number
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    responseTime?: IntFieldUpdateOperationsInput | number
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertCreateInput = {
    id?: string
    type: string
    severity: string
    title: string
    message: string
    source?: string | null
    metadata?: string | null
    isRead?: boolean
    isResolved?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlertUncheckedCreateInput = {
    id?: string
    type: string
    severity: string
    title: string
    message: string
    source?: string | null
    metadata?: string | null
    isRead?: boolean
    isResolved?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlertUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isResolved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isResolved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertCreateManyInput = {
    id?: string
    type: string
    severity: string
    title: string
    message: string
    source?: string | null
    metadata?: string | null
    isRead?: boolean
    isResolved?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlertUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isResolved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isResolved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChannelCreateInput = {
    id?: string
    name: string
    provider: string
    apiKey: string
    baseUrl?: string | null
    models: string
    isActive?: boolean
    priority?: number
    weight?: number
    maxTokens?: number | null
    rpmLimit?: number | null
    tpmLimit?: number | null
    usageCount?: number
    errorCount?: number
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChannelUncheckedCreateInput = {
    id?: string
    name: string
    provider: string
    apiKey: string
    baseUrl?: string | null
    models: string
    isActive?: boolean
    priority?: number
    weight?: number
    maxTokens?: number | null
    rpmLimit?: number | null
    tpmLimit?: number | null
    usageCount?: number
    errorCount?: number
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChannelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    baseUrl?: NullableStringFieldUpdateOperationsInput | string | null
    models?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    maxTokens?: NullableIntFieldUpdateOperationsInput | number | null
    rpmLimit?: NullableIntFieldUpdateOperationsInput | number | null
    tpmLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usageCount?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChannelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    baseUrl?: NullableStringFieldUpdateOperationsInput | string | null
    models?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    maxTokens?: NullableIntFieldUpdateOperationsInput | number | null
    rpmLimit?: NullableIntFieldUpdateOperationsInput | number | null
    tpmLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usageCount?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChannelCreateManyInput = {
    id?: string
    name: string
    provider: string
    apiKey: string
    baseUrl?: string | null
    models: string
    isActive?: boolean
    priority?: number
    weight?: number
    maxTokens?: number | null
    rpmLimit?: number | null
    tpmLimit?: number | null
    usageCount?: number
    errorCount?: number
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChannelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    baseUrl?: NullableStringFieldUpdateOperationsInput | string | null
    models?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    maxTokens?: NullableIntFieldUpdateOperationsInput | number | null
    rpmLimit?: NullableIntFieldUpdateOperationsInput | number | null
    tpmLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usageCount?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChannelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    baseUrl?: NullableStringFieldUpdateOperationsInput | string | null
    models?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    maxTokens?: NullableIntFieldUpdateOperationsInput | number | null
    rpmLimit?: NullableIntFieldUpdateOperationsInput | number | null
    tpmLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usageCount?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowCreateInput = {
    id?: string
    name: string
    description?: string | null
    version?: string
    status?: string
    isTemplate?: boolean
    isPublic?: boolean
    category?: string
    tags?: string
    definition: string
    variables?: string
    settings?: string
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutWorkflowsInput
    instances?: WorkflowInstanceCreateNestedManyWithoutWorkflowInput
    templates?: WorkflowTemplateCreateNestedManyWithoutWorkflowInput
    ratings?: WorkflowRatingCreateNestedManyWithoutWorkflowInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    creatorId: string
    version?: string
    status?: string
    isTemplate?: boolean
    isPublic?: boolean
    category?: string
    tags?: string
    definition: string
    variables?: string
    settings?: string
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: WorkflowInstanceUncheckedCreateNestedManyWithoutWorkflowInput
    templates?: WorkflowTemplateUncheckedCreateNestedManyWithoutWorkflowInput
    ratings?: WorkflowRatingUncheckedCreateNestedManyWithoutWorkflowInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    variables?: StringFieldUpdateOperationsInput | string
    settings?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutWorkflowsNestedInput
    instances?: WorkflowInstanceUpdateManyWithoutWorkflowNestedInput
    templates?: WorkflowTemplateUpdateManyWithoutWorkflowNestedInput
    ratings?: WorkflowRatingUpdateManyWithoutWorkflowNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutWorkflowNestedInput
  }

  export type WorkflowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    variables?: StringFieldUpdateOperationsInput | string
    settings?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: WorkflowInstanceUncheckedUpdateManyWithoutWorkflowNestedInput
    templates?: WorkflowTemplateUncheckedUpdateManyWithoutWorkflowNestedInput
    ratings?: WorkflowRatingUncheckedUpdateManyWithoutWorkflowNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutWorkflowNestedInput
  }

  export type WorkflowCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    creatorId: string
    version?: string
    status?: string
    isTemplate?: boolean
    isPublic?: boolean
    category?: string
    tags?: string
    definition: string
    variables?: string
    settings?: string
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    variables?: StringFieldUpdateOperationsInput | string
    settings?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    variables?: StringFieldUpdateOperationsInput | string
    settings?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowInstanceCreateInput = {
    id?: string
    name?: string | null
    status?: string
    priority?: string
    input?: string | null
    output?: string | null
    variables?: string
    currentStep?: string | null
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    failureReason?: string | null
    retryCount?: number
    maxRetries?: number
    timeout?: number | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow: WorkflowCreateNestedOneWithoutInstancesInput
    executor: UserCreateNestedOneWithoutWorkflowInstancesInput
    executions?: StepExecutionCreateNestedManyWithoutInstanceInput
    logs?: WorkflowLogCreateNestedManyWithoutInstanceInput
  }

  export type WorkflowInstanceUncheckedCreateInput = {
    id?: string
    workflowId: string
    executorId: string
    name?: string | null
    status?: string
    priority?: string
    input?: string | null
    output?: string | null
    variables?: string
    currentStep?: string | null
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    failureReason?: string | null
    retryCount?: number
    maxRetries?: number
    timeout?: number | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    executions?: StepExecutionUncheckedCreateNestedManyWithoutInstanceInput
    logs?: WorkflowLogUncheckedCreateNestedManyWithoutInstanceInput
  }

  export type WorkflowInstanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: StringFieldUpdateOperationsInput | string
    currentStep?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: WorkflowUpdateOneRequiredWithoutInstancesNestedInput
    executor?: UserUpdateOneRequiredWithoutWorkflowInstancesNestedInput
    executions?: StepExecutionUpdateManyWithoutInstanceNestedInput
    logs?: WorkflowLogUpdateManyWithoutInstanceNestedInput
  }

  export type WorkflowInstanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    executorId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: StringFieldUpdateOperationsInput | string
    currentStep?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    executions?: StepExecutionUncheckedUpdateManyWithoutInstanceNestedInput
    logs?: WorkflowLogUncheckedUpdateManyWithoutInstanceNestedInput
  }

  export type WorkflowInstanceCreateManyInput = {
    id?: string
    workflowId: string
    executorId: string
    name?: string | null
    status?: string
    priority?: string
    input?: string | null
    output?: string | null
    variables?: string
    currentStep?: string | null
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    failureReason?: string | null
    retryCount?: number
    maxRetries?: number
    timeout?: number | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowInstanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: StringFieldUpdateOperationsInput | string
    currentStep?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowInstanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    executorId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: StringFieldUpdateOperationsInput | string
    currentStep?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepExecutionCreateInput = {
    id?: string
    stepId: string
    stepType: string
    status?: string
    input?: string | null
    output?: string | null
    error?: string | null
    duration?: number
    retryCount?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    instance: WorkflowInstanceCreateNestedOneWithoutExecutionsInput
  }

  export type StepExecutionUncheckedCreateInput = {
    id?: string
    instanceId: string
    stepId: string
    stepType: string
    status?: string
    input?: string | null
    output?: string | null
    error?: string | null
    duration?: number
    retryCount?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StepExecutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepId?: StringFieldUpdateOperationsInput | string
    stepType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    retryCount?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instance?: WorkflowInstanceUpdateOneRequiredWithoutExecutionsNestedInput
  }

  export type StepExecutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    instanceId?: StringFieldUpdateOperationsInput | string
    stepId?: StringFieldUpdateOperationsInput | string
    stepType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    retryCount?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepExecutionCreateManyInput = {
    id?: string
    instanceId: string
    stepId: string
    stepType: string
    status?: string
    input?: string | null
    output?: string | null
    error?: string | null
    duration?: number
    retryCount?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StepExecutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepId?: StringFieldUpdateOperationsInput | string
    stepType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    retryCount?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepExecutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    instanceId?: StringFieldUpdateOperationsInput | string
    stepId?: StringFieldUpdateOperationsInput | string
    stepType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    retryCount?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowLogCreateInput = {
    id?: string
    level?: string
    message: string
    data?: string | null
    stepId?: string | null
    timestamp?: Date | string
    instance: WorkflowInstanceCreateNestedOneWithoutLogsInput
  }

  export type WorkflowLogUncheckedCreateInput = {
    id?: string
    instanceId: string
    level?: string
    message: string
    data?: string | null
    stepId?: string | null
    timestamp?: Date | string
  }

  export type WorkflowLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    stepId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    instance?: WorkflowInstanceUpdateOneRequiredWithoutLogsNestedInput
  }

  export type WorkflowLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    instanceId?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    stepId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowLogCreateManyInput = {
    id?: string
    instanceId: string
    level?: string
    message: string
    data?: string | null
    stepId?: string | null
    timestamp?: Date | string
  }

  export type WorkflowLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    stepId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    instanceId?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    stepId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowTemplateCreateInput = {
    id?: string
    name: string
    description?: string | null
    category?: string
    tags?: string
    isOfficial?: boolean
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow: WorkflowCreateNestedOneWithoutTemplatesInput
  }

  export type WorkflowTemplateUncheckedCreateInput = {
    id?: string
    workflowId: string
    name: string
    description?: string | null
    category?: string
    tags?: string
    isOfficial?: boolean
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    isOfficial?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: WorkflowUpdateOneRequiredWithoutTemplatesNestedInput
  }

  export type WorkflowTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    isOfficial?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowTemplateCreateManyInput = {
    id?: string
    workflowId: string
    name: string
    description?: string | null
    category?: string
    tags?: string
    isOfficial?: boolean
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    isOfficial?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    isOfficial?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowRatingCreateInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow: WorkflowCreateNestedOneWithoutRatingsInput
    user: UserCreateNestedOneWithoutWorkflowRatingsInput
  }

  export type WorkflowRatingUncheckedCreateInput = {
    id?: string
    workflowId: string
    userId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowRatingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: WorkflowUpdateOneRequiredWithoutRatingsNestedInput
    user?: UserUpdateOneRequiredWithoutWorkflowRatingsNestedInput
  }

  export type WorkflowRatingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowRatingCreateManyInput = {
    id?: string
    workflowId: string
    userId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowRatingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowRatingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledTaskCreateInput = {
    id?: string
    name: string
    cronExpression: string
    timezone?: string
    isEnabled?: boolean
    input?: string | null
    lastRunAt?: Date | string | null
    nextRunAt?: Date | string | null
    runCount?: number
    failureCount?: number
    maxRuns?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow: WorkflowCreateNestedOneWithoutScheduledTasksInput
    creator: UserCreateNestedOneWithoutScheduledTasksInput
  }

  export type ScheduledTaskUncheckedCreateInput = {
    id?: string
    name: string
    workflowId: string
    creatorId: string
    cronExpression: string
    timezone?: string
    isEnabled?: boolean
    input?: string | null
    lastRunAt?: Date | string | null
    nextRunAt?: Date | string | null
    runCount?: number
    failureCount?: number
    maxRuns?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduledTaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    input?: NullableStringFieldUpdateOperationsInput | string | null
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    runCount?: IntFieldUpdateOperationsInput | number
    failureCount?: IntFieldUpdateOperationsInput | number
    maxRuns?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: WorkflowUpdateOneRequiredWithoutScheduledTasksNestedInput
    creator?: UserUpdateOneRequiredWithoutScheduledTasksNestedInput
  }

  export type ScheduledTaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    input?: NullableStringFieldUpdateOperationsInput | string | null
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    runCount?: IntFieldUpdateOperationsInput | number
    failureCount?: IntFieldUpdateOperationsInput | number
    maxRuns?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledTaskCreateManyInput = {
    id?: string
    name: string
    workflowId: string
    creatorId: string
    cronExpression: string
    timezone?: string
    isEnabled?: boolean
    input?: string | null
    lastRunAt?: Date | string | null
    nextRunAt?: Date | string | null
    runCount?: number
    failureCount?: number
    maxRuns?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduledTaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    input?: NullableStringFieldUpdateOperationsInput | string | null
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    runCount?: IntFieldUpdateOperationsInput | number
    failureCount?: IntFieldUpdateOperationsInput | number
    maxRuns?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledTaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    input?: NullableStringFieldUpdateOperationsInput | string | null
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    runCount?: IntFieldUpdateOperationsInput | number
    failureCount?: IntFieldUpdateOperationsInput | number
    maxRuns?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CharacterListRelationFilter = {
    every?: CharacterWhereInput
    some?: CharacterWhereInput
    none?: CharacterWhereInput
  }

  export type ChatSessionListRelationFilter = {
    every?: ChatSessionWhereInput
    some?: ChatSessionWhereInput
    none?: ChatSessionWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type CharacterFavoriteListRelationFilter = {
    every?: CharacterFavoriteWhereInput
    some?: CharacterFavoriteWhereInput
    none?: CharacterFavoriteWhereInput
  }

  export type CharacterRatingListRelationFilter = {
    every?: CharacterRatingWhereInput
    some?: CharacterRatingWhereInput
    none?: CharacterRatingWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type OAuthAccountListRelationFilter = {
    every?: OAuthAccountWhereInput
    some?: OAuthAccountWhereInput
    none?: OAuthAccountWhereInput
  }

  export type RefreshTokenListRelationFilter = {
    every?: RefreshTokenWhereInput
    some?: RefreshTokenWhereInput
    none?: RefreshTokenWhereInput
  }

  export type ChatRoomListRelationFilter = {
    every?: ChatRoomWhereInput
    some?: ChatRoomWhereInput
    none?: ChatRoomWhereInput
  }

  export type ChatParticipantListRelationFilter = {
    every?: ChatParticipantWhereInput
    some?: ChatParticipantWhereInput
    none?: ChatParticipantWhereInput
  }

  export type ChatMessageListRelationFilter = {
    every?: ChatMessageWhereInput
    some?: ChatMessageWhereInput
    none?: ChatMessageWhereInput
  }

  export type WorkflowListRelationFilter = {
    every?: WorkflowWhereInput
    some?: WorkflowWhereInput
    none?: WorkflowWhereInput
  }

  export type WorkflowInstanceListRelationFilter = {
    every?: WorkflowInstanceWhereInput
    some?: WorkflowInstanceWhereInput
    none?: WorkflowInstanceWhereInput
  }

  export type WorkflowRatingListRelationFilter = {
    every?: WorkflowRatingWhereInput
    some?: WorkflowRatingWhereInput
    none?: WorkflowRatingWhereInput
  }

  export type ScheduledTaskListRelationFilter = {
    every?: ScheduledTaskWhereInput
    some?: ScheduledTaskWhereInput
    none?: ScheduledTaskWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CharacterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CharacterFavoriteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CharacterRatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OAuthAccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RefreshTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatRoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowInstanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowRatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduledTaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    avatar?: SortOrder
    bio?: SortOrder
    role?: SortOrder
    credits?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionExpiresAt?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    resetPasswordToken?: SortOrder
    resetPasswordExpires?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    credits?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    avatar?: SortOrder
    bio?: SortOrder
    role?: SortOrder
    credits?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionExpiresAt?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    resetPasswordToken?: SortOrder
    resetPasswordExpires?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    avatar?: SortOrder
    bio?: SortOrder
    role?: SortOrder
    credits?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionExpiresAt?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    resetPasswordToken?: SortOrder
    resetPasswordExpires?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    credits?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type OAuthAccountProviderProviderIdCompoundUniqueInput = {
    provider: string
    providerId: string
  }

  export type OAuthAccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OAuthAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OAuthAccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RefreshTokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RefreshTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RefreshTokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CharacterNameCreatorIdCompoundUniqueInput = {
    name: string
    creatorId: string
  }

  export type CharacterCountOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    fullDescription?: SortOrder
    personality?: SortOrder
    backstory?: SortOrder
    speakingStyle?: SortOrder
    scenario?: SortOrder
    firstMessage?: SortOrder
    systemPrompt?: SortOrder
    exampleDialogs?: SortOrder
    avatar?: SortOrder
    coverImage?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    language?: SortOrder
    model?: SortOrder
    temperature?: SortOrder
    maxTokens?: SortOrder
    isPublic?: SortOrder
    isNSFW?: SortOrder
    isFeatured?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    chatCount?: SortOrder
    favoriteCount?: SortOrder
    importedFrom?: SortOrder
    version?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterAvgOrderByAggregateInput = {
    temperature?: SortOrder
    maxTokens?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    chatCount?: SortOrder
    favoriteCount?: SortOrder
    version?: SortOrder
  }

  export type CharacterMaxOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    fullDescription?: SortOrder
    personality?: SortOrder
    backstory?: SortOrder
    speakingStyle?: SortOrder
    scenario?: SortOrder
    firstMessage?: SortOrder
    systemPrompt?: SortOrder
    exampleDialogs?: SortOrder
    avatar?: SortOrder
    coverImage?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    language?: SortOrder
    model?: SortOrder
    temperature?: SortOrder
    maxTokens?: SortOrder
    isPublic?: SortOrder
    isNSFW?: SortOrder
    isFeatured?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    chatCount?: SortOrder
    favoriteCount?: SortOrder
    importedFrom?: SortOrder
    version?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterMinOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    fullDescription?: SortOrder
    personality?: SortOrder
    backstory?: SortOrder
    speakingStyle?: SortOrder
    scenario?: SortOrder
    firstMessage?: SortOrder
    systemPrompt?: SortOrder
    exampleDialogs?: SortOrder
    avatar?: SortOrder
    coverImage?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    language?: SortOrder
    model?: SortOrder
    temperature?: SortOrder
    maxTokens?: SortOrder
    isPublic?: SortOrder
    isNSFW?: SortOrder
    isFeatured?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    chatCount?: SortOrder
    favoriteCount?: SortOrder
    importedFrom?: SortOrder
    version?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterSumOrderByAggregateInput = {
    temperature?: SortOrder
    maxTokens?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    chatCount?: SortOrder
    favoriteCount?: SortOrder
    version?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CharacterRelationFilter = {
    is?: CharacterWhereInput
    isNot?: CharacterWhereInput
  }

  export type ChatSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    title?: SortOrder
    model?: SortOrder
    presetId?: SortOrder
    worldInfoId?: SortOrder
    lastMessageAt?: SortOrder
    messageCount?: SortOrder
    totalTokens?: SortOrder
    isArchived?: SortOrder
    isPinned?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatSessionAvgOrderByAggregateInput = {
    messageCount?: SortOrder
    totalTokens?: SortOrder
  }

  export type ChatSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    title?: SortOrder
    model?: SortOrder
    presetId?: SortOrder
    worldInfoId?: SortOrder
    lastMessageAt?: SortOrder
    messageCount?: SortOrder
    totalTokens?: SortOrder
    isArchived?: SortOrder
    isPinned?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    title?: SortOrder
    model?: SortOrder
    presetId?: SortOrder
    worldInfoId?: SortOrder
    lastMessageAt?: SortOrder
    messageCount?: SortOrder
    totalTokens?: SortOrder
    isArchived?: SortOrder
    isPinned?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatSessionSumOrderByAggregateInput = {
    messageCount?: SortOrder
    totalTokens?: SortOrder
  }

  export type ChatRoomCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    maxParticipants?: SortOrder
    isPrivate?: SortOrder
    allowSpectators?: SortOrder
    roomType?: SortOrder
    settings?: SortOrder
    lastMessageAt?: SortOrder
    messageCount?: SortOrder
    totalTokens?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatRoomAvgOrderByAggregateInput = {
    maxParticipants?: SortOrder
    messageCount?: SortOrder
    totalTokens?: SortOrder
  }

  export type ChatRoomMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    maxParticipants?: SortOrder
    isPrivate?: SortOrder
    allowSpectators?: SortOrder
    roomType?: SortOrder
    settings?: SortOrder
    lastMessageAt?: SortOrder
    messageCount?: SortOrder
    totalTokens?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatRoomMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    maxParticipants?: SortOrder
    isPrivate?: SortOrder
    allowSpectators?: SortOrder
    roomType?: SortOrder
    settings?: SortOrder
    lastMessageAt?: SortOrder
    messageCount?: SortOrder
    totalTokens?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatRoomSumOrderByAggregateInput = {
    maxParticipants?: SortOrder
    messageCount?: SortOrder
    totalTokens?: SortOrder
  }

  export type ChatRoomRelationFilter = {
    is?: ChatRoomWhereInput
    isNot?: ChatRoomWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CharacterNullableRelationFilter = {
    is?: CharacterWhereInput | null
    isNot?: CharacterWhereInput | null
  }

  export type ChatParticipantRoomIdUserIdCompoundUniqueInput = {
    roomId: string
    userId: string
  }

  export type ChatParticipantRoomIdCharacterIdCompoundUniqueInput = {
    roomId: string
    characterId: string
  }

  export type ChatParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    role?: SortOrder
    permissions?: SortOrder
    joinedAt?: SortOrder
    lastSeenAt?: SortOrder
    isActive?: SortOrder
    isMuted?: SortOrder
  }

  export type ChatParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    role?: SortOrder
    permissions?: SortOrder
    joinedAt?: SortOrder
    lastSeenAt?: SortOrder
    isActive?: SortOrder
    isMuted?: SortOrder
  }

  export type ChatParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    role?: SortOrder
    permissions?: SortOrder
    joinedAt?: SortOrder
    lastSeenAt?: SortOrder
    isActive?: SortOrder
    isMuted?: SortOrder
  }

  export type ChatMessageNullableRelationFilter = {
    is?: ChatMessageWhereInput | null
    isNot?: ChatMessageWhereInput | null
  }

  export type ChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    senderId?: SortOrder
    characterId?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    replyToId?: SortOrder
    tokens?: SortOrder
    isEdited?: SortOrder
    isDeleted?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatMessageAvgOrderByAggregateInput = {
    tokens?: SortOrder
  }

  export type ChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    senderId?: SortOrder
    characterId?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    replyToId?: SortOrder
    tokens?: SortOrder
    isEdited?: SortOrder
    isDeleted?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    senderId?: SortOrder
    characterId?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    replyToId?: SortOrder
    tokens?: SortOrder
    isEdited?: SortOrder
    isDeleted?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatMessageSumOrderByAggregateInput = {
    tokens?: SortOrder
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    method?: SortOrder
    externalId?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    method?: SortOrder
    externalId?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    method?: SortOrder
    externalId?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type ChatSessionRelationFilter = {
    is?: ChatSessionWhereInput
    isNot?: ChatSessionWhereInput
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    tokens?: SortOrder
    edited?: SortOrder
    deleted?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    tokens?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    tokens?: SortOrder
    edited?: SortOrder
    deleted?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    tokens?: SortOrder
    edited?: SortOrder
    deleted?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    tokens?: SortOrder
  }

  export type CharacterFavoriteUserIdCharacterIdCompoundUniqueInput = {
    userId: string
    characterId: string
  }

  export type CharacterFavoriteCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    createdAt?: SortOrder
  }

  export type CharacterFavoriteMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    createdAt?: SortOrder
  }

  export type CharacterFavoriteMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    createdAt?: SortOrder
  }

  export type CharacterRatingUserIdCharacterIdCompoundUniqueInput = {
    userId: string
    characterId: string
  }

  export type CharacterRatingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterRatingAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type CharacterRatingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterRatingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    characterId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterRatingSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type AdminLogCountOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    details?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminLogMaxOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    details?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminLogMinOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    details?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    responseTime?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageLogAvgOrderByAggregateInput = {
    statusCode?: SortOrder
    responseTime?: SortOrder
  }

  export type UsageLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    responseTime?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    responseTime?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageLogSumOrderByAggregateInput = {
    statusCode?: SortOrder
    responseTime?: SortOrder
  }

  export type AlertCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    message?: SortOrder
    source?: SortOrder
    metadata?: SortOrder
    isRead?: SortOrder
    isResolved?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlertMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    message?: SortOrder
    source?: SortOrder
    metadata?: SortOrder
    isRead?: SortOrder
    isResolved?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlertMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    message?: SortOrder
    source?: SortOrder
    metadata?: SortOrder
    isRead?: SortOrder
    isResolved?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ChannelCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    apiKey?: SortOrder
    baseUrl?: SortOrder
    models?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    weight?: SortOrder
    maxTokens?: SortOrder
    rpmLimit?: SortOrder
    tpmLimit?: SortOrder
    usageCount?: SortOrder
    errorCount?: SortOrder
    lastUsedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChannelAvgOrderByAggregateInput = {
    priority?: SortOrder
    weight?: SortOrder
    maxTokens?: SortOrder
    rpmLimit?: SortOrder
    tpmLimit?: SortOrder
    usageCount?: SortOrder
    errorCount?: SortOrder
  }

  export type ChannelMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    apiKey?: SortOrder
    baseUrl?: SortOrder
    models?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    weight?: SortOrder
    maxTokens?: SortOrder
    rpmLimit?: SortOrder
    tpmLimit?: SortOrder
    usageCount?: SortOrder
    errorCount?: SortOrder
    lastUsedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChannelMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    apiKey?: SortOrder
    baseUrl?: SortOrder
    models?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    weight?: SortOrder
    maxTokens?: SortOrder
    rpmLimit?: SortOrder
    tpmLimit?: SortOrder
    usageCount?: SortOrder
    errorCount?: SortOrder
    lastUsedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChannelSumOrderByAggregateInput = {
    priority?: SortOrder
    weight?: SortOrder
    maxTokens?: SortOrder
    rpmLimit?: SortOrder
    tpmLimit?: SortOrder
    usageCount?: SortOrder
    errorCount?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type WorkflowTemplateListRelationFilter = {
    every?: WorkflowTemplateWhereInput
    some?: WorkflowTemplateWhereInput
    none?: WorkflowTemplateWhereInput
  }

  export type WorkflowTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowNameCreatorIdCompoundUniqueInput = {
    name: string
    creatorId: string
  }

  export type WorkflowCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    version?: SortOrder
    status?: SortOrder
    isTemplate?: SortOrder
    isPublic?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    definition?: SortOrder
    variables?: SortOrder
    settings?: SortOrder
    usageCount?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkflowAvgOrderByAggregateInput = {
    usageCount?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type WorkflowMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    version?: SortOrder
    status?: SortOrder
    isTemplate?: SortOrder
    isPublic?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    definition?: SortOrder
    variables?: SortOrder
    settings?: SortOrder
    usageCount?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkflowMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    version?: SortOrder
    status?: SortOrder
    isTemplate?: SortOrder
    isPublic?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    definition?: SortOrder
    variables?: SortOrder
    settings?: SortOrder
    usageCount?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkflowSumOrderByAggregateInput = {
    usageCount?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type WorkflowRelationFilter = {
    is?: WorkflowWhereInput
    isNot?: WorkflowWhereInput
  }

  export type StepExecutionListRelationFilter = {
    every?: StepExecutionWhereInput
    some?: StepExecutionWhereInput
    none?: StepExecutionWhereInput
  }

  export type WorkflowLogListRelationFilter = {
    every?: WorkflowLogWhereInput
    some?: WorkflowLogWhereInput
    none?: WorkflowLogWhereInput
  }

  export type StepExecutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowInstanceCountOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    executorId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    input?: SortOrder
    output?: SortOrder
    variables?: SortOrder
    currentStep?: SortOrder
    progress?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    failureReason?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    timeout?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkflowInstanceAvgOrderByAggregateInput = {
    progress?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    timeout?: SortOrder
  }

  export type WorkflowInstanceMaxOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    executorId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    input?: SortOrder
    output?: SortOrder
    variables?: SortOrder
    currentStep?: SortOrder
    progress?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    failureReason?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    timeout?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkflowInstanceMinOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    executorId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    input?: SortOrder
    output?: SortOrder
    variables?: SortOrder
    currentStep?: SortOrder
    progress?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    failureReason?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    timeout?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkflowInstanceSumOrderByAggregateInput = {
    progress?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    timeout?: SortOrder
  }

  export type WorkflowInstanceRelationFilter = {
    is?: WorkflowInstanceWhereInput
    isNot?: WorkflowInstanceWhereInput
  }

  export type StepExecutionCountOrderByAggregateInput = {
    id?: SortOrder
    instanceId?: SortOrder
    stepId?: SortOrder
    stepType?: SortOrder
    status?: SortOrder
    input?: SortOrder
    output?: SortOrder
    error?: SortOrder
    duration?: SortOrder
    retryCount?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StepExecutionAvgOrderByAggregateInput = {
    duration?: SortOrder
    retryCount?: SortOrder
  }

  export type StepExecutionMaxOrderByAggregateInput = {
    id?: SortOrder
    instanceId?: SortOrder
    stepId?: SortOrder
    stepType?: SortOrder
    status?: SortOrder
    input?: SortOrder
    output?: SortOrder
    error?: SortOrder
    duration?: SortOrder
    retryCount?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StepExecutionMinOrderByAggregateInput = {
    id?: SortOrder
    instanceId?: SortOrder
    stepId?: SortOrder
    stepType?: SortOrder
    status?: SortOrder
    input?: SortOrder
    output?: SortOrder
    error?: SortOrder
    duration?: SortOrder
    retryCount?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StepExecutionSumOrderByAggregateInput = {
    duration?: SortOrder
    retryCount?: SortOrder
  }

  export type WorkflowLogCountOrderByAggregateInput = {
    id?: SortOrder
    instanceId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    data?: SortOrder
    stepId?: SortOrder
    timestamp?: SortOrder
  }

  export type WorkflowLogMaxOrderByAggregateInput = {
    id?: SortOrder
    instanceId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    data?: SortOrder
    stepId?: SortOrder
    timestamp?: SortOrder
  }

  export type WorkflowLogMinOrderByAggregateInput = {
    id?: SortOrder
    instanceId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    data?: SortOrder
    stepId?: SortOrder
    timestamp?: SortOrder
  }

  export type WorkflowTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    isOfficial?: SortOrder
    usageCount?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkflowTemplateAvgOrderByAggregateInput = {
    usageCount?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type WorkflowTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    isOfficial?: SortOrder
    usageCount?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkflowTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    isOfficial?: SortOrder
    usageCount?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkflowTemplateSumOrderByAggregateInput = {
    usageCount?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type WorkflowRatingWorkflowIdUserIdCompoundUniqueInput = {
    workflowId: string
    userId: string
  }

  export type WorkflowRatingCountOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkflowRatingAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type WorkflowRatingMaxOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkflowRatingMinOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkflowRatingSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ScheduledTaskCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    workflowId?: SortOrder
    creatorId?: SortOrder
    cronExpression?: SortOrder
    timezone?: SortOrder
    isEnabled?: SortOrder
    input?: SortOrder
    lastRunAt?: SortOrder
    nextRunAt?: SortOrder
    runCount?: SortOrder
    failureCount?: SortOrder
    maxRuns?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduledTaskAvgOrderByAggregateInput = {
    runCount?: SortOrder
    failureCount?: SortOrder
    maxRuns?: SortOrder
  }

  export type ScheduledTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    workflowId?: SortOrder
    creatorId?: SortOrder
    cronExpression?: SortOrder
    timezone?: SortOrder
    isEnabled?: SortOrder
    input?: SortOrder
    lastRunAt?: SortOrder
    nextRunAt?: SortOrder
    runCount?: SortOrder
    failureCount?: SortOrder
    maxRuns?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduledTaskMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    workflowId?: SortOrder
    creatorId?: SortOrder
    cronExpression?: SortOrder
    timezone?: SortOrder
    isEnabled?: SortOrder
    input?: SortOrder
    lastRunAt?: SortOrder
    nextRunAt?: SortOrder
    runCount?: SortOrder
    failureCount?: SortOrder
    maxRuns?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduledTaskSumOrderByAggregateInput = {
    runCount?: SortOrder
    failureCount?: SortOrder
    maxRuns?: SortOrder
  }

  export type CharacterCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CharacterCreateWithoutCreatorInput, CharacterUncheckedCreateWithoutCreatorInput> | CharacterCreateWithoutCreatorInput[] | CharacterUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutCreatorInput | CharacterCreateOrConnectWithoutCreatorInput[]
    createMany?: CharacterCreateManyCreatorInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type ChatSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatSessionCreateWithoutUserInput, ChatSessionUncheckedCreateWithoutUserInput> | ChatSessionCreateWithoutUserInput[] | ChatSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutUserInput | ChatSessionCreateOrConnectWithoutUserInput[]
    createMany?: ChatSessionCreateManyUserInputEnvelope
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type CharacterFavoriteCreateNestedManyWithoutUserInput = {
    create?: XOR<CharacterFavoriteCreateWithoutUserInput, CharacterFavoriteUncheckedCreateWithoutUserInput> | CharacterFavoriteCreateWithoutUserInput[] | CharacterFavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterFavoriteCreateOrConnectWithoutUserInput | CharacterFavoriteCreateOrConnectWithoutUserInput[]
    createMany?: CharacterFavoriteCreateManyUserInputEnvelope
    connect?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
  }

  export type CharacterRatingCreateNestedManyWithoutUserInput = {
    create?: XOR<CharacterRatingCreateWithoutUserInput, CharacterRatingUncheckedCreateWithoutUserInput> | CharacterRatingCreateWithoutUserInput[] | CharacterRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterRatingCreateOrConnectWithoutUserInput | CharacterRatingCreateOrConnectWithoutUserInput[]
    createMany?: CharacterRatingCreateManyUserInputEnvelope
    connect?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type OAuthAccountCreateNestedManyWithoutUserInput = {
    create?: XOR<OAuthAccountCreateWithoutUserInput, OAuthAccountUncheckedCreateWithoutUserInput> | OAuthAccountCreateWithoutUserInput[] | OAuthAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OAuthAccountCreateOrConnectWithoutUserInput | OAuthAccountCreateOrConnectWithoutUserInput[]
    createMany?: OAuthAccountCreateManyUserInputEnvelope
    connect?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
  }

  export type RefreshTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type ChatRoomCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ChatRoomCreateWithoutOwnerInput, ChatRoomUncheckedCreateWithoutOwnerInput> | ChatRoomCreateWithoutOwnerInput[] | ChatRoomUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutOwnerInput | ChatRoomCreateOrConnectWithoutOwnerInput[]
    createMany?: ChatRoomCreateManyOwnerInputEnvelope
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
  }

  export type ChatParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatParticipantCreateWithoutUserInput, ChatParticipantUncheckedCreateWithoutUserInput> | ChatParticipantCreateWithoutUserInput[] | ChatParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatParticipantCreateOrConnectWithoutUserInput | ChatParticipantCreateOrConnectWithoutUserInput[]
    createMany?: ChatParticipantCreateManyUserInputEnvelope
    connect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
  }

  export type ChatMessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<ChatMessageCreateWithoutSenderInput, ChatMessageUncheckedCreateWithoutSenderInput> | ChatMessageCreateWithoutSenderInput[] | ChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSenderInput | ChatMessageCreateOrConnectWithoutSenderInput[]
    createMany?: ChatMessageCreateManySenderInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type WorkflowCreateNestedManyWithoutCreatorInput = {
    create?: XOR<WorkflowCreateWithoutCreatorInput, WorkflowUncheckedCreateWithoutCreatorInput> | WorkflowCreateWithoutCreatorInput[] | WorkflowUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: WorkflowCreateOrConnectWithoutCreatorInput | WorkflowCreateOrConnectWithoutCreatorInput[]
    createMany?: WorkflowCreateManyCreatorInputEnvelope
    connect?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
  }

  export type WorkflowInstanceCreateNestedManyWithoutExecutorInput = {
    create?: XOR<WorkflowInstanceCreateWithoutExecutorInput, WorkflowInstanceUncheckedCreateWithoutExecutorInput> | WorkflowInstanceCreateWithoutExecutorInput[] | WorkflowInstanceUncheckedCreateWithoutExecutorInput[]
    connectOrCreate?: WorkflowInstanceCreateOrConnectWithoutExecutorInput | WorkflowInstanceCreateOrConnectWithoutExecutorInput[]
    createMany?: WorkflowInstanceCreateManyExecutorInputEnvelope
    connect?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
  }

  export type WorkflowRatingCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkflowRatingCreateWithoutUserInput, WorkflowRatingUncheckedCreateWithoutUserInput> | WorkflowRatingCreateWithoutUserInput[] | WorkflowRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkflowRatingCreateOrConnectWithoutUserInput | WorkflowRatingCreateOrConnectWithoutUserInput[]
    createMany?: WorkflowRatingCreateManyUserInputEnvelope
    connect?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
  }

  export type ScheduledTaskCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ScheduledTaskCreateWithoutCreatorInput, ScheduledTaskUncheckedCreateWithoutCreatorInput> | ScheduledTaskCreateWithoutCreatorInput[] | ScheduledTaskUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ScheduledTaskCreateOrConnectWithoutCreatorInput | ScheduledTaskCreateOrConnectWithoutCreatorInput[]
    createMany?: ScheduledTaskCreateManyCreatorInputEnvelope
    connect?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
  }

  export type CharacterUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CharacterCreateWithoutCreatorInput, CharacterUncheckedCreateWithoutCreatorInput> | CharacterCreateWithoutCreatorInput[] | CharacterUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutCreatorInput | CharacterCreateOrConnectWithoutCreatorInput[]
    createMany?: CharacterCreateManyCreatorInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type ChatSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatSessionCreateWithoutUserInput, ChatSessionUncheckedCreateWithoutUserInput> | ChatSessionCreateWithoutUserInput[] | ChatSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutUserInput | ChatSessionCreateOrConnectWithoutUserInput[]
    createMany?: ChatSessionCreateManyUserInputEnvelope
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CharacterFavoriteCreateWithoutUserInput, CharacterFavoriteUncheckedCreateWithoutUserInput> | CharacterFavoriteCreateWithoutUserInput[] | CharacterFavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterFavoriteCreateOrConnectWithoutUserInput | CharacterFavoriteCreateOrConnectWithoutUserInput[]
    createMany?: CharacterFavoriteCreateManyUserInputEnvelope
    connect?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
  }

  export type CharacterRatingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CharacterRatingCreateWithoutUserInput, CharacterRatingUncheckedCreateWithoutUserInput> | CharacterRatingCreateWithoutUserInput[] | CharacterRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterRatingCreateOrConnectWithoutUserInput | CharacterRatingCreateOrConnectWithoutUserInput[]
    createMany?: CharacterRatingCreateManyUserInputEnvelope
    connect?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type OAuthAccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OAuthAccountCreateWithoutUserInput, OAuthAccountUncheckedCreateWithoutUserInput> | OAuthAccountCreateWithoutUserInput[] | OAuthAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OAuthAccountCreateOrConnectWithoutUserInput | OAuthAccountCreateOrConnectWithoutUserInput[]
    createMany?: OAuthAccountCreateManyUserInputEnvelope
    connect?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
  }

  export type RefreshTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type ChatRoomUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ChatRoomCreateWithoutOwnerInput, ChatRoomUncheckedCreateWithoutOwnerInput> | ChatRoomCreateWithoutOwnerInput[] | ChatRoomUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutOwnerInput | ChatRoomCreateOrConnectWithoutOwnerInput[]
    createMany?: ChatRoomCreateManyOwnerInputEnvelope
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
  }

  export type ChatParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatParticipantCreateWithoutUserInput, ChatParticipantUncheckedCreateWithoutUserInput> | ChatParticipantCreateWithoutUserInput[] | ChatParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatParticipantCreateOrConnectWithoutUserInput | ChatParticipantCreateOrConnectWithoutUserInput[]
    createMany?: ChatParticipantCreateManyUserInputEnvelope
    connect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<ChatMessageCreateWithoutSenderInput, ChatMessageUncheckedCreateWithoutSenderInput> | ChatMessageCreateWithoutSenderInput[] | ChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSenderInput | ChatMessageCreateOrConnectWithoutSenderInput[]
    createMany?: ChatMessageCreateManySenderInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type WorkflowUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<WorkflowCreateWithoutCreatorInput, WorkflowUncheckedCreateWithoutCreatorInput> | WorkflowCreateWithoutCreatorInput[] | WorkflowUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: WorkflowCreateOrConnectWithoutCreatorInput | WorkflowCreateOrConnectWithoutCreatorInput[]
    createMany?: WorkflowCreateManyCreatorInputEnvelope
    connect?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
  }

  export type WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput = {
    create?: XOR<WorkflowInstanceCreateWithoutExecutorInput, WorkflowInstanceUncheckedCreateWithoutExecutorInput> | WorkflowInstanceCreateWithoutExecutorInput[] | WorkflowInstanceUncheckedCreateWithoutExecutorInput[]
    connectOrCreate?: WorkflowInstanceCreateOrConnectWithoutExecutorInput | WorkflowInstanceCreateOrConnectWithoutExecutorInput[]
    createMany?: WorkflowInstanceCreateManyExecutorInputEnvelope
    connect?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
  }

  export type WorkflowRatingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkflowRatingCreateWithoutUserInput, WorkflowRatingUncheckedCreateWithoutUserInput> | WorkflowRatingCreateWithoutUserInput[] | WorkflowRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkflowRatingCreateOrConnectWithoutUserInput | WorkflowRatingCreateOrConnectWithoutUserInput[]
    createMany?: WorkflowRatingCreateManyUserInputEnvelope
    connect?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
  }

  export type ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ScheduledTaskCreateWithoutCreatorInput, ScheduledTaskUncheckedCreateWithoutCreatorInput> | ScheduledTaskCreateWithoutCreatorInput[] | ScheduledTaskUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ScheduledTaskCreateOrConnectWithoutCreatorInput | ScheduledTaskCreateOrConnectWithoutCreatorInput[]
    createMany?: ScheduledTaskCreateManyCreatorInputEnvelope
    connect?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CharacterUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CharacterCreateWithoutCreatorInput, CharacterUncheckedCreateWithoutCreatorInput> | CharacterCreateWithoutCreatorInput[] | CharacterUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutCreatorInput | CharacterCreateOrConnectWithoutCreatorInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutCreatorInput | CharacterUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CharacterCreateManyCreatorInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutCreatorInput | CharacterUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutCreatorInput | CharacterUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type ChatSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatSessionCreateWithoutUserInput, ChatSessionUncheckedCreateWithoutUserInput> | ChatSessionCreateWithoutUserInput[] | ChatSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutUserInput | ChatSessionCreateOrConnectWithoutUserInput[]
    upsert?: ChatSessionUpsertWithWhereUniqueWithoutUserInput | ChatSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatSessionCreateManyUserInputEnvelope
    set?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    disconnect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    delete?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    update?: ChatSessionUpdateWithWhereUniqueWithoutUserInput | ChatSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatSessionUpdateManyWithWhereWithoutUserInput | ChatSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutUserInput | MessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutUserInput | MessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutUserInput | MessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type CharacterFavoriteUpdateManyWithoutUserNestedInput = {
    create?: XOR<CharacterFavoriteCreateWithoutUserInput, CharacterFavoriteUncheckedCreateWithoutUserInput> | CharacterFavoriteCreateWithoutUserInput[] | CharacterFavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterFavoriteCreateOrConnectWithoutUserInput | CharacterFavoriteCreateOrConnectWithoutUserInput[]
    upsert?: CharacterFavoriteUpsertWithWhereUniqueWithoutUserInput | CharacterFavoriteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CharacterFavoriteCreateManyUserInputEnvelope
    set?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    disconnect?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    delete?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    connect?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    update?: CharacterFavoriteUpdateWithWhereUniqueWithoutUserInput | CharacterFavoriteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CharacterFavoriteUpdateManyWithWhereWithoutUserInput | CharacterFavoriteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CharacterFavoriteScalarWhereInput | CharacterFavoriteScalarWhereInput[]
  }

  export type CharacterRatingUpdateManyWithoutUserNestedInput = {
    create?: XOR<CharacterRatingCreateWithoutUserInput, CharacterRatingUncheckedCreateWithoutUserInput> | CharacterRatingCreateWithoutUserInput[] | CharacterRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterRatingCreateOrConnectWithoutUserInput | CharacterRatingCreateOrConnectWithoutUserInput[]
    upsert?: CharacterRatingUpsertWithWhereUniqueWithoutUserInput | CharacterRatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CharacterRatingCreateManyUserInputEnvelope
    set?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    disconnect?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    delete?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    connect?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    update?: CharacterRatingUpdateWithWhereUniqueWithoutUserInput | CharacterRatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CharacterRatingUpdateManyWithWhereWithoutUserInput | CharacterRatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CharacterRatingScalarWhereInput | CharacterRatingScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type OAuthAccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<OAuthAccountCreateWithoutUserInput, OAuthAccountUncheckedCreateWithoutUserInput> | OAuthAccountCreateWithoutUserInput[] | OAuthAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OAuthAccountCreateOrConnectWithoutUserInput | OAuthAccountCreateOrConnectWithoutUserInput[]
    upsert?: OAuthAccountUpsertWithWhereUniqueWithoutUserInput | OAuthAccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OAuthAccountCreateManyUserInputEnvelope
    set?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    disconnect?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    delete?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    connect?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    update?: OAuthAccountUpdateWithWhereUniqueWithoutUserInput | OAuthAccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OAuthAccountUpdateManyWithWhereWithoutUserInput | OAuthAccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OAuthAccountScalarWhereInput | OAuthAccountScalarWhereInput[]
  }

  export type RefreshTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type ChatRoomUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ChatRoomCreateWithoutOwnerInput, ChatRoomUncheckedCreateWithoutOwnerInput> | ChatRoomCreateWithoutOwnerInput[] | ChatRoomUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutOwnerInput | ChatRoomCreateOrConnectWithoutOwnerInput[]
    upsert?: ChatRoomUpsertWithWhereUniqueWithoutOwnerInput | ChatRoomUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ChatRoomCreateManyOwnerInputEnvelope
    set?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    disconnect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    delete?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    update?: ChatRoomUpdateWithWhereUniqueWithoutOwnerInput | ChatRoomUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ChatRoomUpdateManyWithWhereWithoutOwnerInput | ChatRoomUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
  }

  export type ChatParticipantUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatParticipantCreateWithoutUserInput, ChatParticipantUncheckedCreateWithoutUserInput> | ChatParticipantCreateWithoutUserInput[] | ChatParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatParticipantCreateOrConnectWithoutUserInput | ChatParticipantCreateOrConnectWithoutUserInput[]
    upsert?: ChatParticipantUpsertWithWhereUniqueWithoutUserInput | ChatParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatParticipantCreateManyUserInputEnvelope
    set?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    disconnect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    delete?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    connect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    update?: ChatParticipantUpdateWithWhereUniqueWithoutUserInput | ChatParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatParticipantUpdateManyWithWhereWithoutUserInput | ChatParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatParticipantScalarWhereInput | ChatParticipantScalarWhereInput[]
  }

  export type ChatMessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<ChatMessageCreateWithoutSenderInput, ChatMessageUncheckedCreateWithoutSenderInput> | ChatMessageCreateWithoutSenderInput[] | ChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSenderInput | ChatMessageCreateOrConnectWithoutSenderInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutSenderInput | ChatMessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: ChatMessageCreateManySenderInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutSenderInput | ChatMessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutSenderInput | ChatMessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type WorkflowUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<WorkflowCreateWithoutCreatorInput, WorkflowUncheckedCreateWithoutCreatorInput> | WorkflowCreateWithoutCreatorInput[] | WorkflowUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: WorkflowCreateOrConnectWithoutCreatorInput | WorkflowCreateOrConnectWithoutCreatorInput[]
    upsert?: WorkflowUpsertWithWhereUniqueWithoutCreatorInput | WorkflowUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: WorkflowCreateManyCreatorInputEnvelope
    set?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    disconnect?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    delete?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    connect?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    update?: WorkflowUpdateWithWhereUniqueWithoutCreatorInput | WorkflowUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: WorkflowUpdateManyWithWhereWithoutCreatorInput | WorkflowUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: WorkflowScalarWhereInput | WorkflowScalarWhereInput[]
  }

  export type WorkflowInstanceUpdateManyWithoutExecutorNestedInput = {
    create?: XOR<WorkflowInstanceCreateWithoutExecutorInput, WorkflowInstanceUncheckedCreateWithoutExecutorInput> | WorkflowInstanceCreateWithoutExecutorInput[] | WorkflowInstanceUncheckedCreateWithoutExecutorInput[]
    connectOrCreate?: WorkflowInstanceCreateOrConnectWithoutExecutorInput | WorkflowInstanceCreateOrConnectWithoutExecutorInput[]
    upsert?: WorkflowInstanceUpsertWithWhereUniqueWithoutExecutorInput | WorkflowInstanceUpsertWithWhereUniqueWithoutExecutorInput[]
    createMany?: WorkflowInstanceCreateManyExecutorInputEnvelope
    set?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    disconnect?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    delete?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    connect?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    update?: WorkflowInstanceUpdateWithWhereUniqueWithoutExecutorInput | WorkflowInstanceUpdateWithWhereUniqueWithoutExecutorInput[]
    updateMany?: WorkflowInstanceUpdateManyWithWhereWithoutExecutorInput | WorkflowInstanceUpdateManyWithWhereWithoutExecutorInput[]
    deleteMany?: WorkflowInstanceScalarWhereInput | WorkflowInstanceScalarWhereInput[]
  }

  export type WorkflowRatingUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkflowRatingCreateWithoutUserInput, WorkflowRatingUncheckedCreateWithoutUserInput> | WorkflowRatingCreateWithoutUserInput[] | WorkflowRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkflowRatingCreateOrConnectWithoutUserInput | WorkflowRatingCreateOrConnectWithoutUserInput[]
    upsert?: WorkflowRatingUpsertWithWhereUniqueWithoutUserInput | WorkflowRatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkflowRatingCreateManyUserInputEnvelope
    set?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    disconnect?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    delete?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    connect?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    update?: WorkflowRatingUpdateWithWhereUniqueWithoutUserInput | WorkflowRatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkflowRatingUpdateManyWithWhereWithoutUserInput | WorkflowRatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkflowRatingScalarWhereInput | WorkflowRatingScalarWhereInput[]
  }

  export type ScheduledTaskUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ScheduledTaskCreateWithoutCreatorInput, ScheduledTaskUncheckedCreateWithoutCreatorInput> | ScheduledTaskCreateWithoutCreatorInput[] | ScheduledTaskUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ScheduledTaskCreateOrConnectWithoutCreatorInput | ScheduledTaskCreateOrConnectWithoutCreatorInput[]
    upsert?: ScheduledTaskUpsertWithWhereUniqueWithoutCreatorInput | ScheduledTaskUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ScheduledTaskCreateManyCreatorInputEnvelope
    set?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    disconnect?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    delete?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    connect?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    update?: ScheduledTaskUpdateWithWhereUniqueWithoutCreatorInput | ScheduledTaskUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ScheduledTaskUpdateManyWithWhereWithoutCreatorInput | ScheduledTaskUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ScheduledTaskScalarWhereInput | ScheduledTaskScalarWhereInput[]
  }

  export type CharacterUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CharacterCreateWithoutCreatorInput, CharacterUncheckedCreateWithoutCreatorInput> | CharacterCreateWithoutCreatorInput[] | CharacterUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutCreatorInput | CharacterCreateOrConnectWithoutCreatorInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutCreatorInput | CharacterUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CharacterCreateManyCreatorInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutCreatorInput | CharacterUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutCreatorInput | CharacterUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type ChatSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatSessionCreateWithoutUserInput, ChatSessionUncheckedCreateWithoutUserInput> | ChatSessionCreateWithoutUserInput[] | ChatSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutUserInput | ChatSessionCreateOrConnectWithoutUserInput[]
    upsert?: ChatSessionUpsertWithWhereUniqueWithoutUserInput | ChatSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatSessionCreateManyUserInputEnvelope
    set?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    disconnect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    delete?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    update?: ChatSessionUpdateWithWhereUniqueWithoutUserInput | ChatSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatSessionUpdateManyWithWhereWithoutUserInput | ChatSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutUserInput | MessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutUserInput | MessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutUserInput | MessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CharacterFavoriteCreateWithoutUserInput, CharacterFavoriteUncheckedCreateWithoutUserInput> | CharacterFavoriteCreateWithoutUserInput[] | CharacterFavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterFavoriteCreateOrConnectWithoutUserInput | CharacterFavoriteCreateOrConnectWithoutUserInput[]
    upsert?: CharacterFavoriteUpsertWithWhereUniqueWithoutUserInput | CharacterFavoriteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CharacterFavoriteCreateManyUserInputEnvelope
    set?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    disconnect?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    delete?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    connect?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    update?: CharacterFavoriteUpdateWithWhereUniqueWithoutUserInput | CharacterFavoriteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CharacterFavoriteUpdateManyWithWhereWithoutUserInput | CharacterFavoriteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CharacterFavoriteScalarWhereInput | CharacterFavoriteScalarWhereInput[]
  }

  export type CharacterRatingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CharacterRatingCreateWithoutUserInput, CharacterRatingUncheckedCreateWithoutUserInput> | CharacterRatingCreateWithoutUserInput[] | CharacterRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterRatingCreateOrConnectWithoutUserInput | CharacterRatingCreateOrConnectWithoutUserInput[]
    upsert?: CharacterRatingUpsertWithWhereUniqueWithoutUserInput | CharacterRatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CharacterRatingCreateManyUserInputEnvelope
    set?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    disconnect?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    delete?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    connect?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    update?: CharacterRatingUpdateWithWhereUniqueWithoutUserInput | CharacterRatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CharacterRatingUpdateManyWithWhereWithoutUserInput | CharacterRatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CharacterRatingScalarWhereInput | CharacterRatingScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type OAuthAccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OAuthAccountCreateWithoutUserInput, OAuthAccountUncheckedCreateWithoutUserInput> | OAuthAccountCreateWithoutUserInput[] | OAuthAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OAuthAccountCreateOrConnectWithoutUserInput | OAuthAccountCreateOrConnectWithoutUserInput[]
    upsert?: OAuthAccountUpsertWithWhereUniqueWithoutUserInput | OAuthAccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OAuthAccountCreateManyUserInputEnvelope
    set?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    disconnect?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    delete?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    connect?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    update?: OAuthAccountUpdateWithWhereUniqueWithoutUserInput | OAuthAccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OAuthAccountUpdateManyWithWhereWithoutUserInput | OAuthAccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OAuthAccountScalarWhereInput | OAuthAccountScalarWhereInput[]
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ChatRoomCreateWithoutOwnerInput, ChatRoomUncheckedCreateWithoutOwnerInput> | ChatRoomCreateWithoutOwnerInput[] | ChatRoomUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutOwnerInput | ChatRoomCreateOrConnectWithoutOwnerInput[]
    upsert?: ChatRoomUpsertWithWhereUniqueWithoutOwnerInput | ChatRoomUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ChatRoomCreateManyOwnerInputEnvelope
    set?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    disconnect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    delete?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    update?: ChatRoomUpdateWithWhereUniqueWithoutOwnerInput | ChatRoomUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ChatRoomUpdateManyWithWhereWithoutOwnerInput | ChatRoomUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
  }

  export type ChatParticipantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatParticipantCreateWithoutUserInput, ChatParticipantUncheckedCreateWithoutUserInput> | ChatParticipantCreateWithoutUserInput[] | ChatParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatParticipantCreateOrConnectWithoutUserInput | ChatParticipantCreateOrConnectWithoutUserInput[]
    upsert?: ChatParticipantUpsertWithWhereUniqueWithoutUserInput | ChatParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatParticipantCreateManyUserInputEnvelope
    set?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    disconnect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    delete?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    connect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    update?: ChatParticipantUpdateWithWhereUniqueWithoutUserInput | ChatParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatParticipantUpdateManyWithWhereWithoutUserInput | ChatParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatParticipantScalarWhereInput | ChatParticipantScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<ChatMessageCreateWithoutSenderInput, ChatMessageUncheckedCreateWithoutSenderInput> | ChatMessageCreateWithoutSenderInput[] | ChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSenderInput | ChatMessageCreateOrConnectWithoutSenderInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutSenderInput | ChatMessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: ChatMessageCreateManySenderInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutSenderInput | ChatMessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutSenderInput | ChatMessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type WorkflowUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<WorkflowCreateWithoutCreatorInput, WorkflowUncheckedCreateWithoutCreatorInput> | WorkflowCreateWithoutCreatorInput[] | WorkflowUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: WorkflowCreateOrConnectWithoutCreatorInput | WorkflowCreateOrConnectWithoutCreatorInput[]
    upsert?: WorkflowUpsertWithWhereUniqueWithoutCreatorInput | WorkflowUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: WorkflowCreateManyCreatorInputEnvelope
    set?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    disconnect?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    delete?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    connect?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    update?: WorkflowUpdateWithWhereUniqueWithoutCreatorInput | WorkflowUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: WorkflowUpdateManyWithWhereWithoutCreatorInput | WorkflowUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: WorkflowScalarWhereInput | WorkflowScalarWhereInput[]
  }

  export type WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput = {
    create?: XOR<WorkflowInstanceCreateWithoutExecutorInput, WorkflowInstanceUncheckedCreateWithoutExecutorInput> | WorkflowInstanceCreateWithoutExecutorInput[] | WorkflowInstanceUncheckedCreateWithoutExecutorInput[]
    connectOrCreate?: WorkflowInstanceCreateOrConnectWithoutExecutorInput | WorkflowInstanceCreateOrConnectWithoutExecutorInput[]
    upsert?: WorkflowInstanceUpsertWithWhereUniqueWithoutExecutorInput | WorkflowInstanceUpsertWithWhereUniqueWithoutExecutorInput[]
    createMany?: WorkflowInstanceCreateManyExecutorInputEnvelope
    set?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    disconnect?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    delete?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    connect?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    update?: WorkflowInstanceUpdateWithWhereUniqueWithoutExecutorInput | WorkflowInstanceUpdateWithWhereUniqueWithoutExecutorInput[]
    updateMany?: WorkflowInstanceUpdateManyWithWhereWithoutExecutorInput | WorkflowInstanceUpdateManyWithWhereWithoutExecutorInput[]
    deleteMany?: WorkflowInstanceScalarWhereInput | WorkflowInstanceScalarWhereInput[]
  }

  export type WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkflowRatingCreateWithoutUserInput, WorkflowRatingUncheckedCreateWithoutUserInput> | WorkflowRatingCreateWithoutUserInput[] | WorkflowRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkflowRatingCreateOrConnectWithoutUserInput | WorkflowRatingCreateOrConnectWithoutUserInput[]
    upsert?: WorkflowRatingUpsertWithWhereUniqueWithoutUserInput | WorkflowRatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkflowRatingCreateManyUserInputEnvelope
    set?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    disconnect?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    delete?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    connect?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    update?: WorkflowRatingUpdateWithWhereUniqueWithoutUserInput | WorkflowRatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkflowRatingUpdateManyWithWhereWithoutUserInput | WorkflowRatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkflowRatingScalarWhereInput | WorkflowRatingScalarWhereInput[]
  }

  export type ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ScheduledTaskCreateWithoutCreatorInput, ScheduledTaskUncheckedCreateWithoutCreatorInput> | ScheduledTaskCreateWithoutCreatorInput[] | ScheduledTaskUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ScheduledTaskCreateOrConnectWithoutCreatorInput | ScheduledTaskCreateOrConnectWithoutCreatorInput[]
    upsert?: ScheduledTaskUpsertWithWhereUniqueWithoutCreatorInput | ScheduledTaskUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ScheduledTaskCreateManyCreatorInputEnvelope
    set?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    disconnect?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    delete?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    connect?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    update?: ScheduledTaskUpdateWithWhereUniqueWithoutCreatorInput | ScheduledTaskUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ScheduledTaskUpdateManyWithWhereWithoutCreatorInput | ScheduledTaskUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ScheduledTaskScalarWhereInput | ScheduledTaskScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOauthAccountsInput = {
    create?: XOR<UserCreateWithoutOauthAccountsInput, UserUncheckedCreateWithoutOauthAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOauthAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutOauthAccountsNestedInput = {
    create?: XOR<UserCreateWithoutOauthAccountsInput, UserUncheckedCreateWithoutOauthAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOauthAccountsInput
    upsert?: UserUpsertWithoutOauthAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOauthAccountsInput, UserUpdateWithoutOauthAccountsInput>, UserUncheckedUpdateWithoutOauthAccountsInput>
  }

  export type UserCreateNestedOneWithoutRefreshTokensInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRefreshTokensNestedInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    upsert?: UserUpsertWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRefreshTokensInput, UserUpdateWithoutRefreshTokensInput>, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type UserCreateNestedOneWithoutCharactersInput = {
    create?: XOR<UserCreateWithoutCharactersInput, UserUncheckedCreateWithoutCharactersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCharactersInput
    connect?: UserWhereUniqueInput
  }

  export type ChatSessionCreateNestedManyWithoutCharacterInput = {
    create?: XOR<ChatSessionCreateWithoutCharacterInput, ChatSessionUncheckedCreateWithoutCharacterInput> | ChatSessionCreateWithoutCharacterInput[] | ChatSessionUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutCharacterInput | ChatSessionCreateOrConnectWithoutCharacterInput[]
    createMany?: ChatSessionCreateManyCharacterInputEnvelope
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutCharacterInput = {
    create?: XOR<MessageCreateWithoutCharacterInput, MessageUncheckedCreateWithoutCharacterInput> | MessageCreateWithoutCharacterInput[] | MessageUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutCharacterInput | MessageCreateOrConnectWithoutCharacterInput[]
    createMany?: MessageCreateManyCharacterInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type CharacterFavoriteCreateNestedManyWithoutCharacterInput = {
    create?: XOR<CharacterFavoriteCreateWithoutCharacterInput, CharacterFavoriteUncheckedCreateWithoutCharacterInput> | CharacterFavoriteCreateWithoutCharacterInput[] | CharacterFavoriteUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: CharacterFavoriteCreateOrConnectWithoutCharacterInput | CharacterFavoriteCreateOrConnectWithoutCharacterInput[]
    createMany?: CharacterFavoriteCreateManyCharacterInputEnvelope
    connect?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
  }

  export type CharacterRatingCreateNestedManyWithoutCharacterInput = {
    create?: XOR<CharacterRatingCreateWithoutCharacterInput, CharacterRatingUncheckedCreateWithoutCharacterInput> | CharacterRatingCreateWithoutCharacterInput[] | CharacterRatingUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: CharacterRatingCreateOrConnectWithoutCharacterInput | CharacterRatingCreateOrConnectWithoutCharacterInput[]
    createMany?: CharacterRatingCreateManyCharacterInputEnvelope
    connect?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
  }

  export type ChatParticipantCreateNestedManyWithoutCharacterInput = {
    create?: XOR<ChatParticipantCreateWithoutCharacterInput, ChatParticipantUncheckedCreateWithoutCharacterInput> | ChatParticipantCreateWithoutCharacterInput[] | ChatParticipantUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: ChatParticipantCreateOrConnectWithoutCharacterInput | ChatParticipantCreateOrConnectWithoutCharacterInput[]
    createMany?: ChatParticipantCreateManyCharacterInputEnvelope
    connect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
  }

  export type ChatMessageCreateNestedManyWithoutCharacterInput = {
    create?: XOR<ChatMessageCreateWithoutCharacterInput, ChatMessageUncheckedCreateWithoutCharacterInput> | ChatMessageCreateWithoutCharacterInput[] | ChatMessageUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutCharacterInput | ChatMessageCreateOrConnectWithoutCharacterInput[]
    createMany?: ChatMessageCreateManyCharacterInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ChatSessionUncheckedCreateNestedManyWithoutCharacterInput = {
    create?: XOR<ChatSessionCreateWithoutCharacterInput, ChatSessionUncheckedCreateWithoutCharacterInput> | ChatSessionCreateWithoutCharacterInput[] | ChatSessionUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutCharacterInput | ChatSessionCreateOrConnectWithoutCharacterInput[]
    createMany?: ChatSessionCreateManyCharacterInputEnvelope
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutCharacterInput = {
    create?: XOR<MessageCreateWithoutCharacterInput, MessageUncheckedCreateWithoutCharacterInput> | MessageCreateWithoutCharacterInput[] | MessageUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutCharacterInput | MessageCreateOrConnectWithoutCharacterInput[]
    createMany?: MessageCreateManyCharacterInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type CharacterFavoriteUncheckedCreateNestedManyWithoutCharacterInput = {
    create?: XOR<CharacterFavoriteCreateWithoutCharacterInput, CharacterFavoriteUncheckedCreateWithoutCharacterInput> | CharacterFavoriteCreateWithoutCharacterInput[] | CharacterFavoriteUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: CharacterFavoriteCreateOrConnectWithoutCharacterInput | CharacterFavoriteCreateOrConnectWithoutCharacterInput[]
    createMany?: CharacterFavoriteCreateManyCharacterInputEnvelope
    connect?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
  }

  export type CharacterRatingUncheckedCreateNestedManyWithoutCharacterInput = {
    create?: XOR<CharacterRatingCreateWithoutCharacterInput, CharacterRatingUncheckedCreateWithoutCharacterInput> | CharacterRatingCreateWithoutCharacterInput[] | CharacterRatingUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: CharacterRatingCreateOrConnectWithoutCharacterInput | CharacterRatingCreateOrConnectWithoutCharacterInput[]
    createMany?: CharacterRatingCreateManyCharacterInputEnvelope
    connect?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
  }

  export type ChatParticipantUncheckedCreateNestedManyWithoutCharacterInput = {
    create?: XOR<ChatParticipantCreateWithoutCharacterInput, ChatParticipantUncheckedCreateWithoutCharacterInput> | ChatParticipantCreateWithoutCharacterInput[] | ChatParticipantUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: ChatParticipantCreateOrConnectWithoutCharacterInput | ChatParticipantCreateOrConnectWithoutCharacterInput[]
    createMany?: ChatParticipantCreateManyCharacterInputEnvelope
    connect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutCharacterInput = {
    create?: XOR<ChatMessageCreateWithoutCharacterInput, ChatMessageUncheckedCreateWithoutCharacterInput> | ChatMessageCreateWithoutCharacterInput[] | ChatMessageUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutCharacterInput | ChatMessageCreateOrConnectWithoutCharacterInput[]
    createMany?: ChatMessageCreateManyCharacterInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutCharactersNestedInput = {
    create?: XOR<UserCreateWithoutCharactersInput, UserUncheckedCreateWithoutCharactersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCharactersInput
    upsert?: UserUpsertWithoutCharactersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCharactersInput, UserUpdateWithoutCharactersInput>, UserUncheckedUpdateWithoutCharactersInput>
  }

  export type ChatSessionUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<ChatSessionCreateWithoutCharacterInput, ChatSessionUncheckedCreateWithoutCharacterInput> | ChatSessionCreateWithoutCharacterInput[] | ChatSessionUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutCharacterInput | ChatSessionCreateOrConnectWithoutCharacterInput[]
    upsert?: ChatSessionUpsertWithWhereUniqueWithoutCharacterInput | ChatSessionUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: ChatSessionCreateManyCharacterInputEnvelope
    set?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    disconnect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    delete?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    update?: ChatSessionUpdateWithWhereUniqueWithoutCharacterInput | ChatSessionUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: ChatSessionUpdateManyWithWhereWithoutCharacterInput | ChatSessionUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<MessageCreateWithoutCharacterInput, MessageUncheckedCreateWithoutCharacterInput> | MessageCreateWithoutCharacterInput[] | MessageUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutCharacterInput | MessageCreateOrConnectWithoutCharacterInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutCharacterInput | MessageUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: MessageCreateManyCharacterInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutCharacterInput | MessageUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutCharacterInput | MessageUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type CharacterFavoriteUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<CharacterFavoriteCreateWithoutCharacterInput, CharacterFavoriteUncheckedCreateWithoutCharacterInput> | CharacterFavoriteCreateWithoutCharacterInput[] | CharacterFavoriteUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: CharacterFavoriteCreateOrConnectWithoutCharacterInput | CharacterFavoriteCreateOrConnectWithoutCharacterInput[]
    upsert?: CharacterFavoriteUpsertWithWhereUniqueWithoutCharacterInput | CharacterFavoriteUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: CharacterFavoriteCreateManyCharacterInputEnvelope
    set?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    disconnect?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    delete?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    connect?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    update?: CharacterFavoriteUpdateWithWhereUniqueWithoutCharacterInput | CharacterFavoriteUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: CharacterFavoriteUpdateManyWithWhereWithoutCharacterInput | CharacterFavoriteUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: CharacterFavoriteScalarWhereInput | CharacterFavoriteScalarWhereInput[]
  }

  export type CharacterRatingUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<CharacterRatingCreateWithoutCharacterInput, CharacterRatingUncheckedCreateWithoutCharacterInput> | CharacterRatingCreateWithoutCharacterInput[] | CharacterRatingUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: CharacterRatingCreateOrConnectWithoutCharacterInput | CharacterRatingCreateOrConnectWithoutCharacterInput[]
    upsert?: CharacterRatingUpsertWithWhereUniqueWithoutCharacterInput | CharacterRatingUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: CharacterRatingCreateManyCharacterInputEnvelope
    set?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    disconnect?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    delete?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    connect?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    update?: CharacterRatingUpdateWithWhereUniqueWithoutCharacterInput | CharacterRatingUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: CharacterRatingUpdateManyWithWhereWithoutCharacterInput | CharacterRatingUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: CharacterRatingScalarWhereInput | CharacterRatingScalarWhereInput[]
  }

  export type ChatParticipantUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<ChatParticipantCreateWithoutCharacterInput, ChatParticipantUncheckedCreateWithoutCharacterInput> | ChatParticipantCreateWithoutCharacterInput[] | ChatParticipantUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: ChatParticipantCreateOrConnectWithoutCharacterInput | ChatParticipantCreateOrConnectWithoutCharacterInput[]
    upsert?: ChatParticipantUpsertWithWhereUniqueWithoutCharacterInput | ChatParticipantUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: ChatParticipantCreateManyCharacterInputEnvelope
    set?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    disconnect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    delete?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    connect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    update?: ChatParticipantUpdateWithWhereUniqueWithoutCharacterInput | ChatParticipantUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: ChatParticipantUpdateManyWithWhereWithoutCharacterInput | ChatParticipantUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: ChatParticipantScalarWhereInput | ChatParticipantScalarWhereInput[]
  }

  export type ChatMessageUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<ChatMessageCreateWithoutCharacterInput, ChatMessageUncheckedCreateWithoutCharacterInput> | ChatMessageCreateWithoutCharacterInput[] | ChatMessageUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutCharacterInput | ChatMessageCreateOrConnectWithoutCharacterInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutCharacterInput | ChatMessageUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: ChatMessageCreateManyCharacterInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutCharacterInput | ChatMessageUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutCharacterInput | ChatMessageUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ChatSessionUncheckedUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<ChatSessionCreateWithoutCharacterInput, ChatSessionUncheckedCreateWithoutCharacterInput> | ChatSessionCreateWithoutCharacterInput[] | ChatSessionUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutCharacterInput | ChatSessionCreateOrConnectWithoutCharacterInput[]
    upsert?: ChatSessionUpsertWithWhereUniqueWithoutCharacterInput | ChatSessionUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: ChatSessionCreateManyCharacterInputEnvelope
    set?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    disconnect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    delete?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    update?: ChatSessionUpdateWithWhereUniqueWithoutCharacterInput | ChatSessionUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: ChatSessionUpdateManyWithWhereWithoutCharacterInput | ChatSessionUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<MessageCreateWithoutCharacterInput, MessageUncheckedCreateWithoutCharacterInput> | MessageCreateWithoutCharacterInput[] | MessageUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutCharacterInput | MessageCreateOrConnectWithoutCharacterInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutCharacterInput | MessageUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: MessageCreateManyCharacterInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutCharacterInput | MessageUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutCharacterInput | MessageUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type CharacterFavoriteUncheckedUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<CharacterFavoriteCreateWithoutCharacterInput, CharacterFavoriteUncheckedCreateWithoutCharacterInput> | CharacterFavoriteCreateWithoutCharacterInput[] | CharacterFavoriteUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: CharacterFavoriteCreateOrConnectWithoutCharacterInput | CharacterFavoriteCreateOrConnectWithoutCharacterInput[]
    upsert?: CharacterFavoriteUpsertWithWhereUniqueWithoutCharacterInput | CharacterFavoriteUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: CharacterFavoriteCreateManyCharacterInputEnvelope
    set?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    disconnect?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    delete?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    connect?: CharacterFavoriteWhereUniqueInput | CharacterFavoriteWhereUniqueInput[]
    update?: CharacterFavoriteUpdateWithWhereUniqueWithoutCharacterInput | CharacterFavoriteUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: CharacterFavoriteUpdateManyWithWhereWithoutCharacterInput | CharacterFavoriteUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: CharacterFavoriteScalarWhereInput | CharacterFavoriteScalarWhereInput[]
  }

  export type CharacterRatingUncheckedUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<CharacterRatingCreateWithoutCharacterInput, CharacterRatingUncheckedCreateWithoutCharacterInput> | CharacterRatingCreateWithoutCharacterInput[] | CharacterRatingUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: CharacterRatingCreateOrConnectWithoutCharacterInput | CharacterRatingCreateOrConnectWithoutCharacterInput[]
    upsert?: CharacterRatingUpsertWithWhereUniqueWithoutCharacterInput | CharacterRatingUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: CharacterRatingCreateManyCharacterInputEnvelope
    set?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    disconnect?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    delete?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    connect?: CharacterRatingWhereUniqueInput | CharacterRatingWhereUniqueInput[]
    update?: CharacterRatingUpdateWithWhereUniqueWithoutCharacterInput | CharacterRatingUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: CharacterRatingUpdateManyWithWhereWithoutCharacterInput | CharacterRatingUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: CharacterRatingScalarWhereInput | CharacterRatingScalarWhereInput[]
  }

  export type ChatParticipantUncheckedUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<ChatParticipantCreateWithoutCharacterInput, ChatParticipantUncheckedCreateWithoutCharacterInput> | ChatParticipantCreateWithoutCharacterInput[] | ChatParticipantUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: ChatParticipantCreateOrConnectWithoutCharacterInput | ChatParticipantCreateOrConnectWithoutCharacterInput[]
    upsert?: ChatParticipantUpsertWithWhereUniqueWithoutCharacterInput | ChatParticipantUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: ChatParticipantCreateManyCharacterInputEnvelope
    set?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    disconnect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    delete?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    connect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    update?: ChatParticipantUpdateWithWhereUniqueWithoutCharacterInput | ChatParticipantUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: ChatParticipantUpdateManyWithWhereWithoutCharacterInput | ChatParticipantUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: ChatParticipantScalarWhereInput | ChatParticipantScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<ChatMessageCreateWithoutCharacterInput, ChatMessageUncheckedCreateWithoutCharacterInput> | ChatMessageCreateWithoutCharacterInput[] | ChatMessageUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutCharacterInput | ChatMessageCreateOrConnectWithoutCharacterInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutCharacterInput | ChatMessageUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: ChatMessageCreateManyCharacterInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutCharacterInput | ChatMessageUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutCharacterInput | ChatMessageUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutChatSessionsInput = {
    create?: XOR<UserCreateWithoutChatSessionsInput, UserUncheckedCreateWithoutChatSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type CharacterCreateNestedOneWithoutChatSessionsInput = {
    create?: XOR<CharacterCreateWithoutChatSessionsInput, CharacterUncheckedCreateWithoutChatSessionsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutChatSessionsInput
    connect?: CharacterWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutSessionInput = {
    create?: XOR<MessageCreateWithoutSessionInput, MessageUncheckedCreateWithoutSessionInput> | MessageCreateWithoutSessionInput[] | MessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSessionInput | MessageCreateOrConnectWithoutSessionInput[]
    createMany?: MessageCreateManySessionInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<MessageCreateWithoutSessionInput, MessageUncheckedCreateWithoutSessionInput> | MessageCreateWithoutSessionInput[] | MessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSessionInput | MessageCreateOrConnectWithoutSessionInput[]
    createMany?: MessageCreateManySessionInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutChatSessionsNestedInput = {
    create?: XOR<UserCreateWithoutChatSessionsInput, UserUncheckedCreateWithoutChatSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatSessionsInput
    upsert?: UserUpsertWithoutChatSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChatSessionsInput, UserUpdateWithoutChatSessionsInput>, UserUncheckedUpdateWithoutChatSessionsInput>
  }

  export type CharacterUpdateOneRequiredWithoutChatSessionsNestedInput = {
    create?: XOR<CharacterCreateWithoutChatSessionsInput, CharacterUncheckedCreateWithoutChatSessionsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutChatSessionsInput
    upsert?: CharacterUpsertWithoutChatSessionsInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutChatSessionsInput, CharacterUpdateWithoutChatSessionsInput>, CharacterUncheckedUpdateWithoutChatSessionsInput>
  }

  export type MessageUpdateManyWithoutSessionNestedInput = {
    create?: XOR<MessageCreateWithoutSessionInput, MessageUncheckedCreateWithoutSessionInput> | MessageCreateWithoutSessionInput[] | MessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSessionInput | MessageCreateOrConnectWithoutSessionInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSessionInput | MessageUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: MessageCreateManySessionInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSessionInput | MessageUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSessionInput | MessageUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<MessageCreateWithoutSessionInput, MessageUncheckedCreateWithoutSessionInput> | MessageCreateWithoutSessionInput[] | MessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSessionInput | MessageCreateOrConnectWithoutSessionInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSessionInput | MessageUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: MessageCreateManySessionInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSessionInput | MessageUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSessionInput | MessageUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOwnedChatRoomsInput = {
    create?: XOR<UserCreateWithoutOwnedChatRoomsInput, UserUncheckedCreateWithoutOwnedChatRoomsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedChatRoomsInput
    connect?: UserWhereUniqueInput
  }

  export type ChatParticipantCreateNestedManyWithoutRoomInput = {
    create?: XOR<ChatParticipantCreateWithoutRoomInput, ChatParticipantUncheckedCreateWithoutRoomInput> | ChatParticipantCreateWithoutRoomInput[] | ChatParticipantUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: ChatParticipantCreateOrConnectWithoutRoomInput | ChatParticipantCreateOrConnectWithoutRoomInput[]
    createMany?: ChatParticipantCreateManyRoomInputEnvelope
    connect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
  }

  export type ChatMessageCreateNestedManyWithoutRoomInput = {
    create?: XOR<ChatMessageCreateWithoutRoomInput, ChatMessageUncheckedCreateWithoutRoomInput> | ChatMessageCreateWithoutRoomInput[] | ChatMessageUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutRoomInput | ChatMessageCreateOrConnectWithoutRoomInput[]
    createMany?: ChatMessageCreateManyRoomInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ChatParticipantUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<ChatParticipantCreateWithoutRoomInput, ChatParticipantUncheckedCreateWithoutRoomInput> | ChatParticipantCreateWithoutRoomInput[] | ChatParticipantUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: ChatParticipantCreateOrConnectWithoutRoomInput | ChatParticipantCreateOrConnectWithoutRoomInput[]
    createMany?: ChatParticipantCreateManyRoomInputEnvelope
    connect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<ChatMessageCreateWithoutRoomInput, ChatMessageUncheckedCreateWithoutRoomInput> | ChatMessageCreateWithoutRoomInput[] | ChatMessageUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutRoomInput | ChatMessageCreateOrConnectWithoutRoomInput[]
    createMany?: ChatMessageCreateManyRoomInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutOwnedChatRoomsNestedInput = {
    create?: XOR<UserCreateWithoutOwnedChatRoomsInput, UserUncheckedCreateWithoutOwnedChatRoomsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedChatRoomsInput
    upsert?: UserUpsertWithoutOwnedChatRoomsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedChatRoomsInput, UserUpdateWithoutOwnedChatRoomsInput>, UserUncheckedUpdateWithoutOwnedChatRoomsInput>
  }

  export type ChatParticipantUpdateManyWithoutRoomNestedInput = {
    create?: XOR<ChatParticipantCreateWithoutRoomInput, ChatParticipantUncheckedCreateWithoutRoomInput> | ChatParticipantCreateWithoutRoomInput[] | ChatParticipantUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: ChatParticipantCreateOrConnectWithoutRoomInput | ChatParticipantCreateOrConnectWithoutRoomInput[]
    upsert?: ChatParticipantUpsertWithWhereUniqueWithoutRoomInput | ChatParticipantUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: ChatParticipantCreateManyRoomInputEnvelope
    set?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    disconnect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    delete?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    connect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    update?: ChatParticipantUpdateWithWhereUniqueWithoutRoomInput | ChatParticipantUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: ChatParticipantUpdateManyWithWhereWithoutRoomInput | ChatParticipantUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: ChatParticipantScalarWhereInput | ChatParticipantScalarWhereInput[]
  }

  export type ChatMessageUpdateManyWithoutRoomNestedInput = {
    create?: XOR<ChatMessageCreateWithoutRoomInput, ChatMessageUncheckedCreateWithoutRoomInput> | ChatMessageCreateWithoutRoomInput[] | ChatMessageUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutRoomInput | ChatMessageCreateOrConnectWithoutRoomInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutRoomInput | ChatMessageUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: ChatMessageCreateManyRoomInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutRoomInput | ChatMessageUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutRoomInput | ChatMessageUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ChatParticipantUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<ChatParticipantCreateWithoutRoomInput, ChatParticipantUncheckedCreateWithoutRoomInput> | ChatParticipantCreateWithoutRoomInput[] | ChatParticipantUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: ChatParticipantCreateOrConnectWithoutRoomInput | ChatParticipantCreateOrConnectWithoutRoomInput[]
    upsert?: ChatParticipantUpsertWithWhereUniqueWithoutRoomInput | ChatParticipantUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: ChatParticipantCreateManyRoomInputEnvelope
    set?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    disconnect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    delete?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    connect?: ChatParticipantWhereUniqueInput | ChatParticipantWhereUniqueInput[]
    update?: ChatParticipantUpdateWithWhereUniqueWithoutRoomInput | ChatParticipantUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: ChatParticipantUpdateManyWithWhereWithoutRoomInput | ChatParticipantUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: ChatParticipantScalarWhereInput | ChatParticipantScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<ChatMessageCreateWithoutRoomInput, ChatMessageUncheckedCreateWithoutRoomInput> | ChatMessageCreateWithoutRoomInput[] | ChatMessageUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutRoomInput | ChatMessageCreateOrConnectWithoutRoomInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutRoomInput | ChatMessageUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: ChatMessageCreateManyRoomInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutRoomInput | ChatMessageUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutRoomInput | ChatMessageUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ChatRoomCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<ChatRoomCreateWithoutParticipantsInput, ChatRoomUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutParticipantsInput
    connect?: ChatRoomWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChatParticipantsInput = {
    create?: XOR<UserCreateWithoutChatParticipantsInput, UserUncheckedCreateWithoutChatParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatParticipantsInput
    connect?: UserWhereUniqueInput
  }

  export type CharacterCreateNestedOneWithoutChatParticipantsInput = {
    create?: XOR<CharacterCreateWithoutChatParticipantsInput, CharacterUncheckedCreateWithoutChatParticipantsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutChatParticipantsInput
    connect?: CharacterWhereUniqueInput
  }

  export type ChatRoomUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<ChatRoomCreateWithoutParticipantsInput, ChatRoomUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutParticipantsInput
    upsert?: ChatRoomUpsertWithoutParticipantsInput
    connect?: ChatRoomWhereUniqueInput
    update?: XOR<XOR<ChatRoomUpdateToOneWithWhereWithoutParticipantsInput, ChatRoomUpdateWithoutParticipantsInput>, ChatRoomUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserUpdateOneWithoutChatParticipantsNestedInput = {
    create?: XOR<UserCreateWithoutChatParticipantsInput, UserUncheckedCreateWithoutChatParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatParticipantsInput
    upsert?: UserUpsertWithoutChatParticipantsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChatParticipantsInput, UserUpdateWithoutChatParticipantsInput>, UserUncheckedUpdateWithoutChatParticipantsInput>
  }

  export type CharacterUpdateOneWithoutChatParticipantsNestedInput = {
    create?: XOR<CharacterCreateWithoutChatParticipantsInput, CharacterUncheckedCreateWithoutChatParticipantsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutChatParticipantsInput
    upsert?: CharacterUpsertWithoutChatParticipantsInput
    disconnect?: CharacterWhereInput | boolean
    delete?: CharacterWhereInput | boolean
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutChatParticipantsInput, CharacterUpdateWithoutChatParticipantsInput>, CharacterUncheckedUpdateWithoutChatParticipantsInput>
  }

  export type ChatRoomCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutMessagesInput
    connect?: ChatRoomWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChatMessagesInput = {
    create?: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type CharacterCreateNestedOneWithoutChatMessagesInput = {
    create?: XOR<CharacterCreateWithoutChatMessagesInput, CharacterUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutChatMessagesInput
    connect?: CharacterWhereUniqueInput
  }

  export type ChatMessageCreateNestedOneWithoutRepliesInput = {
    create?: XOR<ChatMessageCreateWithoutRepliesInput, ChatMessageUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: ChatMessageCreateOrConnectWithoutRepliesInput
    connect?: ChatMessageWhereUniqueInput
  }

  export type ChatMessageCreateNestedManyWithoutReplyToInput = {
    create?: XOR<ChatMessageCreateWithoutReplyToInput, ChatMessageUncheckedCreateWithoutReplyToInput> | ChatMessageCreateWithoutReplyToInput[] | ChatMessageUncheckedCreateWithoutReplyToInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutReplyToInput | ChatMessageCreateOrConnectWithoutReplyToInput[]
    createMany?: ChatMessageCreateManyReplyToInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutReplyToInput = {
    create?: XOR<ChatMessageCreateWithoutReplyToInput, ChatMessageUncheckedCreateWithoutReplyToInput> | ChatMessageCreateWithoutReplyToInput[] | ChatMessageUncheckedCreateWithoutReplyToInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutReplyToInput | ChatMessageCreateOrConnectWithoutReplyToInput[]
    createMany?: ChatMessageCreateManyReplyToInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ChatRoomUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutMessagesInput
    upsert?: ChatRoomUpsertWithoutMessagesInput
    connect?: ChatRoomWhereUniqueInput
    update?: XOR<XOR<ChatRoomUpdateToOneWithWhereWithoutMessagesInput, ChatRoomUpdateWithoutMessagesInput>, ChatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneWithoutChatMessagesNestedInput = {
    create?: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatMessagesInput
    upsert?: UserUpsertWithoutChatMessagesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChatMessagesInput, UserUpdateWithoutChatMessagesInput>, UserUncheckedUpdateWithoutChatMessagesInput>
  }

  export type CharacterUpdateOneWithoutChatMessagesNestedInput = {
    create?: XOR<CharacterCreateWithoutChatMessagesInput, CharacterUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutChatMessagesInput
    upsert?: CharacterUpsertWithoutChatMessagesInput
    disconnect?: CharacterWhereInput | boolean
    delete?: CharacterWhereInput | boolean
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutChatMessagesInput, CharacterUpdateWithoutChatMessagesInput>, CharacterUncheckedUpdateWithoutChatMessagesInput>
  }

  export type ChatMessageUpdateOneWithoutRepliesNestedInput = {
    create?: XOR<ChatMessageCreateWithoutRepliesInput, ChatMessageUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: ChatMessageCreateOrConnectWithoutRepliesInput
    upsert?: ChatMessageUpsertWithoutRepliesInput
    disconnect?: ChatMessageWhereInput | boolean
    delete?: ChatMessageWhereInput | boolean
    connect?: ChatMessageWhereUniqueInput
    update?: XOR<XOR<ChatMessageUpdateToOneWithWhereWithoutRepliesInput, ChatMessageUpdateWithoutRepliesInput>, ChatMessageUncheckedUpdateWithoutRepliesInput>
  }

  export type ChatMessageUpdateManyWithoutReplyToNestedInput = {
    create?: XOR<ChatMessageCreateWithoutReplyToInput, ChatMessageUncheckedCreateWithoutReplyToInput> | ChatMessageCreateWithoutReplyToInput[] | ChatMessageUncheckedCreateWithoutReplyToInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutReplyToInput | ChatMessageCreateOrConnectWithoutReplyToInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutReplyToInput | ChatMessageUpsertWithWhereUniqueWithoutReplyToInput[]
    createMany?: ChatMessageCreateManyReplyToInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutReplyToInput | ChatMessageUpdateWithWhereUniqueWithoutReplyToInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutReplyToInput | ChatMessageUpdateManyWithWhereWithoutReplyToInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutReplyToNestedInput = {
    create?: XOR<ChatMessageCreateWithoutReplyToInput, ChatMessageUncheckedCreateWithoutReplyToInput> | ChatMessageCreateWithoutReplyToInput[] | ChatMessageUncheckedCreateWithoutReplyToInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutReplyToInput | ChatMessageCreateOrConnectWithoutReplyToInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutReplyToInput | ChatMessageUpsertWithWhereUniqueWithoutReplyToInput[]
    createMany?: ChatMessageCreateManyReplyToInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutReplyToInput | ChatMessageUpdateWithWhereUniqueWithoutReplyToInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutReplyToInput | ChatMessageUpdateManyWithWhereWithoutReplyToInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    upsert?: UserUpsertWithoutTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsInput, UserUpdateWithoutTransactionsInput>, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type ChatSessionCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatSessionCreateOrConnectWithoutMessagesInput
    connect?: ChatSessionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type CharacterCreateNestedOneWithoutMessagesInput = {
    create?: XOR<CharacterCreateWithoutMessagesInput, CharacterUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutMessagesInput
    connect?: CharacterWhereUniqueInput
  }

  export type ChatSessionUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatSessionCreateOrConnectWithoutMessagesInput
    upsert?: ChatSessionUpsertWithoutMessagesInput
    connect?: ChatSessionWhereUniqueInput
    update?: XOR<XOR<ChatSessionUpdateToOneWithWhereWithoutMessagesInput, ChatSessionUpdateWithoutMessagesInput>, ChatSessionUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneWithoutMessagesNestedInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    upsert?: UserUpsertWithoutMessagesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesInput, UserUpdateWithoutMessagesInput>, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type CharacterUpdateOneWithoutMessagesNestedInput = {
    create?: XOR<CharacterCreateWithoutMessagesInput, CharacterUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutMessagesInput
    upsert?: CharacterUpsertWithoutMessagesInput
    disconnect?: CharacterWhereInput | boolean
    delete?: CharacterWhereInput | boolean
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutMessagesInput, CharacterUpdateWithoutMessagesInput>, CharacterUncheckedUpdateWithoutMessagesInput>
  }

  export type UserCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    connect?: UserWhereUniqueInput
  }

  export type CharacterCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<CharacterCreateWithoutFavoritesInput, CharacterUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutFavoritesInput
    connect?: CharacterWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFavoritesNestedInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    upsert?: UserUpsertWithoutFavoritesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoritesInput, UserUpdateWithoutFavoritesInput>, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type CharacterUpdateOneRequiredWithoutFavoritesNestedInput = {
    create?: XOR<CharacterCreateWithoutFavoritesInput, CharacterUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutFavoritesInput
    upsert?: CharacterUpsertWithoutFavoritesInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutFavoritesInput, CharacterUpdateWithoutFavoritesInput>, CharacterUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserCreateNestedOneWithoutRatingsInput = {
    create?: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingsInput
    connect?: UserWhereUniqueInput
  }

  export type CharacterCreateNestedOneWithoutRatingsInput = {
    create?: XOR<CharacterCreateWithoutRatingsInput, CharacterUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutRatingsInput
    connect?: CharacterWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRatingsNestedInput = {
    create?: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingsInput
    upsert?: UserUpsertWithoutRatingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRatingsInput, UserUpdateWithoutRatingsInput>, UserUncheckedUpdateWithoutRatingsInput>
  }

  export type CharacterUpdateOneRequiredWithoutRatingsNestedInput = {
    create?: XOR<CharacterCreateWithoutRatingsInput, CharacterUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutRatingsInput
    upsert?: CharacterUpsertWithoutRatingsInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutRatingsInput, CharacterUpdateWithoutRatingsInput>, CharacterUncheckedUpdateWithoutRatingsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutWorkflowsInput = {
    create?: XOR<UserCreateWithoutWorkflowsInput, UserUncheckedCreateWithoutWorkflowsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkflowsInput
    connect?: UserWhereUniqueInput
  }

  export type WorkflowInstanceCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<WorkflowInstanceCreateWithoutWorkflowInput, WorkflowInstanceUncheckedCreateWithoutWorkflowInput> | WorkflowInstanceCreateWithoutWorkflowInput[] | WorkflowInstanceUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowInstanceCreateOrConnectWithoutWorkflowInput | WorkflowInstanceCreateOrConnectWithoutWorkflowInput[]
    createMany?: WorkflowInstanceCreateManyWorkflowInputEnvelope
    connect?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
  }

  export type WorkflowTemplateCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<WorkflowTemplateCreateWithoutWorkflowInput, WorkflowTemplateUncheckedCreateWithoutWorkflowInput> | WorkflowTemplateCreateWithoutWorkflowInput[] | WorkflowTemplateUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutWorkflowInput | WorkflowTemplateCreateOrConnectWithoutWorkflowInput[]
    createMany?: WorkflowTemplateCreateManyWorkflowInputEnvelope
    connect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
  }

  export type WorkflowRatingCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<WorkflowRatingCreateWithoutWorkflowInput, WorkflowRatingUncheckedCreateWithoutWorkflowInput> | WorkflowRatingCreateWithoutWorkflowInput[] | WorkflowRatingUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowRatingCreateOrConnectWithoutWorkflowInput | WorkflowRatingCreateOrConnectWithoutWorkflowInput[]
    createMany?: WorkflowRatingCreateManyWorkflowInputEnvelope
    connect?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
  }

  export type ScheduledTaskCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<ScheduledTaskCreateWithoutWorkflowInput, ScheduledTaskUncheckedCreateWithoutWorkflowInput> | ScheduledTaskCreateWithoutWorkflowInput[] | ScheduledTaskUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: ScheduledTaskCreateOrConnectWithoutWorkflowInput | ScheduledTaskCreateOrConnectWithoutWorkflowInput[]
    createMany?: ScheduledTaskCreateManyWorkflowInputEnvelope
    connect?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
  }

  export type WorkflowInstanceUncheckedCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<WorkflowInstanceCreateWithoutWorkflowInput, WorkflowInstanceUncheckedCreateWithoutWorkflowInput> | WorkflowInstanceCreateWithoutWorkflowInput[] | WorkflowInstanceUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowInstanceCreateOrConnectWithoutWorkflowInput | WorkflowInstanceCreateOrConnectWithoutWorkflowInput[]
    createMany?: WorkflowInstanceCreateManyWorkflowInputEnvelope
    connect?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
  }

  export type WorkflowTemplateUncheckedCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<WorkflowTemplateCreateWithoutWorkflowInput, WorkflowTemplateUncheckedCreateWithoutWorkflowInput> | WorkflowTemplateCreateWithoutWorkflowInput[] | WorkflowTemplateUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutWorkflowInput | WorkflowTemplateCreateOrConnectWithoutWorkflowInput[]
    createMany?: WorkflowTemplateCreateManyWorkflowInputEnvelope
    connect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
  }

  export type WorkflowRatingUncheckedCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<WorkflowRatingCreateWithoutWorkflowInput, WorkflowRatingUncheckedCreateWithoutWorkflowInput> | WorkflowRatingCreateWithoutWorkflowInput[] | WorkflowRatingUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowRatingCreateOrConnectWithoutWorkflowInput | WorkflowRatingCreateOrConnectWithoutWorkflowInput[]
    createMany?: WorkflowRatingCreateManyWorkflowInputEnvelope
    connect?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
  }

  export type ScheduledTaskUncheckedCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<ScheduledTaskCreateWithoutWorkflowInput, ScheduledTaskUncheckedCreateWithoutWorkflowInput> | ScheduledTaskCreateWithoutWorkflowInput[] | ScheduledTaskUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: ScheduledTaskCreateOrConnectWithoutWorkflowInput | ScheduledTaskCreateOrConnectWithoutWorkflowInput[]
    createMany?: ScheduledTaskCreateManyWorkflowInputEnvelope
    connect?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutWorkflowsNestedInput = {
    create?: XOR<UserCreateWithoutWorkflowsInput, UserUncheckedCreateWithoutWorkflowsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkflowsInput
    upsert?: UserUpsertWithoutWorkflowsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkflowsInput, UserUpdateWithoutWorkflowsInput>, UserUncheckedUpdateWithoutWorkflowsInput>
  }

  export type WorkflowInstanceUpdateManyWithoutWorkflowNestedInput = {
    create?: XOR<WorkflowInstanceCreateWithoutWorkflowInput, WorkflowInstanceUncheckedCreateWithoutWorkflowInput> | WorkflowInstanceCreateWithoutWorkflowInput[] | WorkflowInstanceUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowInstanceCreateOrConnectWithoutWorkflowInput | WorkflowInstanceCreateOrConnectWithoutWorkflowInput[]
    upsert?: WorkflowInstanceUpsertWithWhereUniqueWithoutWorkflowInput | WorkflowInstanceUpsertWithWhereUniqueWithoutWorkflowInput[]
    createMany?: WorkflowInstanceCreateManyWorkflowInputEnvelope
    set?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    disconnect?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    delete?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    connect?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    update?: WorkflowInstanceUpdateWithWhereUniqueWithoutWorkflowInput | WorkflowInstanceUpdateWithWhereUniqueWithoutWorkflowInput[]
    updateMany?: WorkflowInstanceUpdateManyWithWhereWithoutWorkflowInput | WorkflowInstanceUpdateManyWithWhereWithoutWorkflowInput[]
    deleteMany?: WorkflowInstanceScalarWhereInput | WorkflowInstanceScalarWhereInput[]
  }

  export type WorkflowTemplateUpdateManyWithoutWorkflowNestedInput = {
    create?: XOR<WorkflowTemplateCreateWithoutWorkflowInput, WorkflowTemplateUncheckedCreateWithoutWorkflowInput> | WorkflowTemplateCreateWithoutWorkflowInput[] | WorkflowTemplateUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutWorkflowInput | WorkflowTemplateCreateOrConnectWithoutWorkflowInput[]
    upsert?: WorkflowTemplateUpsertWithWhereUniqueWithoutWorkflowInput | WorkflowTemplateUpsertWithWhereUniqueWithoutWorkflowInput[]
    createMany?: WorkflowTemplateCreateManyWorkflowInputEnvelope
    set?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    disconnect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    delete?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    connect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    update?: WorkflowTemplateUpdateWithWhereUniqueWithoutWorkflowInput | WorkflowTemplateUpdateWithWhereUniqueWithoutWorkflowInput[]
    updateMany?: WorkflowTemplateUpdateManyWithWhereWithoutWorkflowInput | WorkflowTemplateUpdateManyWithWhereWithoutWorkflowInput[]
    deleteMany?: WorkflowTemplateScalarWhereInput | WorkflowTemplateScalarWhereInput[]
  }

  export type WorkflowRatingUpdateManyWithoutWorkflowNestedInput = {
    create?: XOR<WorkflowRatingCreateWithoutWorkflowInput, WorkflowRatingUncheckedCreateWithoutWorkflowInput> | WorkflowRatingCreateWithoutWorkflowInput[] | WorkflowRatingUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowRatingCreateOrConnectWithoutWorkflowInput | WorkflowRatingCreateOrConnectWithoutWorkflowInput[]
    upsert?: WorkflowRatingUpsertWithWhereUniqueWithoutWorkflowInput | WorkflowRatingUpsertWithWhereUniqueWithoutWorkflowInput[]
    createMany?: WorkflowRatingCreateManyWorkflowInputEnvelope
    set?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    disconnect?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    delete?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    connect?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    update?: WorkflowRatingUpdateWithWhereUniqueWithoutWorkflowInput | WorkflowRatingUpdateWithWhereUniqueWithoutWorkflowInput[]
    updateMany?: WorkflowRatingUpdateManyWithWhereWithoutWorkflowInput | WorkflowRatingUpdateManyWithWhereWithoutWorkflowInput[]
    deleteMany?: WorkflowRatingScalarWhereInput | WorkflowRatingScalarWhereInput[]
  }

  export type ScheduledTaskUpdateManyWithoutWorkflowNestedInput = {
    create?: XOR<ScheduledTaskCreateWithoutWorkflowInput, ScheduledTaskUncheckedCreateWithoutWorkflowInput> | ScheduledTaskCreateWithoutWorkflowInput[] | ScheduledTaskUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: ScheduledTaskCreateOrConnectWithoutWorkflowInput | ScheduledTaskCreateOrConnectWithoutWorkflowInput[]
    upsert?: ScheduledTaskUpsertWithWhereUniqueWithoutWorkflowInput | ScheduledTaskUpsertWithWhereUniqueWithoutWorkflowInput[]
    createMany?: ScheduledTaskCreateManyWorkflowInputEnvelope
    set?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    disconnect?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    delete?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    connect?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    update?: ScheduledTaskUpdateWithWhereUniqueWithoutWorkflowInput | ScheduledTaskUpdateWithWhereUniqueWithoutWorkflowInput[]
    updateMany?: ScheduledTaskUpdateManyWithWhereWithoutWorkflowInput | ScheduledTaskUpdateManyWithWhereWithoutWorkflowInput[]
    deleteMany?: ScheduledTaskScalarWhereInput | ScheduledTaskScalarWhereInput[]
  }

  export type WorkflowInstanceUncheckedUpdateManyWithoutWorkflowNestedInput = {
    create?: XOR<WorkflowInstanceCreateWithoutWorkflowInput, WorkflowInstanceUncheckedCreateWithoutWorkflowInput> | WorkflowInstanceCreateWithoutWorkflowInput[] | WorkflowInstanceUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowInstanceCreateOrConnectWithoutWorkflowInput | WorkflowInstanceCreateOrConnectWithoutWorkflowInput[]
    upsert?: WorkflowInstanceUpsertWithWhereUniqueWithoutWorkflowInput | WorkflowInstanceUpsertWithWhereUniqueWithoutWorkflowInput[]
    createMany?: WorkflowInstanceCreateManyWorkflowInputEnvelope
    set?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    disconnect?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    delete?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    connect?: WorkflowInstanceWhereUniqueInput | WorkflowInstanceWhereUniqueInput[]
    update?: WorkflowInstanceUpdateWithWhereUniqueWithoutWorkflowInput | WorkflowInstanceUpdateWithWhereUniqueWithoutWorkflowInput[]
    updateMany?: WorkflowInstanceUpdateManyWithWhereWithoutWorkflowInput | WorkflowInstanceUpdateManyWithWhereWithoutWorkflowInput[]
    deleteMany?: WorkflowInstanceScalarWhereInput | WorkflowInstanceScalarWhereInput[]
  }

  export type WorkflowTemplateUncheckedUpdateManyWithoutWorkflowNestedInput = {
    create?: XOR<WorkflowTemplateCreateWithoutWorkflowInput, WorkflowTemplateUncheckedCreateWithoutWorkflowInput> | WorkflowTemplateCreateWithoutWorkflowInput[] | WorkflowTemplateUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutWorkflowInput | WorkflowTemplateCreateOrConnectWithoutWorkflowInput[]
    upsert?: WorkflowTemplateUpsertWithWhereUniqueWithoutWorkflowInput | WorkflowTemplateUpsertWithWhereUniqueWithoutWorkflowInput[]
    createMany?: WorkflowTemplateCreateManyWorkflowInputEnvelope
    set?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    disconnect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    delete?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    connect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    update?: WorkflowTemplateUpdateWithWhereUniqueWithoutWorkflowInput | WorkflowTemplateUpdateWithWhereUniqueWithoutWorkflowInput[]
    updateMany?: WorkflowTemplateUpdateManyWithWhereWithoutWorkflowInput | WorkflowTemplateUpdateManyWithWhereWithoutWorkflowInput[]
    deleteMany?: WorkflowTemplateScalarWhereInput | WorkflowTemplateScalarWhereInput[]
  }

  export type WorkflowRatingUncheckedUpdateManyWithoutWorkflowNestedInput = {
    create?: XOR<WorkflowRatingCreateWithoutWorkflowInput, WorkflowRatingUncheckedCreateWithoutWorkflowInput> | WorkflowRatingCreateWithoutWorkflowInput[] | WorkflowRatingUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowRatingCreateOrConnectWithoutWorkflowInput | WorkflowRatingCreateOrConnectWithoutWorkflowInput[]
    upsert?: WorkflowRatingUpsertWithWhereUniqueWithoutWorkflowInput | WorkflowRatingUpsertWithWhereUniqueWithoutWorkflowInput[]
    createMany?: WorkflowRatingCreateManyWorkflowInputEnvelope
    set?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    disconnect?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    delete?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    connect?: WorkflowRatingWhereUniqueInput | WorkflowRatingWhereUniqueInput[]
    update?: WorkflowRatingUpdateWithWhereUniqueWithoutWorkflowInput | WorkflowRatingUpdateWithWhereUniqueWithoutWorkflowInput[]
    updateMany?: WorkflowRatingUpdateManyWithWhereWithoutWorkflowInput | WorkflowRatingUpdateManyWithWhereWithoutWorkflowInput[]
    deleteMany?: WorkflowRatingScalarWhereInput | WorkflowRatingScalarWhereInput[]
  }

  export type ScheduledTaskUncheckedUpdateManyWithoutWorkflowNestedInput = {
    create?: XOR<ScheduledTaskCreateWithoutWorkflowInput, ScheduledTaskUncheckedCreateWithoutWorkflowInput> | ScheduledTaskCreateWithoutWorkflowInput[] | ScheduledTaskUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: ScheduledTaskCreateOrConnectWithoutWorkflowInput | ScheduledTaskCreateOrConnectWithoutWorkflowInput[]
    upsert?: ScheduledTaskUpsertWithWhereUniqueWithoutWorkflowInput | ScheduledTaskUpsertWithWhereUniqueWithoutWorkflowInput[]
    createMany?: ScheduledTaskCreateManyWorkflowInputEnvelope
    set?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    disconnect?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    delete?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    connect?: ScheduledTaskWhereUniqueInput | ScheduledTaskWhereUniqueInput[]
    update?: ScheduledTaskUpdateWithWhereUniqueWithoutWorkflowInput | ScheduledTaskUpdateWithWhereUniqueWithoutWorkflowInput[]
    updateMany?: ScheduledTaskUpdateManyWithWhereWithoutWorkflowInput | ScheduledTaskUpdateManyWithWhereWithoutWorkflowInput[]
    deleteMany?: ScheduledTaskScalarWhereInput | ScheduledTaskScalarWhereInput[]
  }

  export type WorkflowCreateNestedOneWithoutInstancesInput = {
    create?: XOR<WorkflowCreateWithoutInstancesInput, WorkflowUncheckedCreateWithoutInstancesInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutInstancesInput
    connect?: WorkflowWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWorkflowInstancesInput = {
    create?: XOR<UserCreateWithoutWorkflowInstancesInput, UserUncheckedCreateWithoutWorkflowInstancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkflowInstancesInput
    connect?: UserWhereUniqueInput
  }

  export type StepExecutionCreateNestedManyWithoutInstanceInput = {
    create?: XOR<StepExecutionCreateWithoutInstanceInput, StepExecutionUncheckedCreateWithoutInstanceInput> | StepExecutionCreateWithoutInstanceInput[] | StepExecutionUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: StepExecutionCreateOrConnectWithoutInstanceInput | StepExecutionCreateOrConnectWithoutInstanceInput[]
    createMany?: StepExecutionCreateManyInstanceInputEnvelope
    connect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
  }

  export type WorkflowLogCreateNestedManyWithoutInstanceInput = {
    create?: XOR<WorkflowLogCreateWithoutInstanceInput, WorkflowLogUncheckedCreateWithoutInstanceInput> | WorkflowLogCreateWithoutInstanceInput[] | WorkflowLogUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: WorkflowLogCreateOrConnectWithoutInstanceInput | WorkflowLogCreateOrConnectWithoutInstanceInput[]
    createMany?: WorkflowLogCreateManyInstanceInputEnvelope
    connect?: WorkflowLogWhereUniqueInput | WorkflowLogWhereUniqueInput[]
  }

  export type StepExecutionUncheckedCreateNestedManyWithoutInstanceInput = {
    create?: XOR<StepExecutionCreateWithoutInstanceInput, StepExecutionUncheckedCreateWithoutInstanceInput> | StepExecutionCreateWithoutInstanceInput[] | StepExecutionUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: StepExecutionCreateOrConnectWithoutInstanceInput | StepExecutionCreateOrConnectWithoutInstanceInput[]
    createMany?: StepExecutionCreateManyInstanceInputEnvelope
    connect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
  }

  export type WorkflowLogUncheckedCreateNestedManyWithoutInstanceInput = {
    create?: XOR<WorkflowLogCreateWithoutInstanceInput, WorkflowLogUncheckedCreateWithoutInstanceInput> | WorkflowLogCreateWithoutInstanceInput[] | WorkflowLogUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: WorkflowLogCreateOrConnectWithoutInstanceInput | WorkflowLogCreateOrConnectWithoutInstanceInput[]
    createMany?: WorkflowLogCreateManyInstanceInputEnvelope
    connect?: WorkflowLogWhereUniqueInput | WorkflowLogWhereUniqueInput[]
  }

  export type WorkflowUpdateOneRequiredWithoutInstancesNestedInput = {
    create?: XOR<WorkflowCreateWithoutInstancesInput, WorkflowUncheckedCreateWithoutInstancesInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutInstancesInput
    upsert?: WorkflowUpsertWithoutInstancesInput
    connect?: WorkflowWhereUniqueInput
    update?: XOR<XOR<WorkflowUpdateToOneWithWhereWithoutInstancesInput, WorkflowUpdateWithoutInstancesInput>, WorkflowUncheckedUpdateWithoutInstancesInput>
  }

  export type UserUpdateOneRequiredWithoutWorkflowInstancesNestedInput = {
    create?: XOR<UserCreateWithoutWorkflowInstancesInput, UserUncheckedCreateWithoutWorkflowInstancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkflowInstancesInput
    upsert?: UserUpsertWithoutWorkflowInstancesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkflowInstancesInput, UserUpdateWithoutWorkflowInstancesInput>, UserUncheckedUpdateWithoutWorkflowInstancesInput>
  }

  export type StepExecutionUpdateManyWithoutInstanceNestedInput = {
    create?: XOR<StepExecutionCreateWithoutInstanceInput, StepExecutionUncheckedCreateWithoutInstanceInput> | StepExecutionCreateWithoutInstanceInput[] | StepExecutionUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: StepExecutionCreateOrConnectWithoutInstanceInput | StepExecutionCreateOrConnectWithoutInstanceInput[]
    upsert?: StepExecutionUpsertWithWhereUniqueWithoutInstanceInput | StepExecutionUpsertWithWhereUniqueWithoutInstanceInput[]
    createMany?: StepExecutionCreateManyInstanceInputEnvelope
    set?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    disconnect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    delete?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    connect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    update?: StepExecutionUpdateWithWhereUniqueWithoutInstanceInput | StepExecutionUpdateWithWhereUniqueWithoutInstanceInput[]
    updateMany?: StepExecutionUpdateManyWithWhereWithoutInstanceInput | StepExecutionUpdateManyWithWhereWithoutInstanceInput[]
    deleteMany?: StepExecutionScalarWhereInput | StepExecutionScalarWhereInput[]
  }

  export type WorkflowLogUpdateManyWithoutInstanceNestedInput = {
    create?: XOR<WorkflowLogCreateWithoutInstanceInput, WorkflowLogUncheckedCreateWithoutInstanceInput> | WorkflowLogCreateWithoutInstanceInput[] | WorkflowLogUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: WorkflowLogCreateOrConnectWithoutInstanceInput | WorkflowLogCreateOrConnectWithoutInstanceInput[]
    upsert?: WorkflowLogUpsertWithWhereUniqueWithoutInstanceInput | WorkflowLogUpsertWithWhereUniqueWithoutInstanceInput[]
    createMany?: WorkflowLogCreateManyInstanceInputEnvelope
    set?: WorkflowLogWhereUniqueInput | WorkflowLogWhereUniqueInput[]
    disconnect?: WorkflowLogWhereUniqueInput | WorkflowLogWhereUniqueInput[]
    delete?: WorkflowLogWhereUniqueInput | WorkflowLogWhereUniqueInput[]
    connect?: WorkflowLogWhereUniqueInput | WorkflowLogWhereUniqueInput[]
    update?: WorkflowLogUpdateWithWhereUniqueWithoutInstanceInput | WorkflowLogUpdateWithWhereUniqueWithoutInstanceInput[]
    updateMany?: WorkflowLogUpdateManyWithWhereWithoutInstanceInput | WorkflowLogUpdateManyWithWhereWithoutInstanceInput[]
    deleteMany?: WorkflowLogScalarWhereInput | WorkflowLogScalarWhereInput[]
  }

  export type StepExecutionUncheckedUpdateManyWithoutInstanceNestedInput = {
    create?: XOR<StepExecutionCreateWithoutInstanceInput, StepExecutionUncheckedCreateWithoutInstanceInput> | StepExecutionCreateWithoutInstanceInput[] | StepExecutionUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: StepExecutionCreateOrConnectWithoutInstanceInput | StepExecutionCreateOrConnectWithoutInstanceInput[]
    upsert?: StepExecutionUpsertWithWhereUniqueWithoutInstanceInput | StepExecutionUpsertWithWhereUniqueWithoutInstanceInput[]
    createMany?: StepExecutionCreateManyInstanceInputEnvelope
    set?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    disconnect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    delete?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    connect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    update?: StepExecutionUpdateWithWhereUniqueWithoutInstanceInput | StepExecutionUpdateWithWhereUniqueWithoutInstanceInput[]
    updateMany?: StepExecutionUpdateManyWithWhereWithoutInstanceInput | StepExecutionUpdateManyWithWhereWithoutInstanceInput[]
    deleteMany?: StepExecutionScalarWhereInput | StepExecutionScalarWhereInput[]
  }

  export type WorkflowLogUncheckedUpdateManyWithoutInstanceNestedInput = {
    create?: XOR<WorkflowLogCreateWithoutInstanceInput, WorkflowLogUncheckedCreateWithoutInstanceInput> | WorkflowLogCreateWithoutInstanceInput[] | WorkflowLogUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: WorkflowLogCreateOrConnectWithoutInstanceInput | WorkflowLogCreateOrConnectWithoutInstanceInput[]
    upsert?: WorkflowLogUpsertWithWhereUniqueWithoutInstanceInput | WorkflowLogUpsertWithWhereUniqueWithoutInstanceInput[]
    createMany?: WorkflowLogCreateManyInstanceInputEnvelope
    set?: WorkflowLogWhereUniqueInput | WorkflowLogWhereUniqueInput[]
    disconnect?: WorkflowLogWhereUniqueInput | WorkflowLogWhereUniqueInput[]
    delete?: WorkflowLogWhereUniqueInput | WorkflowLogWhereUniqueInput[]
    connect?: WorkflowLogWhereUniqueInput | WorkflowLogWhereUniqueInput[]
    update?: WorkflowLogUpdateWithWhereUniqueWithoutInstanceInput | WorkflowLogUpdateWithWhereUniqueWithoutInstanceInput[]
    updateMany?: WorkflowLogUpdateManyWithWhereWithoutInstanceInput | WorkflowLogUpdateManyWithWhereWithoutInstanceInput[]
    deleteMany?: WorkflowLogScalarWhereInput | WorkflowLogScalarWhereInput[]
  }

  export type WorkflowInstanceCreateNestedOneWithoutExecutionsInput = {
    create?: XOR<WorkflowInstanceCreateWithoutExecutionsInput, WorkflowInstanceUncheckedCreateWithoutExecutionsInput>
    connectOrCreate?: WorkflowInstanceCreateOrConnectWithoutExecutionsInput
    connect?: WorkflowInstanceWhereUniqueInput
  }

  export type WorkflowInstanceUpdateOneRequiredWithoutExecutionsNestedInput = {
    create?: XOR<WorkflowInstanceCreateWithoutExecutionsInput, WorkflowInstanceUncheckedCreateWithoutExecutionsInput>
    connectOrCreate?: WorkflowInstanceCreateOrConnectWithoutExecutionsInput
    upsert?: WorkflowInstanceUpsertWithoutExecutionsInput
    connect?: WorkflowInstanceWhereUniqueInput
    update?: XOR<XOR<WorkflowInstanceUpdateToOneWithWhereWithoutExecutionsInput, WorkflowInstanceUpdateWithoutExecutionsInput>, WorkflowInstanceUncheckedUpdateWithoutExecutionsInput>
  }

  export type WorkflowInstanceCreateNestedOneWithoutLogsInput = {
    create?: XOR<WorkflowInstanceCreateWithoutLogsInput, WorkflowInstanceUncheckedCreateWithoutLogsInput>
    connectOrCreate?: WorkflowInstanceCreateOrConnectWithoutLogsInput
    connect?: WorkflowInstanceWhereUniqueInput
  }

  export type WorkflowInstanceUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<WorkflowInstanceCreateWithoutLogsInput, WorkflowInstanceUncheckedCreateWithoutLogsInput>
    connectOrCreate?: WorkflowInstanceCreateOrConnectWithoutLogsInput
    upsert?: WorkflowInstanceUpsertWithoutLogsInput
    connect?: WorkflowInstanceWhereUniqueInput
    update?: XOR<XOR<WorkflowInstanceUpdateToOneWithWhereWithoutLogsInput, WorkflowInstanceUpdateWithoutLogsInput>, WorkflowInstanceUncheckedUpdateWithoutLogsInput>
  }

  export type WorkflowCreateNestedOneWithoutTemplatesInput = {
    create?: XOR<WorkflowCreateWithoutTemplatesInput, WorkflowUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutTemplatesInput
    connect?: WorkflowWhereUniqueInput
  }

  export type WorkflowUpdateOneRequiredWithoutTemplatesNestedInput = {
    create?: XOR<WorkflowCreateWithoutTemplatesInput, WorkflowUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutTemplatesInput
    upsert?: WorkflowUpsertWithoutTemplatesInput
    connect?: WorkflowWhereUniqueInput
    update?: XOR<XOR<WorkflowUpdateToOneWithWhereWithoutTemplatesInput, WorkflowUpdateWithoutTemplatesInput>, WorkflowUncheckedUpdateWithoutTemplatesInput>
  }

  export type WorkflowCreateNestedOneWithoutRatingsInput = {
    create?: XOR<WorkflowCreateWithoutRatingsInput, WorkflowUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutRatingsInput
    connect?: WorkflowWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWorkflowRatingsInput = {
    create?: XOR<UserCreateWithoutWorkflowRatingsInput, UserUncheckedCreateWithoutWorkflowRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkflowRatingsInput
    connect?: UserWhereUniqueInput
  }

  export type WorkflowUpdateOneRequiredWithoutRatingsNestedInput = {
    create?: XOR<WorkflowCreateWithoutRatingsInput, WorkflowUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutRatingsInput
    upsert?: WorkflowUpsertWithoutRatingsInput
    connect?: WorkflowWhereUniqueInput
    update?: XOR<XOR<WorkflowUpdateToOneWithWhereWithoutRatingsInput, WorkflowUpdateWithoutRatingsInput>, WorkflowUncheckedUpdateWithoutRatingsInput>
  }

  export type UserUpdateOneRequiredWithoutWorkflowRatingsNestedInput = {
    create?: XOR<UserCreateWithoutWorkflowRatingsInput, UserUncheckedCreateWithoutWorkflowRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkflowRatingsInput
    upsert?: UserUpsertWithoutWorkflowRatingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkflowRatingsInput, UserUpdateWithoutWorkflowRatingsInput>, UserUncheckedUpdateWithoutWorkflowRatingsInput>
  }

  export type WorkflowCreateNestedOneWithoutScheduledTasksInput = {
    create?: XOR<WorkflowCreateWithoutScheduledTasksInput, WorkflowUncheckedCreateWithoutScheduledTasksInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutScheduledTasksInput
    connect?: WorkflowWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutScheduledTasksInput = {
    create?: XOR<UserCreateWithoutScheduledTasksInput, UserUncheckedCreateWithoutScheduledTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutScheduledTasksInput
    connect?: UserWhereUniqueInput
  }

  export type WorkflowUpdateOneRequiredWithoutScheduledTasksNestedInput = {
    create?: XOR<WorkflowCreateWithoutScheduledTasksInput, WorkflowUncheckedCreateWithoutScheduledTasksInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutScheduledTasksInput
    upsert?: WorkflowUpsertWithoutScheduledTasksInput
    connect?: WorkflowWhereUniqueInput
    update?: XOR<XOR<WorkflowUpdateToOneWithWhereWithoutScheduledTasksInput, WorkflowUpdateWithoutScheduledTasksInput>, WorkflowUncheckedUpdateWithoutScheduledTasksInput>
  }

  export type UserUpdateOneRequiredWithoutScheduledTasksNestedInput = {
    create?: XOR<UserCreateWithoutScheduledTasksInput, UserUncheckedCreateWithoutScheduledTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutScheduledTasksInput
    upsert?: UserUpsertWithoutScheduledTasksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutScheduledTasksInput, UserUpdateWithoutScheduledTasksInput>, UserUncheckedUpdateWithoutScheduledTasksInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type CharacterCreateWithoutCreatorInput = {
    id?: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatSessions?: ChatSessionCreateNestedManyWithoutCharacterInput
    messages?: MessageCreateNestedManyWithoutCharacterInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutCharacterInput
    ratings?: CharacterRatingCreateNestedManyWithoutCharacterInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutCharacterInput
    chatMessages?: ChatMessageCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutCreatorInput = {
    id?: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutCharacterInput
    messages?: MessageUncheckedCreateNestedManyWithoutCharacterInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutCharacterInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutCharacterInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutCharacterInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutCreatorInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutCreatorInput, CharacterUncheckedCreateWithoutCreatorInput>
  }

  export type CharacterCreateManyCreatorInputEnvelope = {
    data: CharacterCreateManyCreatorInput | CharacterCreateManyCreatorInput[]
  }

  export type ChatSessionCreateWithoutUserInput = {
    id?: string
    title?: string | null
    model?: string
    presetId?: string | null
    worldInfoId?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isArchived?: boolean
    isPinned?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    character: CharacterCreateNestedOneWithoutChatSessionsInput
    messages?: MessageCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionUncheckedCreateWithoutUserInput = {
    id?: string
    characterId: string
    title?: string | null
    model?: string
    presetId?: string | null
    worldInfoId?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isArchived?: boolean
    isPinned?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionCreateOrConnectWithoutUserInput = {
    where: ChatSessionWhereUniqueInput
    create: XOR<ChatSessionCreateWithoutUserInput, ChatSessionUncheckedCreateWithoutUserInput>
  }

  export type ChatSessionCreateManyUserInputEnvelope = {
    data: ChatSessionCreateManyUserInput | ChatSessionCreateManyUserInput[]
  }

  export type MessageCreateWithoutUserInput = {
    id?: string
    role: string
    content: string
    tokens?: number
    edited?: boolean
    deleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    session: ChatSessionCreateNestedOneWithoutMessagesInput
    character?: CharacterCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutUserInput = {
    id?: string
    sessionId: string
    characterId?: string | null
    role: string
    content: string
    tokens?: number
    edited?: boolean
    deleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutUserInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput>
  }

  export type MessageCreateManyUserInputEnvelope = {
    data: MessageCreateManyUserInput | MessageCreateManyUserInput[]
  }

  export type CharacterFavoriteCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    character: CharacterCreateNestedOneWithoutFavoritesInput
  }

  export type CharacterFavoriteUncheckedCreateWithoutUserInput = {
    id?: string
    characterId: string
    createdAt?: Date | string
  }

  export type CharacterFavoriteCreateOrConnectWithoutUserInput = {
    where: CharacterFavoriteWhereUniqueInput
    create: XOR<CharacterFavoriteCreateWithoutUserInput, CharacterFavoriteUncheckedCreateWithoutUserInput>
  }

  export type CharacterFavoriteCreateManyUserInputEnvelope = {
    data: CharacterFavoriteCreateManyUserInput | CharacterFavoriteCreateManyUserInput[]
  }

  export type CharacterRatingCreateWithoutUserInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    character: CharacterCreateNestedOneWithoutRatingsInput
  }

  export type CharacterRatingUncheckedCreateWithoutUserInput = {
    id?: string
    characterId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterRatingCreateOrConnectWithoutUserInput = {
    where: CharacterRatingWhereUniqueInput
    create: XOR<CharacterRatingCreateWithoutUserInput, CharacterRatingUncheckedCreateWithoutUserInput>
  }

  export type CharacterRatingCreateManyUserInputEnvelope = {
    data: CharacterRatingCreateManyUserInput | CharacterRatingCreateManyUserInput[]
  }

  export type TransactionCreateWithoutUserInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    status: string
    method: string
    externalId?: string | null
    description: string
    metadata?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    status: string
    method: string
    externalId?: string | null
    description: string
    metadata?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutUserInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionCreateManyUserInputEnvelope = {
    data: TransactionCreateManyUserInput | TransactionCreateManyUserInput[]
  }

  export type OAuthAccountCreateWithoutUserInput = {
    id?: string
    provider: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OAuthAccountUncheckedCreateWithoutUserInput = {
    id?: string
    provider: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OAuthAccountCreateOrConnectWithoutUserInput = {
    where: OAuthAccountWhereUniqueInput
    create: XOR<OAuthAccountCreateWithoutUserInput, OAuthAccountUncheckedCreateWithoutUserInput>
  }

  export type OAuthAccountCreateManyUserInputEnvelope = {
    data: OAuthAccountCreateManyUserInput | OAuthAccountCreateManyUserInput[]
  }

  export type RefreshTokenCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenCreateOrConnectWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenCreateManyUserInputEnvelope = {
    data: RefreshTokenCreateManyUserInput | RefreshTokenCreateManyUserInput[]
  }

  export type ChatRoomCreateWithoutOwnerInput = {
    id?: string
    name: string
    description?: string | null
    maxParticipants?: number
    isPrivate?: boolean
    allowSpectators?: boolean
    roomType?: string
    settings?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: ChatParticipantCreateNestedManyWithoutRoomInput
    messages?: ChatMessageCreateNestedManyWithoutRoomInput
  }

  export type ChatRoomUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    description?: string | null
    maxParticipants?: number
    isPrivate?: boolean
    allowSpectators?: boolean
    roomType?: string
    settings?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: ChatParticipantUncheckedCreateNestedManyWithoutRoomInput
    messages?: ChatMessageUncheckedCreateNestedManyWithoutRoomInput
  }

  export type ChatRoomCreateOrConnectWithoutOwnerInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutOwnerInput, ChatRoomUncheckedCreateWithoutOwnerInput>
  }

  export type ChatRoomCreateManyOwnerInputEnvelope = {
    data: ChatRoomCreateManyOwnerInput | ChatRoomCreateManyOwnerInput[]
  }

  export type ChatParticipantCreateWithoutUserInput = {
    id?: string
    role?: string
    permissions?: string
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    isActive?: boolean
    isMuted?: boolean
    room: ChatRoomCreateNestedOneWithoutParticipantsInput
    character?: CharacterCreateNestedOneWithoutChatParticipantsInput
  }

  export type ChatParticipantUncheckedCreateWithoutUserInput = {
    id?: string
    roomId: string
    characterId?: string | null
    role?: string
    permissions?: string
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    isActive?: boolean
    isMuted?: boolean
  }

  export type ChatParticipantCreateOrConnectWithoutUserInput = {
    where: ChatParticipantWhereUniqueInput
    create: XOR<ChatParticipantCreateWithoutUserInput, ChatParticipantUncheckedCreateWithoutUserInput>
  }

  export type ChatParticipantCreateManyUserInputEnvelope = {
    data: ChatParticipantCreateManyUserInput | ChatParticipantCreateManyUserInput[]
  }

  export type ChatMessageCreateWithoutSenderInput = {
    id?: string
    content: string
    messageType?: string
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    room: ChatRoomCreateNestedOneWithoutMessagesInput
    character?: CharacterCreateNestedOneWithoutChatMessagesInput
    replyTo?: ChatMessageCreateNestedOneWithoutRepliesInput
    replies?: ChatMessageCreateNestedManyWithoutReplyToInput
  }

  export type ChatMessageUncheckedCreateWithoutSenderInput = {
    id?: string
    roomId: string
    characterId?: string | null
    content: string
    messageType?: string
    replyToId?: string | null
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: ChatMessageUncheckedCreateNestedManyWithoutReplyToInput
  }

  export type ChatMessageCreateOrConnectWithoutSenderInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutSenderInput, ChatMessageUncheckedCreateWithoutSenderInput>
  }

  export type ChatMessageCreateManySenderInputEnvelope = {
    data: ChatMessageCreateManySenderInput | ChatMessageCreateManySenderInput[]
  }

  export type WorkflowCreateWithoutCreatorInput = {
    id?: string
    name: string
    description?: string | null
    version?: string
    status?: string
    isTemplate?: boolean
    isPublic?: boolean
    category?: string
    tags?: string
    definition: string
    variables?: string
    settings?: string
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: WorkflowInstanceCreateNestedManyWithoutWorkflowInput
    templates?: WorkflowTemplateCreateNestedManyWithoutWorkflowInput
    ratings?: WorkflowRatingCreateNestedManyWithoutWorkflowInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowUncheckedCreateWithoutCreatorInput = {
    id?: string
    name: string
    description?: string | null
    version?: string
    status?: string
    isTemplate?: boolean
    isPublic?: boolean
    category?: string
    tags?: string
    definition: string
    variables?: string
    settings?: string
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: WorkflowInstanceUncheckedCreateNestedManyWithoutWorkflowInput
    templates?: WorkflowTemplateUncheckedCreateNestedManyWithoutWorkflowInput
    ratings?: WorkflowRatingUncheckedCreateNestedManyWithoutWorkflowInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowCreateOrConnectWithoutCreatorInput = {
    where: WorkflowWhereUniqueInput
    create: XOR<WorkflowCreateWithoutCreatorInput, WorkflowUncheckedCreateWithoutCreatorInput>
  }

  export type WorkflowCreateManyCreatorInputEnvelope = {
    data: WorkflowCreateManyCreatorInput | WorkflowCreateManyCreatorInput[]
  }

  export type WorkflowInstanceCreateWithoutExecutorInput = {
    id?: string
    name?: string | null
    status?: string
    priority?: string
    input?: string | null
    output?: string | null
    variables?: string
    currentStep?: string | null
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    failureReason?: string | null
    retryCount?: number
    maxRetries?: number
    timeout?: number | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow: WorkflowCreateNestedOneWithoutInstancesInput
    executions?: StepExecutionCreateNestedManyWithoutInstanceInput
    logs?: WorkflowLogCreateNestedManyWithoutInstanceInput
  }

  export type WorkflowInstanceUncheckedCreateWithoutExecutorInput = {
    id?: string
    workflowId: string
    name?: string | null
    status?: string
    priority?: string
    input?: string | null
    output?: string | null
    variables?: string
    currentStep?: string | null
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    failureReason?: string | null
    retryCount?: number
    maxRetries?: number
    timeout?: number | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    executions?: StepExecutionUncheckedCreateNestedManyWithoutInstanceInput
    logs?: WorkflowLogUncheckedCreateNestedManyWithoutInstanceInput
  }

  export type WorkflowInstanceCreateOrConnectWithoutExecutorInput = {
    where: WorkflowInstanceWhereUniqueInput
    create: XOR<WorkflowInstanceCreateWithoutExecutorInput, WorkflowInstanceUncheckedCreateWithoutExecutorInput>
  }

  export type WorkflowInstanceCreateManyExecutorInputEnvelope = {
    data: WorkflowInstanceCreateManyExecutorInput | WorkflowInstanceCreateManyExecutorInput[]
  }

  export type WorkflowRatingCreateWithoutUserInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow: WorkflowCreateNestedOneWithoutRatingsInput
  }

  export type WorkflowRatingUncheckedCreateWithoutUserInput = {
    id?: string
    workflowId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowRatingCreateOrConnectWithoutUserInput = {
    where: WorkflowRatingWhereUniqueInput
    create: XOR<WorkflowRatingCreateWithoutUserInput, WorkflowRatingUncheckedCreateWithoutUserInput>
  }

  export type WorkflowRatingCreateManyUserInputEnvelope = {
    data: WorkflowRatingCreateManyUserInput | WorkflowRatingCreateManyUserInput[]
  }

  export type ScheduledTaskCreateWithoutCreatorInput = {
    id?: string
    name: string
    cronExpression: string
    timezone?: string
    isEnabled?: boolean
    input?: string | null
    lastRunAt?: Date | string | null
    nextRunAt?: Date | string | null
    runCount?: number
    failureCount?: number
    maxRuns?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow: WorkflowCreateNestedOneWithoutScheduledTasksInput
  }

  export type ScheduledTaskUncheckedCreateWithoutCreatorInput = {
    id?: string
    name: string
    workflowId: string
    cronExpression: string
    timezone?: string
    isEnabled?: boolean
    input?: string | null
    lastRunAt?: Date | string | null
    nextRunAt?: Date | string | null
    runCount?: number
    failureCount?: number
    maxRuns?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduledTaskCreateOrConnectWithoutCreatorInput = {
    where: ScheduledTaskWhereUniqueInput
    create: XOR<ScheduledTaskCreateWithoutCreatorInput, ScheduledTaskUncheckedCreateWithoutCreatorInput>
  }

  export type ScheduledTaskCreateManyCreatorInputEnvelope = {
    data: ScheduledTaskCreateManyCreatorInput | ScheduledTaskCreateManyCreatorInput[]
  }

  export type CharacterUpsertWithWhereUniqueWithoutCreatorInput = {
    where: CharacterWhereUniqueInput
    update: XOR<CharacterUpdateWithoutCreatorInput, CharacterUncheckedUpdateWithoutCreatorInput>
    create: XOR<CharacterCreateWithoutCreatorInput, CharacterUncheckedCreateWithoutCreatorInput>
  }

  export type CharacterUpdateWithWhereUniqueWithoutCreatorInput = {
    where: CharacterWhereUniqueInput
    data: XOR<CharacterUpdateWithoutCreatorInput, CharacterUncheckedUpdateWithoutCreatorInput>
  }

  export type CharacterUpdateManyWithWhereWithoutCreatorInput = {
    where: CharacterScalarWhereInput
    data: XOR<CharacterUpdateManyMutationInput, CharacterUncheckedUpdateManyWithoutCreatorInput>
  }

  export type CharacterScalarWhereInput = {
    AND?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
    OR?: CharacterScalarWhereInput[]
    NOT?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
    id?: StringFilter<"Character"> | string
    creatorId?: StringFilter<"Character"> | string
    name?: StringFilter<"Character"> | string
    description?: StringFilter<"Character"> | string
    fullDescription?: StringNullableFilter<"Character"> | string | null
    personality?: StringNullableFilter<"Character"> | string | null
    backstory?: StringNullableFilter<"Character"> | string | null
    speakingStyle?: StringNullableFilter<"Character"> | string | null
    scenario?: StringNullableFilter<"Character"> | string | null
    firstMessage?: StringNullableFilter<"Character"> | string | null
    systemPrompt?: StringNullableFilter<"Character"> | string | null
    exampleDialogs?: StringNullableFilter<"Character"> | string | null
    avatar?: StringNullableFilter<"Character"> | string | null
    coverImage?: StringNullableFilter<"Character"> | string | null
    category?: StringFilter<"Character"> | string
    tags?: StringFilter<"Character"> | string
    language?: StringFilter<"Character"> | string
    model?: StringFilter<"Character"> | string
    temperature?: FloatFilter<"Character"> | number
    maxTokens?: IntFilter<"Character"> | number
    isPublic?: BoolFilter<"Character"> | boolean
    isNSFW?: BoolFilter<"Character"> | boolean
    isFeatured?: BoolFilter<"Character"> | boolean
    rating?: FloatFilter<"Character"> | number
    ratingCount?: IntFilter<"Character"> | number
    chatCount?: IntFilter<"Character"> | number
    favoriteCount?: IntFilter<"Character"> | number
    importedFrom?: StringNullableFilter<"Character"> | string | null
    version?: IntFilter<"Character"> | number
    metadata?: StringNullableFilter<"Character"> | string | null
    createdAt?: DateTimeFilter<"Character"> | Date | string
    updatedAt?: DateTimeFilter<"Character"> | Date | string
  }

  export type ChatSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatSessionWhereUniqueInput
    update: XOR<ChatSessionUpdateWithoutUserInput, ChatSessionUncheckedUpdateWithoutUserInput>
    create: XOR<ChatSessionCreateWithoutUserInput, ChatSessionUncheckedCreateWithoutUserInput>
  }

  export type ChatSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatSessionWhereUniqueInput
    data: XOR<ChatSessionUpdateWithoutUserInput, ChatSessionUncheckedUpdateWithoutUserInput>
  }

  export type ChatSessionUpdateManyWithWhereWithoutUserInput = {
    where: ChatSessionScalarWhereInput
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatSessionScalarWhereInput = {
    AND?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
    OR?: ChatSessionScalarWhereInput[]
    NOT?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
    id?: StringFilter<"ChatSession"> | string
    userId?: StringFilter<"ChatSession"> | string
    characterId?: StringFilter<"ChatSession"> | string
    title?: StringNullableFilter<"ChatSession"> | string | null
    model?: StringFilter<"ChatSession"> | string
    presetId?: StringNullableFilter<"ChatSession"> | string | null
    worldInfoId?: StringNullableFilter<"ChatSession"> | string | null
    lastMessageAt?: DateTimeNullableFilter<"ChatSession"> | Date | string | null
    messageCount?: IntFilter<"ChatSession"> | number
    totalTokens?: IntFilter<"ChatSession"> | number
    isArchived?: BoolFilter<"ChatSession"> | boolean
    isPinned?: BoolFilter<"ChatSession"> | boolean
    metadata?: StringNullableFilter<"ChatSession"> | string | null
    createdAt?: DateTimeFilter<"ChatSession"> | Date | string
    updatedAt?: DateTimeFilter<"ChatSession"> | Date | string
  }

  export type MessageUpsertWithWhereUniqueWithoutUserInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutUserInput, MessageUncheckedUpdateWithoutUserInput>
    create: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutUserInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutUserInput, MessageUncheckedUpdateWithoutUserInput>
  }

  export type MessageUpdateManyWithWhereWithoutUserInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutUserInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    sessionId?: StringFilter<"Message"> | string
    userId?: StringNullableFilter<"Message"> | string | null
    characterId?: StringNullableFilter<"Message"> | string | null
    role?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    tokens?: IntFilter<"Message"> | number
    edited?: BoolFilter<"Message"> | boolean
    deleted?: BoolFilter<"Message"> | boolean
    metadata?: StringNullableFilter<"Message"> | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
  }

  export type CharacterFavoriteUpsertWithWhereUniqueWithoutUserInput = {
    where: CharacterFavoriteWhereUniqueInput
    update: XOR<CharacterFavoriteUpdateWithoutUserInput, CharacterFavoriteUncheckedUpdateWithoutUserInput>
    create: XOR<CharacterFavoriteCreateWithoutUserInput, CharacterFavoriteUncheckedCreateWithoutUserInput>
  }

  export type CharacterFavoriteUpdateWithWhereUniqueWithoutUserInput = {
    where: CharacterFavoriteWhereUniqueInput
    data: XOR<CharacterFavoriteUpdateWithoutUserInput, CharacterFavoriteUncheckedUpdateWithoutUserInput>
  }

  export type CharacterFavoriteUpdateManyWithWhereWithoutUserInput = {
    where: CharacterFavoriteScalarWhereInput
    data: XOR<CharacterFavoriteUpdateManyMutationInput, CharacterFavoriteUncheckedUpdateManyWithoutUserInput>
  }

  export type CharacterFavoriteScalarWhereInput = {
    AND?: CharacterFavoriteScalarWhereInput | CharacterFavoriteScalarWhereInput[]
    OR?: CharacterFavoriteScalarWhereInput[]
    NOT?: CharacterFavoriteScalarWhereInput | CharacterFavoriteScalarWhereInput[]
    id?: StringFilter<"CharacterFavorite"> | string
    userId?: StringFilter<"CharacterFavorite"> | string
    characterId?: StringFilter<"CharacterFavorite"> | string
    createdAt?: DateTimeFilter<"CharacterFavorite"> | Date | string
  }

  export type CharacterRatingUpsertWithWhereUniqueWithoutUserInput = {
    where: CharacterRatingWhereUniqueInput
    update: XOR<CharacterRatingUpdateWithoutUserInput, CharacterRatingUncheckedUpdateWithoutUserInput>
    create: XOR<CharacterRatingCreateWithoutUserInput, CharacterRatingUncheckedCreateWithoutUserInput>
  }

  export type CharacterRatingUpdateWithWhereUniqueWithoutUserInput = {
    where: CharacterRatingWhereUniqueInput
    data: XOR<CharacterRatingUpdateWithoutUserInput, CharacterRatingUncheckedUpdateWithoutUserInput>
  }

  export type CharacterRatingUpdateManyWithWhereWithoutUserInput = {
    where: CharacterRatingScalarWhereInput
    data: XOR<CharacterRatingUpdateManyMutationInput, CharacterRatingUncheckedUpdateManyWithoutUserInput>
  }

  export type CharacterRatingScalarWhereInput = {
    AND?: CharacterRatingScalarWhereInput | CharacterRatingScalarWhereInput[]
    OR?: CharacterRatingScalarWhereInput[]
    NOT?: CharacterRatingScalarWhereInput | CharacterRatingScalarWhereInput[]
    id?: StringFilter<"CharacterRating"> | string
    userId?: StringFilter<"CharacterRating"> | string
    characterId?: StringFilter<"CharacterRating"> | string
    rating?: FloatFilter<"CharacterRating"> | number
    comment?: StringNullableFilter<"CharacterRating"> | string | null
    createdAt?: DateTimeFilter<"CharacterRating"> | Date | string
    updatedAt?: DateTimeFilter<"CharacterRating"> | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
  }

  export type TransactionUpdateManyWithWhereWithoutUserInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: StringFilter<"Transaction"> | string
    userId?: StringFilter<"Transaction"> | string
    type?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    currency?: StringFilter<"Transaction"> | string
    status?: StringFilter<"Transaction"> | string
    method?: StringFilter<"Transaction"> | string
    externalId?: StringNullableFilter<"Transaction"> | string | null
    description?: StringFilter<"Transaction"> | string
    metadata?: StringNullableFilter<"Transaction"> | string | null
    completedAt?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type OAuthAccountUpsertWithWhereUniqueWithoutUserInput = {
    where: OAuthAccountWhereUniqueInput
    update: XOR<OAuthAccountUpdateWithoutUserInput, OAuthAccountUncheckedUpdateWithoutUserInput>
    create: XOR<OAuthAccountCreateWithoutUserInput, OAuthAccountUncheckedCreateWithoutUserInput>
  }

  export type OAuthAccountUpdateWithWhereUniqueWithoutUserInput = {
    where: OAuthAccountWhereUniqueInput
    data: XOR<OAuthAccountUpdateWithoutUserInput, OAuthAccountUncheckedUpdateWithoutUserInput>
  }

  export type OAuthAccountUpdateManyWithWhereWithoutUserInput = {
    where: OAuthAccountScalarWhereInput
    data: XOR<OAuthAccountUpdateManyMutationInput, OAuthAccountUncheckedUpdateManyWithoutUserInput>
  }

  export type OAuthAccountScalarWhereInput = {
    AND?: OAuthAccountScalarWhereInput | OAuthAccountScalarWhereInput[]
    OR?: OAuthAccountScalarWhereInput[]
    NOT?: OAuthAccountScalarWhereInput | OAuthAccountScalarWhereInput[]
    id?: StringFilter<"OAuthAccount"> | string
    userId?: StringFilter<"OAuthAccount"> | string
    provider?: StringFilter<"OAuthAccount"> | string
    providerId?: StringFilter<"OAuthAccount"> | string
    accessToken?: StringNullableFilter<"OAuthAccount"> | string | null
    refreshToken?: StringNullableFilter<"OAuthAccount"> | string | null
    expiresAt?: DateTimeNullableFilter<"OAuthAccount"> | Date | string | null
    createdAt?: DateTimeFilter<"OAuthAccount"> | Date | string
    updatedAt?: DateTimeFilter<"OAuthAccount"> | Date | string
  }

  export type RefreshTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    update: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    data: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
  }

  export type RefreshTokenUpdateManyWithWhereWithoutUserInput = {
    where: RefreshTokenScalarWhereInput
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type RefreshTokenScalarWhereInput = {
    AND?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    OR?: RefreshTokenScalarWhereInput[]
    NOT?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    id?: StringFilter<"RefreshToken"> | string
    userId?: StringFilter<"RefreshToken"> | string
    token?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
  }

  export type ChatRoomUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ChatRoomWhereUniqueInput
    update: XOR<ChatRoomUpdateWithoutOwnerInput, ChatRoomUncheckedUpdateWithoutOwnerInput>
    create: XOR<ChatRoomCreateWithoutOwnerInput, ChatRoomUncheckedCreateWithoutOwnerInput>
  }

  export type ChatRoomUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ChatRoomWhereUniqueInput
    data: XOR<ChatRoomUpdateWithoutOwnerInput, ChatRoomUncheckedUpdateWithoutOwnerInput>
  }

  export type ChatRoomUpdateManyWithWhereWithoutOwnerInput = {
    where: ChatRoomScalarWhereInput
    data: XOR<ChatRoomUpdateManyMutationInput, ChatRoomUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ChatRoomScalarWhereInput = {
    AND?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
    OR?: ChatRoomScalarWhereInput[]
    NOT?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
    id?: StringFilter<"ChatRoom"> | string
    name?: StringFilter<"ChatRoom"> | string
    description?: StringNullableFilter<"ChatRoom"> | string | null
    ownerId?: StringFilter<"ChatRoom"> | string
    maxParticipants?: IntFilter<"ChatRoom"> | number
    isPrivate?: BoolFilter<"ChatRoom"> | boolean
    allowSpectators?: BoolFilter<"ChatRoom"> | boolean
    roomType?: StringFilter<"ChatRoom"> | string
    settings?: StringNullableFilter<"ChatRoom"> | string | null
    lastMessageAt?: DateTimeNullableFilter<"ChatRoom"> | Date | string | null
    messageCount?: IntFilter<"ChatRoom"> | number
    totalTokens?: IntFilter<"ChatRoom"> | number
    isActive?: BoolFilter<"ChatRoom"> | boolean
    createdAt?: DateTimeFilter<"ChatRoom"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoom"> | Date | string
  }

  export type ChatParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatParticipantWhereUniqueInput
    update: XOR<ChatParticipantUpdateWithoutUserInput, ChatParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<ChatParticipantCreateWithoutUserInput, ChatParticipantUncheckedCreateWithoutUserInput>
  }

  export type ChatParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatParticipantWhereUniqueInput
    data: XOR<ChatParticipantUpdateWithoutUserInput, ChatParticipantUncheckedUpdateWithoutUserInput>
  }

  export type ChatParticipantUpdateManyWithWhereWithoutUserInput = {
    where: ChatParticipantScalarWhereInput
    data: XOR<ChatParticipantUpdateManyMutationInput, ChatParticipantUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatParticipantScalarWhereInput = {
    AND?: ChatParticipantScalarWhereInput | ChatParticipantScalarWhereInput[]
    OR?: ChatParticipantScalarWhereInput[]
    NOT?: ChatParticipantScalarWhereInput | ChatParticipantScalarWhereInput[]
    id?: StringFilter<"ChatParticipant"> | string
    roomId?: StringFilter<"ChatParticipant"> | string
    userId?: StringNullableFilter<"ChatParticipant"> | string | null
    characterId?: StringNullableFilter<"ChatParticipant"> | string | null
    role?: StringFilter<"ChatParticipant"> | string
    permissions?: StringFilter<"ChatParticipant"> | string
    joinedAt?: DateTimeFilter<"ChatParticipant"> | Date | string
    lastSeenAt?: DateTimeFilter<"ChatParticipant"> | Date | string
    isActive?: BoolFilter<"ChatParticipant"> | boolean
    isMuted?: BoolFilter<"ChatParticipant"> | boolean
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutSenderInput, ChatMessageUncheckedUpdateWithoutSenderInput>
    create: XOR<ChatMessageCreateWithoutSenderInput, ChatMessageUncheckedCreateWithoutSenderInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutSenderInput, ChatMessageUncheckedUpdateWithoutSenderInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutSenderInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type ChatMessageScalarWhereInput = {
    AND?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    OR?: ChatMessageScalarWhereInput[]
    NOT?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    roomId?: StringFilter<"ChatMessage"> | string
    senderId?: StringNullableFilter<"ChatMessage"> | string | null
    characterId?: StringNullableFilter<"ChatMessage"> | string | null
    content?: StringFilter<"ChatMessage"> | string
    messageType?: StringFilter<"ChatMessage"> | string
    replyToId?: StringNullableFilter<"ChatMessage"> | string | null
    tokens?: IntFilter<"ChatMessage"> | number
    isEdited?: BoolFilter<"ChatMessage"> | boolean
    isDeleted?: BoolFilter<"ChatMessage"> | boolean
    metadata?: StringNullableFilter<"ChatMessage"> | string | null
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    updatedAt?: DateTimeFilter<"ChatMessage"> | Date | string
  }

  export type WorkflowUpsertWithWhereUniqueWithoutCreatorInput = {
    where: WorkflowWhereUniqueInput
    update: XOR<WorkflowUpdateWithoutCreatorInput, WorkflowUncheckedUpdateWithoutCreatorInput>
    create: XOR<WorkflowCreateWithoutCreatorInput, WorkflowUncheckedCreateWithoutCreatorInput>
  }

  export type WorkflowUpdateWithWhereUniqueWithoutCreatorInput = {
    where: WorkflowWhereUniqueInput
    data: XOR<WorkflowUpdateWithoutCreatorInput, WorkflowUncheckedUpdateWithoutCreatorInput>
  }

  export type WorkflowUpdateManyWithWhereWithoutCreatorInput = {
    where: WorkflowScalarWhereInput
    data: XOR<WorkflowUpdateManyMutationInput, WorkflowUncheckedUpdateManyWithoutCreatorInput>
  }

  export type WorkflowScalarWhereInput = {
    AND?: WorkflowScalarWhereInput | WorkflowScalarWhereInput[]
    OR?: WorkflowScalarWhereInput[]
    NOT?: WorkflowScalarWhereInput | WorkflowScalarWhereInput[]
    id?: StringFilter<"Workflow"> | string
    name?: StringFilter<"Workflow"> | string
    description?: StringNullableFilter<"Workflow"> | string | null
    creatorId?: StringFilter<"Workflow"> | string
    version?: StringFilter<"Workflow"> | string
    status?: StringFilter<"Workflow"> | string
    isTemplate?: BoolFilter<"Workflow"> | boolean
    isPublic?: BoolFilter<"Workflow"> | boolean
    category?: StringFilter<"Workflow"> | string
    tags?: StringFilter<"Workflow"> | string
    definition?: StringFilter<"Workflow"> | string
    variables?: StringFilter<"Workflow"> | string
    settings?: StringFilter<"Workflow"> | string
    usageCount?: IntFilter<"Workflow"> | number
    rating?: FloatFilter<"Workflow"> | number
    ratingCount?: IntFilter<"Workflow"> | number
    createdAt?: DateTimeFilter<"Workflow"> | Date | string
    updatedAt?: DateTimeFilter<"Workflow"> | Date | string
  }

  export type WorkflowInstanceUpsertWithWhereUniqueWithoutExecutorInput = {
    where: WorkflowInstanceWhereUniqueInput
    update: XOR<WorkflowInstanceUpdateWithoutExecutorInput, WorkflowInstanceUncheckedUpdateWithoutExecutorInput>
    create: XOR<WorkflowInstanceCreateWithoutExecutorInput, WorkflowInstanceUncheckedCreateWithoutExecutorInput>
  }

  export type WorkflowInstanceUpdateWithWhereUniqueWithoutExecutorInput = {
    where: WorkflowInstanceWhereUniqueInput
    data: XOR<WorkflowInstanceUpdateWithoutExecutorInput, WorkflowInstanceUncheckedUpdateWithoutExecutorInput>
  }

  export type WorkflowInstanceUpdateManyWithWhereWithoutExecutorInput = {
    where: WorkflowInstanceScalarWhereInput
    data: XOR<WorkflowInstanceUpdateManyMutationInput, WorkflowInstanceUncheckedUpdateManyWithoutExecutorInput>
  }

  export type WorkflowInstanceScalarWhereInput = {
    AND?: WorkflowInstanceScalarWhereInput | WorkflowInstanceScalarWhereInput[]
    OR?: WorkflowInstanceScalarWhereInput[]
    NOT?: WorkflowInstanceScalarWhereInput | WorkflowInstanceScalarWhereInput[]
    id?: StringFilter<"WorkflowInstance"> | string
    workflowId?: StringFilter<"WorkflowInstance"> | string
    executorId?: StringFilter<"WorkflowInstance"> | string
    name?: StringNullableFilter<"WorkflowInstance"> | string | null
    status?: StringFilter<"WorkflowInstance"> | string
    priority?: StringFilter<"WorkflowInstance"> | string
    input?: StringNullableFilter<"WorkflowInstance"> | string | null
    output?: StringNullableFilter<"WorkflowInstance"> | string | null
    variables?: StringFilter<"WorkflowInstance"> | string
    currentStep?: StringNullableFilter<"WorkflowInstance"> | string | null
    progress?: FloatFilter<"WorkflowInstance"> | number
    startedAt?: DateTimeNullableFilter<"WorkflowInstance"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"WorkflowInstance"> | Date | string | null
    failureReason?: StringNullableFilter<"WorkflowInstance"> | string | null
    retryCount?: IntFilter<"WorkflowInstance"> | number
    maxRetries?: IntFilter<"WorkflowInstance"> | number
    timeout?: IntNullableFilter<"WorkflowInstance"> | number | null
    metadata?: StringFilter<"WorkflowInstance"> | string
    createdAt?: DateTimeFilter<"WorkflowInstance"> | Date | string
    updatedAt?: DateTimeFilter<"WorkflowInstance"> | Date | string
  }

  export type WorkflowRatingUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkflowRatingWhereUniqueInput
    update: XOR<WorkflowRatingUpdateWithoutUserInput, WorkflowRatingUncheckedUpdateWithoutUserInput>
    create: XOR<WorkflowRatingCreateWithoutUserInput, WorkflowRatingUncheckedCreateWithoutUserInput>
  }

  export type WorkflowRatingUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkflowRatingWhereUniqueInput
    data: XOR<WorkflowRatingUpdateWithoutUserInput, WorkflowRatingUncheckedUpdateWithoutUserInput>
  }

  export type WorkflowRatingUpdateManyWithWhereWithoutUserInput = {
    where: WorkflowRatingScalarWhereInput
    data: XOR<WorkflowRatingUpdateManyMutationInput, WorkflowRatingUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkflowRatingScalarWhereInput = {
    AND?: WorkflowRatingScalarWhereInput | WorkflowRatingScalarWhereInput[]
    OR?: WorkflowRatingScalarWhereInput[]
    NOT?: WorkflowRatingScalarWhereInput | WorkflowRatingScalarWhereInput[]
    id?: StringFilter<"WorkflowRating"> | string
    workflowId?: StringFilter<"WorkflowRating"> | string
    userId?: StringFilter<"WorkflowRating"> | string
    rating?: FloatFilter<"WorkflowRating"> | number
    comment?: StringNullableFilter<"WorkflowRating"> | string | null
    createdAt?: DateTimeFilter<"WorkflowRating"> | Date | string
    updatedAt?: DateTimeFilter<"WorkflowRating"> | Date | string
  }

  export type ScheduledTaskUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ScheduledTaskWhereUniqueInput
    update: XOR<ScheduledTaskUpdateWithoutCreatorInput, ScheduledTaskUncheckedUpdateWithoutCreatorInput>
    create: XOR<ScheduledTaskCreateWithoutCreatorInput, ScheduledTaskUncheckedCreateWithoutCreatorInput>
  }

  export type ScheduledTaskUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ScheduledTaskWhereUniqueInput
    data: XOR<ScheduledTaskUpdateWithoutCreatorInput, ScheduledTaskUncheckedUpdateWithoutCreatorInput>
  }

  export type ScheduledTaskUpdateManyWithWhereWithoutCreatorInput = {
    where: ScheduledTaskScalarWhereInput
    data: XOR<ScheduledTaskUpdateManyMutationInput, ScheduledTaskUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ScheduledTaskScalarWhereInput = {
    AND?: ScheduledTaskScalarWhereInput | ScheduledTaskScalarWhereInput[]
    OR?: ScheduledTaskScalarWhereInput[]
    NOT?: ScheduledTaskScalarWhereInput | ScheduledTaskScalarWhereInput[]
    id?: StringFilter<"ScheduledTask"> | string
    name?: StringFilter<"ScheduledTask"> | string
    workflowId?: StringFilter<"ScheduledTask"> | string
    creatorId?: StringFilter<"ScheduledTask"> | string
    cronExpression?: StringFilter<"ScheduledTask"> | string
    timezone?: StringFilter<"ScheduledTask"> | string
    isEnabled?: BoolFilter<"ScheduledTask"> | boolean
    input?: StringNullableFilter<"ScheduledTask"> | string | null
    lastRunAt?: DateTimeNullableFilter<"ScheduledTask"> | Date | string | null
    nextRunAt?: DateTimeNullableFilter<"ScheduledTask"> | Date | string | null
    runCount?: IntFilter<"ScheduledTask"> | number
    failureCount?: IntFilter<"ScheduledTask"> | number
    maxRuns?: IntNullableFilter<"ScheduledTask"> | number | null
    createdAt?: DateTimeFilter<"ScheduledTask"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduledTask"> | Date | string
  }

  export type UserCreateWithoutOauthAccountsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    workflows?: WorkflowCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutOauthAccountsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomUncheckedCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingUncheckedCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutOauthAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOauthAccountsInput, UserUncheckedCreateWithoutOauthAccountsInput>
  }

  export type UserUpsertWithoutOauthAccountsInput = {
    update: XOR<UserUpdateWithoutOauthAccountsInput, UserUncheckedUpdateWithoutOauthAccountsInput>
    create: XOR<UserCreateWithoutOauthAccountsInput, UserUncheckedCreateWithoutOauthAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOauthAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOauthAccountsInput, UserUncheckedUpdateWithoutOauthAccountsInput>
  }

  export type UserUpdateWithoutOauthAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutOauthAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateWithoutRefreshTokensInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    workflows?: WorkflowCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutRefreshTokensInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomUncheckedCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingUncheckedCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutRefreshTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
  }

  export type UserUpsertWithoutRefreshTokensInput = {
    update: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRefreshTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type UserUpdateWithoutRefreshTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutRefreshTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateWithoutCharactersInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    workflows?: WorkflowCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCharactersInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomUncheckedCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingUncheckedCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCharactersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCharactersInput, UserUncheckedCreateWithoutCharactersInput>
  }

  export type ChatSessionCreateWithoutCharacterInput = {
    id?: string
    title?: string | null
    model?: string
    presetId?: string | null
    worldInfoId?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isArchived?: boolean
    isPinned?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutChatSessionsInput
    messages?: MessageCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionUncheckedCreateWithoutCharacterInput = {
    id?: string
    userId: string
    title?: string | null
    model?: string
    presetId?: string | null
    worldInfoId?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isArchived?: boolean
    isPinned?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionCreateOrConnectWithoutCharacterInput = {
    where: ChatSessionWhereUniqueInput
    create: XOR<ChatSessionCreateWithoutCharacterInput, ChatSessionUncheckedCreateWithoutCharacterInput>
  }

  export type ChatSessionCreateManyCharacterInputEnvelope = {
    data: ChatSessionCreateManyCharacterInput | ChatSessionCreateManyCharacterInput[]
  }

  export type MessageCreateWithoutCharacterInput = {
    id?: string
    role: string
    content: string
    tokens?: number
    edited?: boolean
    deleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    session: ChatSessionCreateNestedOneWithoutMessagesInput
    user?: UserCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutCharacterInput = {
    id?: string
    sessionId: string
    userId?: string | null
    role: string
    content: string
    tokens?: number
    edited?: boolean
    deleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutCharacterInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutCharacterInput, MessageUncheckedCreateWithoutCharacterInput>
  }

  export type MessageCreateManyCharacterInputEnvelope = {
    data: MessageCreateManyCharacterInput | MessageCreateManyCharacterInput[]
  }

  export type CharacterFavoriteCreateWithoutCharacterInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFavoritesInput
  }

  export type CharacterFavoriteUncheckedCreateWithoutCharacterInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type CharacterFavoriteCreateOrConnectWithoutCharacterInput = {
    where: CharacterFavoriteWhereUniqueInput
    create: XOR<CharacterFavoriteCreateWithoutCharacterInput, CharacterFavoriteUncheckedCreateWithoutCharacterInput>
  }

  export type CharacterFavoriteCreateManyCharacterInputEnvelope = {
    data: CharacterFavoriteCreateManyCharacterInput | CharacterFavoriteCreateManyCharacterInput[]
  }

  export type CharacterRatingCreateWithoutCharacterInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRatingsInput
  }

  export type CharacterRatingUncheckedCreateWithoutCharacterInput = {
    id?: string
    userId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterRatingCreateOrConnectWithoutCharacterInput = {
    where: CharacterRatingWhereUniqueInput
    create: XOR<CharacterRatingCreateWithoutCharacterInput, CharacterRatingUncheckedCreateWithoutCharacterInput>
  }

  export type CharacterRatingCreateManyCharacterInputEnvelope = {
    data: CharacterRatingCreateManyCharacterInput | CharacterRatingCreateManyCharacterInput[]
  }

  export type ChatParticipantCreateWithoutCharacterInput = {
    id?: string
    role?: string
    permissions?: string
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    isActive?: boolean
    isMuted?: boolean
    room: ChatRoomCreateNestedOneWithoutParticipantsInput
    user?: UserCreateNestedOneWithoutChatParticipantsInput
  }

  export type ChatParticipantUncheckedCreateWithoutCharacterInput = {
    id?: string
    roomId: string
    userId?: string | null
    role?: string
    permissions?: string
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    isActive?: boolean
    isMuted?: boolean
  }

  export type ChatParticipantCreateOrConnectWithoutCharacterInput = {
    where: ChatParticipantWhereUniqueInput
    create: XOR<ChatParticipantCreateWithoutCharacterInput, ChatParticipantUncheckedCreateWithoutCharacterInput>
  }

  export type ChatParticipantCreateManyCharacterInputEnvelope = {
    data: ChatParticipantCreateManyCharacterInput | ChatParticipantCreateManyCharacterInput[]
  }

  export type ChatMessageCreateWithoutCharacterInput = {
    id?: string
    content: string
    messageType?: string
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    room: ChatRoomCreateNestedOneWithoutMessagesInput
    sender?: UserCreateNestedOneWithoutChatMessagesInput
    replyTo?: ChatMessageCreateNestedOneWithoutRepliesInput
    replies?: ChatMessageCreateNestedManyWithoutReplyToInput
  }

  export type ChatMessageUncheckedCreateWithoutCharacterInput = {
    id?: string
    roomId: string
    senderId?: string | null
    content: string
    messageType?: string
    replyToId?: string | null
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: ChatMessageUncheckedCreateNestedManyWithoutReplyToInput
  }

  export type ChatMessageCreateOrConnectWithoutCharacterInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutCharacterInput, ChatMessageUncheckedCreateWithoutCharacterInput>
  }

  export type ChatMessageCreateManyCharacterInputEnvelope = {
    data: ChatMessageCreateManyCharacterInput | ChatMessageCreateManyCharacterInput[]
  }

  export type UserUpsertWithoutCharactersInput = {
    update: XOR<UserUpdateWithoutCharactersInput, UserUncheckedUpdateWithoutCharactersInput>
    create: XOR<UserCreateWithoutCharactersInput, UserUncheckedCreateWithoutCharactersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCharactersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCharactersInput, UserUncheckedUpdateWithoutCharactersInput>
  }

  export type UserUpdateWithoutCharactersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCharactersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ChatSessionUpsertWithWhereUniqueWithoutCharacterInput = {
    where: ChatSessionWhereUniqueInput
    update: XOR<ChatSessionUpdateWithoutCharacterInput, ChatSessionUncheckedUpdateWithoutCharacterInput>
    create: XOR<ChatSessionCreateWithoutCharacterInput, ChatSessionUncheckedCreateWithoutCharacterInput>
  }

  export type ChatSessionUpdateWithWhereUniqueWithoutCharacterInput = {
    where: ChatSessionWhereUniqueInput
    data: XOR<ChatSessionUpdateWithoutCharacterInput, ChatSessionUncheckedUpdateWithoutCharacterInput>
  }

  export type ChatSessionUpdateManyWithWhereWithoutCharacterInput = {
    where: ChatSessionScalarWhereInput
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyWithoutCharacterInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutCharacterInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutCharacterInput, MessageUncheckedUpdateWithoutCharacterInput>
    create: XOR<MessageCreateWithoutCharacterInput, MessageUncheckedCreateWithoutCharacterInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutCharacterInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutCharacterInput, MessageUncheckedUpdateWithoutCharacterInput>
  }

  export type MessageUpdateManyWithWhereWithoutCharacterInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutCharacterInput>
  }

  export type CharacterFavoriteUpsertWithWhereUniqueWithoutCharacterInput = {
    where: CharacterFavoriteWhereUniqueInput
    update: XOR<CharacterFavoriteUpdateWithoutCharacterInput, CharacterFavoriteUncheckedUpdateWithoutCharacterInput>
    create: XOR<CharacterFavoriteCreateWithoutCharacterInput, CharacterFavoriteUncheckedCreateWithoutCharacterInput>
  }

  export type CharacterFavoriteUpdateWithWhereUniqueWithoutCharacterInput = {
    where: CharacterFavoriteWhereUniqueInput
    data: XOR<CharacterFavoriteUpdateWithoutCharacterInput, CharacterFavoriteUncheckedUpdateWithoutCharacterInput>
  }

  export type CharacterFavoriteUpdateManyWithWhereWithoutCharacterInput = {
    where: CharacterFavoriteScalarWhereInput
    data: XOR<CharacterFavoriteUpdateManyMutationInput, CharacterFavoriteUncheckedUpdateManyWithoutCharacterInput>
  }

  export type CharacterRatingUpsertWithWhereUniqueWithoutCharacterInput = {
    where: CharacterRatingWhereUniqueInput
    update: XOR<CharacterRatingUpdateWithoutCharacterInput, CharacterRatingUncheckedUpdateWithoutCharacterInput>
    create: XOR<CharacterRatingCreateWithoutCharacterInput, CharacterRatingUncheckedCreateWithoutCharacterInput>
  }

  export type CharacterRatingUpdateWithWhereUniqueWithoutCharacterInput = {
    where: CharacterRatingWhereUniqueInput
    data: XOR<CharacterRatingUpdateWithoutCharacterInput, CharacterRatingUncheckedUpdateWithoutCharacterInput>
  }

  export type CharacterRatingUpdateManyWithWhereWithoutCharacterInput = {
    where: CharacterRatingScalarWhereInput
    data: XOR<CharacterRatingUpdateManyMutationInput, CharacterRatingUncheckedUpdateManyWithoutCharacterInput>
  }

  export type ChatParticipantUpsertWithWhereUniqueWithoutCharacterInput = {
    where: ChatParticipantWhereUniqueInput
    update: XOR<ChatParticipantUpdateWithoutCharacterInput, ChatParticipantUncheckedUpdateWithoutCharacterInput>
    create: XOR<ChatParticipantCreateWithoutCharacterInput, ChatParticipantUncheckedCreateWithoutCharacterInput>
  }

  export type ChatParticipantUpdateWithWhereUniqueWithoutCharacterInput = {
    where: ChatParticipantWhereUniqueInput
    data: XOR<ChatParticipantUpdateWithoutCharacterInput, ChatParticipantUncheckedUpdateWithoutCharacterInput>
  }

  export type ChatParticipantUpdateManyWithWhereWithoutCharacterInput = {
    where: ChatParticipantScalarWhereInput
    data: XOR<ChatParticipantUpdateManyMutationInput, ChatParticipantUncheckedUpdateManyWithoutCharacterInput>
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutCharacterInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutCharacterInput, ChatMessageUncheckedUpdateWithoutCharacterInput>
    create: XOR<ChatMessageCreateWithoutCharacterInput, ChatMessageUncheckedCreateWithoutCharacterInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutCharacterInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutCharacterInput, ChatMessageUncheckedUpdateWithoutCharacterInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutCharacterInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutCharacterInput>
  }

  export type UserCreateWithoutChatSessionsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCreatorInput
    messages?: MessageCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    workflows?: WorkflowCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutChatSessionsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCreatorInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomUncheckedCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingUncheckedCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutChatSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatSessionsInput, UserUncheckedCreateWithoutChatSessionsInput>
  }

  export type CharacterCreateWithoutChatSessionsInput = {
    id?: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCharactersInput
    messages?: MessageCreateNestedManyWithoutCharacterInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutCharacterInput
    ratings?: CharacterRatingCreateNestedManyWithoutCharacterInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutCharacterInput
    chatMessages?: ChatMessageCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutChatSessionsInput = {
    id?: string
    creatorId: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutCharacterInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutCharacterInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutCharacterInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutCharacterInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutChatSessionsInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutChatSessionsInput, CharacterUncheckedCreateWithoutChatSessionsInput>
  }

  export type MessageCreateWithoutSessionInput = {
    id?: string
    role: string
    content: string
    tokens?: number
    edited?: boolean
    deleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutMessagesInput
    character?: CharacterCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutSessionInput = {
    id?: string
    userId?: string | null
    characterId?: string | null
    role: string
    content: string
    tokens?: number
    edited?: boolean
    deleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutSessionInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSessionInput, MessageUncheckedCreateWithoutSessionInput>
  }

  export type MessageCreateManySessionInputEnvelope = {
    data: MessageCreateManySessionInput | MessageCreateManySessionInput[]
  }

  export type UserUpsertWithoutChatSessionsInput = {
    update: XOR<UserUpdateWithoutChatSessionsInput, UserUncheckedUpdateWithoutChatSessionsInput>
    create: XOR<UserCreateWithoutChatSessionsInput, UserUncheckedCreateWithoutChatSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChatSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChatSessionsInput, UserUncheckedUpdateWithoutChatSessionsInput>
  }

  export type UserUpdateWithoutChatSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCreatorNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutChatSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCreatorNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CharacterUpsertWithoutChatSessionsInput = {
    update: XOR<CharacterUpdateWithoutChatSessionsInput, CharacterUncheckedUpdateWithoutChatSessionsInput>
    create: XOR<CharacterCreateWithoutChatSessionsInput, CharacterUncheckedCreateWithoutChatSessionsInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutChatSessionsInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutChatSessionsInput, CharacterUncheckedUpdateWithoutChatSessionsInput>
  }

  export type CharacterUpdateWithoutChatSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCharactersNestedInput
    messages?: MessageUpdateManyWithoutCharacterNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutCharacterNestedInput
    ratings?: CharacterRatingUpdateManyWithoutCharacterNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutCharacterNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutChatSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutCharacterNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutCharacterNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutCharacterNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutCharacterNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutSessionInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSessionInput, MessageUncheckedUpdateWithoutSessionInput>
    create: XOR<MessageCreateWithoutSessionInput, MessageUncheckedCreateWithoutSessionInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSessionInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSessionInput, MessageUncheckedUpdateWithoutSessionInput>
  }

  export type MessageUpdateManyWithWhereWithoutSessionInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSessionInput>
  }

  export type UserCreateWithoutOwnedChatRoomsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    workflows?: WorkflowCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutOwnedChatRoomsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingUncheckedCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutOwnedChatRoomsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedChatRoomsInput, UserUncheckedCreateWithoutOwnedChatRoomsInput>
  }

  export type ChatParticipantCreateWithoutRoomInput = {
    id?: string
    role?: string
    permissions?: string
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    isActive?: boolean
    isMuted?: boolean
    user?: UserCreateNestedOneWithoutChatParticipantsInput
    character?: CharacterCreateNestedOneWithoutChatParticipantsInput
  }

  export type ChatParticipantUncheckedCreateWithoutRoomInput = {
    id?: string
    userId?: string | null
    characterId?: string | null
    role?: string
    permissions?: string
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    isActive?: boolean
    isMuted?: boolean
  }

  export type ChatParticipantCreateOrConnectWithoutRoomInput = {
    where: ChatParticipantWhereUniqueInput
    create: XOR<ChatParticipantCreateWithoutRoomInput, ChatParticipantUncheckedCreateWithoutRoomInput>
  }

  export type ChatParticipantCreateManyRoomInputEnvelope = {
    data: ChatParticipantCreateManyRoomInput | ChatParticipantCreateManyRoomInput[]
  }

  export type ChatMessageCreateWithoutRoomInput = {
    id?: string
    content: string
    messageType?: string
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sender?: UserCreateNestedOneWithoutChatMessagesInput
    character?: CharacterCreateNestedOneWithoutChatMessagesInput
    replyTo?: ChatMessageCreateNestedOneWithoutRepliesInput
    replies?: ChatMessageCreateNestedManyWithoutReplyToInput
  }

  export type ChatMessageUncheckedCreateWithoutRoomInput = {
    id?: string
    senderId?: string | null
    characterId?: string | null
    content: string
    messageType?: string
    replyToId?: string | null
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: ChatMessageUncheckedCreateNestedManyWithoutReplyToInput
  }

  export type ChatMessageCreateOrConnectWithoutRoomInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutRoomInput, ChatMessageUncheckedCreateWithoutRoomInput>
  }

  export type ChatMessageCreateManyRoomInputEnvelope = {
    data: ChatMessageCreateManyRoomInput | ChatMessageCreateManyRoomInput[]
  }

  export type UserUpsertWithoutOwnedChatRoomsInput = {
    update: XOR<UserUpdateWithoutOwnedChatRoomsInput, UserUncheckedUpdateWithoutOwnedChatRoomsInput>
    create: XOR<UserCreateWithoutOwnedChatRoomsInput, UserUncheckedCreateWithoutOwnedChatRoomsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedChatRoomsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedChatRoomsInput, UserUncheckedUpdateWithoutOwnedChatRoomsInput>
  }

  export type UserUpdateWithoutOwnedChatRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedChatRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ChatParticipantUpsertWithWhereUniqueWithoutRoomInput = {
    where: ChatParticipantWhereUniqueInput
    update: XOR<ChatParticipantUpdateWithoutRoomInput, ChatParticipantUncheckedUpdateWithoutRoomInput>
    create: XOR<ChatParticipantCreateWithoutRoomInput, ChatParticipantUncheckedCreateWithoutRoomInput>
  }

  export type ChatParticipantUpdateWithWhereUniqueWithoutRoomInput = {
    where: ChatParticipantWhereUniqueInput
    data: XOR<ChatParticipantUpdateWithoutRoomInput, ChatParticipantUncheckedUpdateWithoutRoomInput>
  }

  export type ChatParticipantUpdateManyWithWhereWithoutRoomInput = {
    where: ChatParticipantScalarWhereInput
    data: XOR<ChatParticipantUpdateManyMutationInput, ChatParticipantUncheckedUpdateManyWithoutRoomInput>
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutRoomInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutRoomInput, ChatMessageUncheckedUpdateWithoutRoomInput>
    create: XOR<ChatMessageCreateWithoutRoomInput, ChatMessageUncheckedCreateWithoutRoomInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutRoomInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutRoomInput, ChatMessageUncheckedUpdateWithoutRoomInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutRoomInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutRoomInput>
  }

  export type ChatRoomCreateWithoutParticipantsInput = {
    id?: string
    name: string
    description?: string | null
    maxParticipants?: number
    isPrivate?: boolean
    allowSpectators?: boolean
    roomType?: string
    settings?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedChatRoomsInput
    messages?: ChatMessageCreateNestedManyWithoutRoomInput
  }

  export type ChatRoomUncheckedCreateWithoutParticipantsInput = {
    id?: string
    name: string
    description?: string | null
    ownerId: string
    maxParticipants?: number
    isPrivate?: boolean
    allowSpectators?: boolean
    roomType?: string
    settings?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChatMessageUncheckedCreateNestedManyWithoutRoomInput
  }

  export type ChatRoomCreateOrConnectWithoutParticipantsInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutParticipantsInput, ChatRoomUncheckedCreateWithoutParticipantsInput>
  }

  export type UserCreateWithoutChatParticipantsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomCreateNestedManyWithoutOwnerInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    workflows?: WorkflowCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutChatParticipantsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomUncheckedCreateNestedManyWithoutOwnerInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingUncheckedCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutChatParticipantsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatParticipantsInput, UserUncheckedCreateWithoutChatParticipantsInput>
  }

  export type CharacterCreateWithoutChatParticipantsInput = {
    id?: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCharactersInput
    chatSessions?: ChatSessionCreateNestedManyWithoutCharacterInput
    messages?: MessageCreateNestedManyWithoutCharacterInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutCharacterInput
    ratings?: CharacterRatingCreateNestedManyWithoutCharacterInput
    chatMessages?: ChatMessageCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutChatParticipantsInput = {
    id?: string
    creatorId: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutCharacterInput
    messages?: MessageUncheckedCreateNestedManyWithoutCharacterInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutCharacterInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutCharacterInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutChatParticipantsInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutChatParticipantsInput, CharacterUncheckedCreateWithoutChatParticipantsInput>
  }

  export type ChatRoomUpsertWithoutParticipantsInput = {
    update: XOR<ChatRoomUpdateWithoutParticipantsInput, ChatRoomUncheckedUpdateWithoutParticipantsInput>
    create: XOR<ChatRoomCreateWithoutParticipantsInput, ChatRoomUncheckedCreateWithoutParticipantsInput>
    where?: ChatRoomWhereInput
  }

  export type ChatRoomUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: ChatRoomWhereInput
    data: XOR<ChatRoomUpdateWithoutParticipantsInput, ChatRoomUncheckedUpdateWithoutParticipantsInput>
  }

  export type ChatRoomUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    allowSpectators?: BoolFieldUpdateOperationsInput | boolean
    roomType?: StringFieldUpdateOperationsInput | string
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedChatRoomsNestedInput
    messages?: ChatMessageUpdateManyWithoutRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    allowSpectators?: BoolFieldUpdateOperationsInput | boolean
    roomType?: StringFieldUpdateOperationsInput | string
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChatMessageUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type UserUpsertWithoutChatParticipantsInput = {
    update: XOR<UserUpdateWithoutChatParticipantsInput, UserUncheckedUpdateWithoutChatParticipantsInput>
    create: XOR<UserCreateWithoutChatParticipantsInput, UserUncheckedCreateWithoutChatParticipantsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChatParticipantsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChatParticipantsInput, UserUncheckedUpdateWithoutChatParticipantsInput>
  }

  export type UserUpdateWithoutChatParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUpdateManyWithoutOwnerNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutChatParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CharacterUpsertWithoutChatParticipantsInput = {
    update: XOR<CharacterUpdateWithoutChatParticipantsInput, CharacterUncheckedUpdateWithoutChatParticipantsInput>
    create: XOR<CharacterCreateWithoutChatParticipantsInput, CharacterUncheckedCreateWithoutChatParticipantsInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutChatParticipantsInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutChatParticipantsInput, CharacterUncheckedUpdateWithoutChatParticipantsInput>
  }

  export type CharacterUpdateWithoutChatParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCharactersNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutCharacterNestedInput
    messages?: MessageUpdateManyWithoutCharacterNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutCharacterNestedInput
    ratings?: CharacterRatingUpdateManyWithoutCharacterNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutChatParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutCharacterNestedInput
    messages?: MessageUncheckedUpdateManyWithoutCharacterNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutCharacterNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutCharacterNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type ChatRoomCreateWithoutMessagesInput = {
    id?: string
    name: string
    description?: string | null
    maxParticipants?: number
    isPrivate?: boolean
    allowSpectators?: boolean
    roomType?: string
    settings?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedChatRoomsInput
    participants?: ChatParticipantCreateNestedManyWithoutRoomInput
  }

  export type ChatRoomUncheckedCreateWithoutMessagesInput = {
    id?: string
    name: string
    description?: string | null
    ownerId: string
    maxParticipants?: number
    isPrivate?: boolean
    allowSpectators?: boolean
    roomType?: string
    settings?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: ChatParticipantUncheckedCreateNestedManyWithoutRoomInput
  }

  export type ChatRoomCreateOrConnectWithoutMessagesInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutChatMessagesInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutChatMessagesInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomUncheckedCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingUncheckedCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutChatMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
  }

  export type CharacterCreateWithoutChatMessagesInput = {
    id?: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCharactersInput
    chatSessions?: ChatSessionCreateNestedManyWithoutCharacterInput
    messages?: MessageCreateNestedManyWithoutCharacterInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutCharacterInput
    ratings?: CharacterRatingCreateNestedManyWithoutCharacterInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutChatMessagesInput = {
    id?: string
    creatorId: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutCharacterInput
    messages?: MessageUncheckedCreateNestedManyWithoutCharacterInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutCharacterInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutCharacterInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutChatMessagesInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutChatMessagesInput, CharacterUncheckedCreateWithoutChatMessagesInput>
  }

  export type ChatMessageCreateWithoutRepliesInput = {
    id?: string
    content: string
    messageType?: string
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    room: ChatRoomCreateNestedOneWithoutMessagesInput
    sender?: UserCreateNestedOneWithoutChatMessagesInput
    character?: CharacterCreateNestedOneWithoutChatMessagesInput
    replyTo?: ChatMessageCreateNestedOneWithoutRepliesInput
  }

  export type ChatMessageUncheckedCreateWithoutRepliesInput = {
    id?: string
    roomId: string
    senderId?: string | null
    characterId?: string | null
    content: string
    messageType?: string
    replyToId?: string | null
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatMessageCreateOrConnectWithoutRepliesInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutRepliesInput, ChatMessageUncheckedCreateWithoutRepliesInput>
  }

  export type ChatMessageCreateWithoutReplyToInput = {
    id?: string
    content: string
    messageType?: string
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    room: ChatRoomCreateNestedOneWithoutMessagesInput
    sender?: UserCreateNestedOneWithoutChatMessagesInput
    character?: CharacterCreateNestedOneWithoutChatMessagesInput
    replies?: ChatMessageCreateNestedManyWithoutReplyToInput
  }

  export type ChatMessageUncheckedCreateWithoutReplyToInput = {
    id?: string
    roomId: string
    senderId?: string | null
    characterId?: string | null
    content: string
    messageType?: string
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: ChatMessageUncheckedCreateNestedManyWithoutReplyToInput
  }

  export type ChatMessageCreateOrConnectWithoutReplyToInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutReplyToInput, ChatMessageUncheckedCreateWithoutReplyToInput>
  }

  export type ChatMessageCreateManyReplyToInputEnvelope = {
    data: ChatMessageCreateManyReplyToInput | ChatMessageCreateManyReplyToInput[]
  }

  export type ChatRoomUpsertWithoutMessagesInput = {
    update: XOR<ChatRoomUpdateWithoutMessagesInput, ChatRoomUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    where?: ChatRoomWhereInput
  }

  export type ChatRoomUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatRoomWhereInput
    data: XOR<ChatRoomUpdateWithoutMessagesInput, ChatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatRoomUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    allowSpectators?: BoolFieldUpdateOperationsInput | boolean
    roomType?: StringFieldUpdateOperationsInput | string
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedChatRoomsNestedInput
    participants?: ChatParticipantUpdateManyWithoutRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    allowSpectators?: BoolFieldUpdateOperationsInput | boolean
    roomType?: StringFieldUpdateOperationsInput | string
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: ChatParticipantUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type UserUpsertWithoutChatMessagesInput = {
    update: XOR<UserUpdateWithoutChatMessagesInput, UserUncheckedUpdateWithoutChatMessagesInput>
    create: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChatMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChatMessagesInput, UserUncheckedUpdateWithoutChatMessagesInput>
  }

  export type UserUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutUserNestedInput
    workflows?: WorkflowUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CharacterUpsertWithoutChatMessagesInput = {
    update: XOR<CharacterUpdateWithoutChatMessagesInput, CharacterUncheckedUpdateWithoutChatMessagesInput>
    create: XOR<CharacterCreateWithoutChatMessagesInput, CharacterUncheckedCreateWithoutChatMessagesInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutChatMessagesInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutChatMessagesInput, CharacterUncheckedUpdateWithoutChatMessagesInput>
  }

  export type CharacterUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCharactersNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutCharacterNestedInput
    messages?: MessageUpdateManyWithoutCharacterNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutCharacterNestedInput
    ratings?: CharacterRatingUpdateManyWithoutCharacterNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutCharacterNestedInput
    messages?: MessageUncheckedUpdateManyWithoutCharacterNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutCharacterNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutCharacterNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type ChatMessageUpsertWithoutRepliesInput = {
    update: XOR<ChatMessageUpdateWithoutRepliesInput, ChatMessageUncheckedUpdateWithoutRepliesInput>
    create: XOR<ChatMessageCreateWithoutRepliesInput, ChatMessageUncheckedCreateWithoutRepliesInput>
    where?: ChatMessageWhereInput
  }

  export type ChatMessageUpdateToOneWithWhereWithoutRepliesInput = {
    where?: ChatMessageWhereInput
    data: XOR<ChatMessageUpdateWithoutRepliesInput, ChatMessageUncheckedUpdateWithoutRepliesInput>
  }

  export type ChatMessageUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneWithoutChatMessagesNestedInput
    character?: CharacterUpdateOneWithoutChatMessagesNestedInput
    replyTo?: ChatMessageUpdateOneWithoutRepliesNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutReplyToInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutReplyToInput, ChatMessageUncheckedUpdateWithoutReplyToInput>
    create: XOR<ChatMessageCreateWithoutReplyToInput, ChatMessageUncheckedCreateWithoutReplyToInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutReplyToInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutReplyToInput, ChatMessageUncheckedUpdateWithoutReplyToInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutReplyToInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutReplyToInput>
  }

  export type UserCreateWithoutTransactionsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    workflows?: WorkflowCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutTransactionsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomUncheckedCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingUncheckedCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
  }

  export type UserUpsertWithoutTransactionsInput = {
    update: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ChatSessionCreateWithoutMessagesInput = {
    id?: string
    title?: string | null
    model?: string
    presetId?: string | null
    worldInfoId?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isArchived?: boolean
    isPinned?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutChatSessionsInput
    character: CharacterCreateNestedOneWithoutChatSessionsInput
  }

  export type ChatSessionUncheckedCreateWithoutMessagesInput = {
    id?: string
    userId: string
    characterId: string
    title?: string | null
    model?: string
    presetId?: string | null
    worldInfoId?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isArchived?: boolean
    isPinned?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatSessionCreateOrConnectWithoutMessagesInput = {
    where: ChatSessionWhereUniqueInput
    create: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutMessagesInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    workflows?: WorkflowCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutMessagesInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomUncheckedCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingUncheckedCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type CharacterCreateWithoutMessagesInput = {
    id?: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCharactersInput
    chatSessions?: ChatSessionCreateNestedManyWithoutCharacterInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutCharacterInput
    ratings?: CharacterRatingCreateNestedManyWithoutCharacterInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutCharacterInput
    chatMessages?: ChatMessageCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutMessagesInput = {
    id?: string
    creatorId: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutCharacterInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutCharacterInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutCharacterInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutCharacterInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutMessagesInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutMessagesInput, CharacterUncheckedCreateWithoutMessagesInput>
  }

  export type ChatSessionUpsertWithoutMessagesInput = {
    update: XOR<ChatSessionUpdateWithoutMessagesInput, ChatSessionUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    where?: ChatSessionWhereInput
  }

  export type ChatSessionUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatSessionWhereInput
    data: XOR<ChatSessionUpdateWithoutMessagesInput, ChatSessionUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatSessionUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    model?: StringFieldUpdateOperationsInput | string
    presetId?: NullableStringFieldUpdateOperationsInput | string | null
    worldInfoId?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChatSessionsNestedInput
    character?: CharacterUpdateOneRequiredWithoutChatSessionsNestedInput
  }

  export type ChatSessionUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    model?: StringFieldUpdateOperationsInput | string
    presetId?: NullableStringFieldUpdateOperationsInput | string | null
    worldInfoId?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CharacterUpsertWithoutMessagesInput = {
    update: XOR<CharacterUpdateWithoutMessagesInput, CharacterUncheckedUpdateWithoutMessagesInput>
    create: XOR<CharacterCreateWithoutMessagesInput, CharacterUncheckedCreateWithoutMessagesInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutMessagesInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutMessagesInput, CharacterUncheckedUpdateWithoutMessagesInput>
  }

  export type CharacterUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCharactersNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutCharacterNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutCharacterNestedInput
    ratings?: CharacterRatingUpdateManyWithoutCharacterNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutCharacterNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutCharacterNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutCharacterNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutCharacterNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutCharacterNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type UserCreateWithoutFavoritesInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    workflows?: WorkflowCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutFavoritesInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomUncheckedCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingUncheckedCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutFavoritesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
  }

  export type CharacterCreateWithoutFavoritesInput = {
    id?: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCharactersInput
    chatSessions?: ChatSessionCreateNestedManyWithoutCharacterInput
    messages?: MessageCreateNestedManyWithoutCharacterInput
    ratings?: CharacterRatingCreateNestedManyWithoutCharacterInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutCharacterInput
    chatMessages?: ChatMessageCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutFavoritesInput = {
    id?: string
    creatorId: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutCharacterInput
    messages?: MessageUncheckedCreateNestedManyWithoutCharacterInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutCharacterInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutCharacterInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutFavoritesInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutFavoritesInput, CharacterUncheckedCreateWithoutFavoritesInput>
  }

  export type UserUpsertWithoutFavoritesInput = {
    update: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoritesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CharacterUpsertWithoutFavoritesInput = {
    update: XOR<CharacterUpdateWithoutFavoritesInput, CharacterUncheckedUpdateWithoutFavoritesInput>
    create: XOR<CharacterCreateWithoutFavoritesInput, CharacterUncheckedCreateWithoutFavoritesInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutFavoritesInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutFavoritesInput, CharacterUncheckedUpdateWithoutFavoritesInput>
  }

  export type CharacterUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCharactersNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutCharacterNestedInput
    messages?: MessageUpdateManyWithoutCharacterNestedInput
    ratings?: CharacterRatingUpdateManyWithoutCharacterNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutCharacterNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutCharacterNestedInput
    messages?: MessageUncheckedUpdateManyWithoutCharacterNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutCharacterNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutCharacterNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type UserCreateWithoutRatingsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    workflows?: WorkflowCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutRatingsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomUncheckedCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingUncheckedCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutRatingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
  }

  export type CharacterCreateWithoutRatingsInput = {
    id?: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCharactersInput
    chatSessions?: ChatSessionCreateNestedManyWithoutCharacterInput
    messages?: MessageCreateNestedManyWithoutCharacterInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutCharacterInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutCharacterInput
    chatMessages?: ChatMessageCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutRatingsInput = {
    id?: string
    creatorId: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutCharacterInput
    messages?: MessageUncheckedCreateNestedManyWithoutCharacterInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutCharacterInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutCharacterInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutRatingsInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutRatingsInput, CharacterUncheckedCreateWithoutRatingsInput>
  }

  export type UserUpsertWithoutRatingsInput = {
    update: XOR<UserUpdateWithoutRatingsInput, UserUncheckedUpdateWithoutRatingsInput>
    create: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRatingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRatingsInput, UserUncheckedUpdateWithoutRatingsInput>
  }

  export type UserUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CharacterUpsertWithoutRatingsInput = {
    update: XOR<CharacterUpdateWithoutRatingsInput, CharacterUncheckedUpdateWithoutRatingsInput>
    create: XOR<CharacterCreateWithoutRatingsInput, CharacterUncheckedCreateWithoutRatingsInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutRatingsInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutRatingsInput, CharacterUncheckedUpdateWithoutRatingsInput>
  }

  export type CharacterUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCharactersNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutCharacterNestedInput
    messages?: MessageUpdateManyWithoutCharacterNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutCharacterNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutCharacterNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutCharacterNestedInput
    messages?: MessageUncheckedUpdateManyWithoutCharacterNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutCharacterNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutCharacterNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type UserCreateWithoutWorkflowsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    workflowInstances?: WorkflowInstanceCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutWorkflowsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomUncheckedCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    workflowInstances?: WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingUncheckedCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutWorkflowsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkflowsInput, UserUncheckedCreateWithoutWorkflowsInput>
  }

  export type WorkflowInstanceCreateWithoutWorkflowInput = {
    id?: string
    name?: string | null
    status?: string
    priority?: string
    input?: string | null
    output?: string | null
    variables?: string
    currentStep?: string | null
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    failureReason?: string | null
    retryCount?: number
    maxRetries?: number
    timeout?: number | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    executor: UserCreateNestedOneWithoutWorkflowInstancesInput
    executions?: StepExecutionCreateNestedManyWithoutInstanceInput
    logs?: WorkflowLogCreateNestedManyWithoutInstanceInput
  }

  export type WorkflowInstanceUncheckedCreateWithoutWorkflowInput = {
    id?: string
    executorId: string
    name?: string | null
    status?: string
    priority?: string
    input?: string | null
    output?: string | null
    variables?: string
    currentStep?: string | null
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    failureReason?: string | null
    retryCount?: number
    maxRetries?: number
    timeout?: number | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    executions?: StepExecutionUncheckedCreateNestedManyWithoutInstanceInput
    logs?: WorkflowLogUncheckedCreateNestedManyWithoutInstanceInput
  }

  export type WorkflowInstanceCreateOrConnectWithoutWorkflowInput = {
    where: WorkflowInstanceWhereUniqueInput
    create: XOR<WorkflowInstanceCreateWithoutWorkflowInput, WorkflowInstanceUncheckedCreateWithoutWorkflowInput>
  }

  export type WorkflowInstanceCreateManyWorkflowInputEnvelope = {
    data: WorkflowInstanceCreateManyWorkflowInput | WorkflowInstanceCreateManyWorkflowInput[]
  }

  export type WorkflowTemplateCreateWithoutWorkflowInput = {
    id?: string
    name: string
    description?: string | null
    category?: string
    tags?: string
    isOfficial?: boolean
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowTemplateUncheckedCreateWithoutWorkflowInput = {
    id?: string
    name: string
    description?: string | null
    category?: string
    tags?: string
    isOfficial?: boolean
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowTemplateCreateOrConnectWithoutWorkflowInput = {
    where: WorkflowTemplateWhereUniqueInput
    create: XOR<WorkflowTemplateCreateWithoutWorkflowInput, WorkflowTemplateUncheckedCreateWithoutWorkflowInput>
  }

  export type WorkflowTemplateCreateManyWorkflowInputEnvelope = {
    data: WorkflowTemplateCreateManyWorkflowInput | WorkflowTemplateCreateManyWorkflowInput[]
  }

  export type WorkflowRatingCreateWithoutWorkflowInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWorkflowRatingsInput
  }

  export type WorkflowRatingUncheckedCreateWithoutWorkflowInput = {
    id?: string
    userId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowRatingCreateOrConnectWithoutWorkflowInput = {
    where: WorkflowRatingWhereUniqueInput
    create: XOR<WorkflowRatingCreateWithoutWorkflowInput, WorkflowRatingUncheckedCreateWithoutWorkflowInput>
  }

  export type WorkflowRatingCreateManyWorkflowInputEnvelope = {
    data: WorkflowRatingCreateManyWorkflowInput | WorkflowRatingCreateManyWorkflowInput[]
  }

  export type ScheduledTaskCreateWithoutWorkflowInput = {
    id?: string
    name: string
    cronExpression: string
    timezone?: string
    isEnabled?: boolean
    input?: string | null
    lastRunAt?: Date | string | null
    nextRunAt?: Date | string | null
    runCount?: number
    failureCount?: number
    maxRuns?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutScheduledTasksInput
  }

  export type ScheduledTaskUncheckedCreateWithoutWorkflowInput = {
    id?: string
    name: string
    creatorId: string
    cronExpression: string
    timezone?: string
    isEnabled?: boolean
    input?: string | null
    lastRunAt?: Date | string | null
    nextRunAt?: Date | string | null
    runCount?: number
    failureCount?: number
    maxRuns?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduledTaskCreateOrConnectWithoutWorkflowInput = {
    where: ScheduledTaskWhereUniqueInput
    create: XOR<ScheduledTaskCreateWithoutWorkflowInput, ScheduledTaskUncheckedCreateWithoutWorkflowInput>
  }

  export type ScheduledTaskCreateManyWorkflowInputEnvelope = {
    data: ScheduledTaskCreateManyWorkflowInput | ScheduledTaskCreateManyWorkflowInput[]
  }

  export type UserUpsertWithoutWorkflowsInput = {
    update: XOR<UserUpdateWithoutWorkflowsInput, UserUncheckedUpdateWithoutWorkflowsInput>
    create: XOR<UserCreateWithoutWorkflowsInput, UserUncheckedCreateWithoutWorkflowsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkflowsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkflowsInput, UserUncheckedUpdateWithoutWorkflowsInput>
  }

  export type UserUpdateWithoutWorkflowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    workflowInstances?: WorkflowInstanceUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkflowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    workflowInstances?: WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type WorkflowInstanceUpsertWithWhereUniqueWithoutWorkflowInput = {
    where: WorkflowInstanceWhereUniqueInput
    update: XOR<WorkflowInstanceUpdateWithoutWorkflowInput, WorkflowInstanceUncheckedUpdateWithoutWorkflowInput>
    create: XOR<WorkflowInstanceCreateWithoutWorkflowInput, WorkflowInstanceUncheckedCreateWithoutWorkflowInput>
  }

  export type WorkflowInstanceUpdateWithWhereUniqueWithoutWorkflowInput = {
    where: WorkflowInstanceWhereUniqueInput
    data: XOR<WorkflowInstanceUpdateWithoutWorkflowInput, WorkflowInstanceUncheckedUpdateWithoutWorkflowInput>
  }

  export type WorkflowInstanceUpdateManyWithWhereWithoutWorkflowInput = {
    where: WorkflowInstanceScalarWhereInput
    data: XOR<WorkflowInstanceUpdateManyMutationInput, WorkflowInstanceUncheckedUpdateManyWithoutWorkflowInput>
  }

  export type WorkflowTemplateUpsertWithWhereUniqueWithoutWorkflowInput = {
    where: WorkflowTemplateWhereUniqueInput
    update: XOR<WorkflowTemplateUpdateWithoutWorkflowInput, WorkflowTemplateUncheckedUpdateWithoutWorkflowInput>
    create: XOR<WorkflowTemplateCreateWithoutWorkflowInput, WorkflowTemplateUncheckedCreateWithoutWorkflowInput>
  }

  export type WorkflowTemplateUpdateWithWhereUniqueWithoutWorkflowInput = {
    where: WorkflowTemplateWhereUniqueInput
    data: XOR<WorkflowTemplateUpdateWithoutWorkflowInput, WorkflowTemplateUncheckedUpdateWithoutWorkflowInput>
  }

  export type WorkflowTemplateUpdateManyWithWhereWithoutWorkflowInput = {
    where: WorkflowTemplateScalarWhereInput
    data: XOR<WorkflowTemplateUpdateManyMutationInput, WorkflowTemplateUncheckedUpdateManyWithoutWorkflowInput>
  }

  export type WorkflowTemplateScalarWhereInput = {
    AND?: WorkflowTemplateScalarWhereInput | WorkflowTemplateScalarWhereInput[]
    OR?: WorkflowTemplateScalarWhereInput[]
    NOT?: WorkflowTemplateScalarWhereInput | WorkflowTemplateScalarWhereInput[]
    id?: StringFilter<"WorkflowTemplate"> | string
    workflowId?: StringFilter<"WorkflowTemplate"> | string
    name?: StringFilter<"WorkflowTemplate"> | string
    description?: StringNullableFilter<"WorkflowTemplate"> | string | null
    category?: StringFilter<"WorkflowTemplate"> | string
    tags?: StringFilter<"WorkflowTemplate"> | string
    isOfficial?: BoolFilter<"WorkflowTemplate"> | boolean
    usageCount?: IntFilter<"WorkflowTemplate"> | number
    rating?: FloatFilter<"WorkflowTemplate"> | number
    ratingCount?: IntFilter<"WorkflowTemplate"> | number
    createdAt?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"WorkflowTemplate"> | Date | string
  }

  export type WorkflowRatingUpsertWithWhereUniqueWithoutWorkflowInput = {
    where: WorkflowRatingWhereUniqueInput
    update: XOR<WorkflowRatingUpdateWithoutWorkflowInput, WorkflowRatingUncheckedUpdateWithoutWorkflowInput>
    create: XOR<WorkflowRatingCreateWithoutWorkflowInput, WorkflowRatingUncheckedCreateWithoutWorkflowInput>
  }

  export type WorkflowRatingUpdateWithWhereUniqueWithoutWorkflowInput = {
    where: WorkflowRatingWhereUniqueInput
    data: XOR<WorkflowRatingUpdateWithoutWorkflowInput, WorkflowRatingUncheckedUpdateWithoutWorkflowInput>
  }

  export type WorkflowRatingUpdateManyWithWhereWithoutWorkflowInput = {
    where: WorkflowRatingScalarWhereInput
    data: XOR<WorkflowRatingUpdateManyMutationInput, WorkflowRatingUncheckedUpdateManyWithoutWorkflowInput>
  }

  export type ScheduledTaskUpsertWithWhereUniqueWithoutWorkflowInput = {
    where: ScheduledTaskWhereUniqueInput
    update: XOR<ScheduledTaskUpdateWithoutWorkflowInput, ScheduledTaskUncheckedUpdateWithoutWorkflowInput>
    create: XOR<ScheduledTaskCreateWithoutWorkflowInput, ScheduledTaskUncheckedCreateWithoutWorkflowInput>
  }

  export type ScheduledTaskUpdateWithWhereUniqueWithoutWorkflowInput = {
    where: ScheduledTaskWhereUniqueInput
    data: XOR<ScheduledTaskUpdateWithoutWorkflowInput, ScheduledTaskUncheckedUpdateWithoutWorkflowInput>
  }

  export type ScheduledTaskUpdateManyWithWhereWithoutWorkflowInput = {
    where: ScheduledTaskScalarWhereInput
    data: XOR<ScheduledTaskUpdateManyMutationInput, ScheduledTaskUncheckedUpdateManyWithoutWorkflowInput>
  }

  export type WorkflowCreateWithoutInstancesInput = {
    id?: string
    name: string
    description?: string | null
    version?: string
    status?: string
    isTemplate?: boolean
    isPublic?: boolean
    category?: string
    tags?: string
    definition: string
    variables?: string
    settings?: string
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutWorkflowsInput
    templates?: WorkflowTemplateCreateNestedManyWithoutWorkflowInput
    ratings?: WorkflowRatingCreateNestedManyWithoutWorkflowInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowUncheckedCreateWithoutInstancesInput = {
    id?: string
    name: string
    description?: string | null
    creatorId: string
    version?: string
    status?: string
    isTemplate?: boolean
    isPublic?: boolean
    category?: string
    tags?: string
    definition: string
    variables?: string
    settings?: string
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    templates?: WorkflowTemplateUncheckedCreateNestedManyWithoutWorkflowInput
    ratings?: WorkflowRatingUncheckedCreateNestedManyWithoutWorkflowInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowCreateOrConnectWithoutInstancesInput = {
    where: WorkflowWhereUniqueInput
    create: XOR<WorkflowCreateWithoutInstancesInput, WorkflowUncheckedCreateWithoutInstancesInput>
  }

  export type UserCreateWithoutWorkflowInstancesInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    workflows?: WorkflowCreateNestedManyWithoutCreatorInput
    workflowRatings?: WorkflowRatingCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutWorkflowInstancesInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomUncheckedCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutCreatorInput
    workflowRatings?: WorkflowRatingUncheckedCreateNestedManyWithoutUserInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutWorkflowInstancesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkflowInstancesInput, UserUncheckedCreateWithoutWorkflowInstancesInput>
  }

  export type StepExecutionCreateWithoutInstanceInput = {
    id?: string
    stepId: string
    stepType: string
    status?: string
    input?: string | null
    output?: string | null
    error?: string | null
    duration?: number
    retryCount?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StepExecutionUncheckedCreateWithoutInstanceInput = {
    id?: string
    stepId: string
    stepType: string
    status?: string
    input?: string | null
    output?: string | null
    error?: string | null
    duration?: number
    retryCount?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StepExecutionCreateOrConnectWithoutInstanceInput = {
    where: StepExecutionWhereUniqueInput
    create: XOR<StepExecutionCreateWithoutInstanceInput, StepExecutionUncheckedCreateWithoutInstanceInput>
  }

  export type StepExecutionCreateManyInstanceInputEnvelope = {
    data: StepExecutionCreateManyInstanceInput | StepExecutionCreateManyInstanceInput[]
  }

  export type WorkflowLogCreateWithoutInstanceInput = {
    id?: string
    level?: string
    message: string
    data?: string | null
    stepId?: string | null
    timestamp?: Date | string
  }

  export type WorkflowLogUncheckedCreateWithoutInstanceInput = {
    id?: string
    level?: string
    message: string
    data?: string | null
    stepId?: string | null
    timestamp?: Date | string
  }

  export type WorkflowLogCreateOrConnectWithoutInstanceInput = {
    where: WorkflowLogWhereUniqueInput
    create: XOR<WorkflowLogCreateWithoutInstanceInput, WorkflowLogUncheckedCreateWithoutInstanceInput>
  }

  export type WorkflowLogCreateManyInstanceInputEnvelope = {
    data: WorkflowLogCreateManyInstanceInput | WorkflowLogCreateManyInstanceInput[]
  }

  export type WorkflowUpsertWithoutInstancesInput = {
    update: XOR<WorkflowUpdateWithoutInstancesInput, WorkflowUncheckedUpdateWithoutInstancesInput>
    create: XOR<WorkflowCreateWithoutInstancesInput, WorkflowUncheckedCreateWithoutInstancesInput>
    where?: WorkflowWhereInput
  }

  export type WorkflowUpdateToOneWithWhereWithoutInstancesInput = {
    where?: WorkflowWhereInput
    data: XOR<WorkflowUpdateWithoutInstancesInput, WorkflowUncheckedUpdateWithoutInstancesInput>
  }

  export type WorkflowUpdateWithoutInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    variables?: StringFieldUpdateOperationsInput | string
    settings?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutWorkflowsNestedInput
    templates?: WorkflowTemplateUpdateManyWithoutWorkflowNestedInput
    ratings?: WorkflowRatingUpdateManyWithoutWorkflowNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutWorkflowNestedInput
  }

  export type WorkflowUncheckedUpdateWithoutInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    variables?: StringFieldUpdateOperationsInput | string
    settings?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    templates?: WorkflowTemplateUncheckedUpdateManyWithoutWorkflowNestedInput
    ratings?: WorkflowRatingUncheckedUpdateManyWithoutWorkflowNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutWorkflowNestedInput
  }

  export type UserUpsertWithoutWorkflowInstancesInput = {
    update: XOR<UserUpdateWithoutWorkflowInstancesInput, UserUncheckedUpdateWithoutWorkflowInstancesInput>
    create: XOR<UserCreateWithoutWorkflowInstancesInput, UserUncheckedCreateWithoutWorkflowInstancesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkflowInstancesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkflowInstancesInput, UserUncheckedUpdateWithoutWorkflowInstancesInput>
  }

  export type UserUpdateWithoutWorkflowInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUpdateManyWithoutCreatorNestedInput
    workflowRatings?: WorkflowRatingUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkflowInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutCreatorNestedInput
    workflowRatings?: WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type StepExecutionUpsertWithWhereUniqueWithoutInstanceInput = {
    where: StepExecutionWhereUniqueInput
    update: XOR<StepExecutionUpdateWithoutInstanceInput, StepExecutionUncheckedUpdateWithoutInstanceInput>
    create: XOR<StepExecutionCreateWithoutInstanceInput, StepExecutionUncheckedCreateWithoutInstanceInput>
  }

  export type StepExecutionUpdateWithWhereUniqueWithoutInstanceInput = {
    where: StepExecutionWhereUniqueInput
    data: XOR<StepExecutionUpdateWithoutInstanceInput, StepExecutionUncheckedUpdateWithoutInstanceInput>
  }

  export type StepExecutionUpdateManyWithWhereWithoutInstanceInput = {
    where: StepExecutionScalarWhereInput
    data: XOR<StepExecutionUpdateManyMutationInput, StepExecutionUncheckedUpdateManyWithoutInstanceInput>
  }

  export type StepExecutionScalarWhereInput = {
    AND?: StepExecutionScalarWhereInput | StepExecutionScalarWhereInput[]
    OR?: StepExecutionScalarWhereInput[]
    NOT?: StepExecutionScalarWhereInput | StepExecutionScalarWhereInput[]
    id?: StringFilter<"StepExecution"> | string
    instanceId?: StringFilter<"StepExecution"> | string
    stepId?: StringFilter<"StepExecution"> | string
    stepType?: StringFilter<"StepExecution"> | string
    status?: StringFilter<"StepExecution"> | string
    input?: StringNullableFilter<"StepExecution"> | string | null
    output?: StringNullableFilter<"StepExecution"> | string | null
    error?: StringNullableFilter<"StepExecution"> | string | null
    duration?: IntFilter<"StepExecution"> | number
    retryCount?: IntFilter<"StepExecution"> | number
    startedAt?: DateTimeNullableFilter<"StepExecution"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"StepExecution"> | Date | string | null
    metadata?: StringFilter<"StepExecution"> | string
    createdAt?: DateTimeFilter<"StepExecution"> | Date | string
    updatedAt?: DateTimeFilter<"StepExecution"> | Date | string
  }

  export type WorkflowLogUpsertWithWhereUniqueWithoutInstanceInput = {
    where: WorkflowLogWhereUniqueInput
    update: XOR<WorkflowLogUpdateWithoutInstanceInput, WorkflowLogUncheckedUpdateWithoutInstanceInput>
    create: XOR<WorkflowLogCreateWithoutInstanceInput, WorkflowLogUncheckedCreateWithoutInstanceInput>
  }

  export type WorkflowLogUpdateWithWhereUniqueWithoutInstanceInput = {
    where: WorkflowLogWhereUniqueInput
    data: XOR<WorkflowLogUpdateWithoutInstanceInput, WorkflowLogUncheckedUpdateWithoutInstanceInput>
  }

  export type WorkflowLogUpdateManyWithWhereWithoutInstanceInput = {
    where: WorkflowLogScalarWhereInput
    data: XOR<WorkflowLogUpdateManyMutationInput, WorkflowLogUncheckedUpdateManyWithoutInstanceInput>
  }

  export type WorkflowLogScalarWhereInput = {
    AND?: WorkflowLogScalarWhereInput | WorkflowLogScalarWhereInput[]
    OR?: WorkflowLogScalarWhereInput[]
    NOT?: WorkflowLogScalarWhereInput | WorkflowLogScalarWhereInput[]
    id?: StringFilter<"WorkflowLog"> | string
    instanceId?: StringFilter<"WorkflowLog"> | string
    level?: StringFilter<"WorkflowLog"> | string
    message?: StringFilter<"WorkflowLog"> | string
    data?: StringNullableFilter<"WorkflowLog"> | string | null
    stepId?: StringNullableFilter<"WorkflowLog"> | string | null
    timestamp?: DateTimeFilter<"WorkflowLog"> | Date | string
  }

  export type WorkflowInstanceCreateWithoutExecutionsInput = {
    id?: string
    name?: string | null
    status?: string
    priority?: string
    input?: string | null
    output?: string | null
    variables?: string
    currentStep?: string | null
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    failureReason?: string | null
    retryCount?: number
    maxRetries?: number
    timeout?: number | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow: WorkflowCreateNestedOneWithoutInstancesInput
    executor: UserCreateNestedOneWithoutWorkflowInstancesInput
    logs?: WorkflowLogCreateNestedManyWithoutInstanceInput
  }

  export type WorkflowInstanceUncheckedCreateWithoutExecutionsInput = {
    id?: string
    workflowId: string
    executorId: string
    name?: string | null
    status?: string
    priority?: string
    input?: string | null
    output?: string | null
    variables?: string
    currentStep?: string | null
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    failureReason?: string | null
    retryCount?: number
    maxRetries?: number
    timeout?: number | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    logs?: WorkflowLogUncheckedCreateNestedManyWithoutInstanceInput
  }

  export type WorkflowInstanceCreateOrConnectWithoutExecutionsInput = {
    where: WorkflowInstanceWhereUniqueInput
    create: XOR<WorkflowInstanceCreateWithoutExecutionsInput, WorkflowInstanceUncheckedCreateWithoutExecutionsInput>
  }

  export type WorkflowInstanceUpsertWithoutExecutionsInput = {
    update: XOR<WorkflowInstanceUpdateWithoutExecutionsInput, WorkflowInstanceUncheckedUpdateWithoutExecutionsInput>
    create: XOR<WorkflowInstanceCreateWithoutExecutionsInput, WorkflowInstanceUncheckedCreateWithoutExecutionsInput>
    where?: WorkflowInstanceWhereInput
  }

  export type WorkflowInstanceUpdateToOneWithWhereWithoutExecutionsInput = {
    where?: WorkflowInstanceWhereInput
    data: XOR<WorkflowInstanceUpdateWithoutExecutionsInput, WorkflowInstanceUncheckedUpdateWithoutExecutionsInput>
  }

  export type WorkflowInstanceUpdateWithoutExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: StringFieldUpdateOperationsInput | string
    currentStep?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: WorkflowUpdateOneRequiredWithoutInstancesNestedInput
    executor?: UserUpdateOneRequiredWithoutWorkflowInstancesNestedInput
    logs?: WorkflowLogUpdateManyWithoutInstanceNestedInput
  }

  export type WorkflowInstanceUncheckedUpdateWithoutExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    executorId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: StringFieldUpdateOperationsInput | string
    currentStep?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: WorkflowLogUncheckedUpdateManyWithoutInstanceNestedInput
  }

  export type WorkflowInstanceCreateWithoutLogsInput = {
    id?: string
    name?: string | null
    status?: string
    priority?: string
    input?: string | null
    output?: string | null
    variables?: string
    currentStep?: string | null
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    failureReason?: string | null
    retryCount?: number
    maxRetries?: number
    timeout?: number | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow: WorkflowCreateNestedOneWithoutInstancesInput
    executor: UserCreateNestedOneWithoutWorkflowInstancesInput
    executions?: StepExecutionCreateNestedManyWithoutInstanceInput
  }

  export type WorkflowInstanceUncheckedCreateWithoutLogsInput = {
    id?: string
    workflowId: string
    executorId: string
    name?: string | null
    status?: string
    priority?: string
    input?: string | null
    output?: string | null
    variables?: string
    currentStep?: string | null
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    failureReason?: string | null
    retryCount?: number
    maxRetries?: number
    timeout?: number | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    executions?: StepExecutionUncheckedCreateNestedManyWithoutInstanceInput
  }

  export type WorkflowInstanceCreateOrConnectWithoutLogsInput = {
    where: WorkflowInstanceWhereUniqueInput
    create: XOR<WorkflowInstanceCreateWithoutLogsInput, WorkflowInstanceUncheckedCreateWithoutLogsInput>
  }

  export type WorkflowInstanceUpsertWithoutLogsInput = {
    update: XOR<WorkflowInstanceUpdateWithoutLogsInput, WorkflowInstanceUncheckedUpdateWithoutLogsInput>
    create: XOR<WorkflowInstanceCreateWithoutLogsInput, WorkflowInstanceUncheckedCreateWithoutLogsInput>
    where?: WorkflowInstanceWhereInput
  }

  export type WorkflowInstanceUpdateToOneWithWhereWithoutLogsInput = {
    where?: WorkflowInstanceWhereInput
    data: XOR<WorkflowInstanceUpdateWithoutLogsInput, WorkflowInstanceUncheckedUpdateWithoutLogsInput>
  }

  export type WorkflowInstanceUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: StringFieldUpdateOperationsInput | string
    currentStep?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: WorkflowUpdateOneRequiredWithoutInstancesNestedInput
    executor?: UserUpdateOneRequiredWithoutWorkflowInstancesNestedInput
    executions?: StepExecutionUpdateManyWithoutInstanceNestedInput
  }

  export type WorkflowInstanceUncheckedUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    executorId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: StringFieldUpdateOperationsInput | string
    currentStep?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    executions?: StepExecutionUncheckedUpdateManyWithoutInstanceNestedInput
  }

  export type WorkflowCreateWithoutTemplatesInput = {
    id?: string
    name: string
    description?: string | null
    version?: string
    status?: string
    isTemplate?: boolean
    isPublic?: boolean
    category?: string
    tags?: string
    definition: string
    variables?: string
    settings?: string
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutWorkflowsInput
    instances?: WorkflowInstanceCreateNestedManyWithoutWorkflowInput
    ratings?: WorkflowRatingCreateNestedManyWithoutWorkflowInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowUncheckedCreateWithoutTemplatesInput = {
    id?: string
    name: string
    description?: string | null
    creatorId: string
    version?: string
    status?: string
    isTemplate?: boolean
    isPublic?: boolean
    category?: string
    tags?: string
    definition: string
    variables?: string
    settings?: string
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: WorkflowInstanceUncheckedCreateNestedManyWithoutWorkflowInput
    ratings?: WorkflowRatingUncheckedCreateNestedManyWithoutWorkflowInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowCreateOrConnectWithoutTemplatesInput = {
    where: WorkflowWhereUniqueInput
    create: XOR<WorkflowCreateWithoutTemplatesInput, WorkflowUncheckedCreateWithoutTemplatesInput>
  }

  export type WorkflowUpsertWithoutTemplatesInput = {
    update: XOR<WorkflowUpdateWithoutTemplatesInput, WorkflowUncheckedUpdateWithoutTemplatesInput>
    create: XOR<WorkflowCreateWithoutTemplatesInput, WorkflowUncheckedCreateWithoutTemplatesInput>
    where?: WorkflowWhereInput
  }

  export type WorkflowUpdateToOneWithWhereWithoutTemplatesInput = {
    where?: WorkflowWhereInput
    data: XOR<WorkflowUpdateWithoutTemplatesInput, WorkflowUncheckedUpdateWithoutTemplatesInput>
  }

  export type WorkflowUpdateWithoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    variables?: StringFieldUpdateOperationsInput | string
    settings?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutWorkflowsNestedInput
    instances?: WorkflowInstanceUpdateManyWithoutWorkflowNestedInput
    ratings?: WorkflowRatingUpdateManyWithoutWorkflowNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutWorkflowNestedInput
  }

  export type WorkflowUncheckedUpdateWithoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    variables?: StringFieldUpdateOperationsInput | string
    settings?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: WorkflowInstanceUncheckedUpdateManyWithoutWorkflowNestedInput
    ratings?: WorkflowRatingUncheckedUpdateManyWithoutWorkflowNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutWorkflowNestedInput
  }

  export type WorkflowCreateWithoutRatingsInput = {
    id?: string
    name: string
    description?: string | null
    version?: string
    status?: string
    isTemplate?: boolean
    isPublic?: boolean
    category?: string
    tags?: string
    definition: string
    variables?: string
    settings?: string
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutWorkflowsInput
    instances?: WorkflowInstanceCreateNestedManyWithoutWorkflowInput
    templates?: WorkflowTemplateCreateNestedManyWithoutWorkflowInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowUncheckedCreateWithoutRatingsInput = {
    id?: string
    name: string
    description?: string | null
    creatorId: string
    version?: string
    status?: string
    isTemplate?: boolean
    isPublic?: boolean
    category?: string
    tags?: string
    definition: string
    variables?: string
    settings?: string
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: WorkflowInstanceUncheckedCreateNestedManyWithoutWorkflowInput
    templates?: WorkflowTemplateUncheckedCreateNestedManyWithoutWorkflowInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowCreateOrConnectWithoutRatingsInput = {
    where: WorkflowWhereUniqueInput
    create: XOR<WorkflowCreateWithoutRatingsInput, WorkflowUncheckedCreateWithoutRatingsInput>
  }

  export type UserCreateWithoutWorkflowRatingsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    workflows?: WorkflowCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceCreateNestedManyWithoutExecutorInput
    scheduledTasks?: ScheduledTaskCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutWorkflowRatingsInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomUncheckedCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput
    scheduledTasks?: ScheduledTaskUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutWorkflowRatingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkflowRatingsInput, UserUncheckedCreateWithoutWorkflowRatingsInput>
  }

  export type WorkflowUpsertWithoutRatingsInput = {
    update: XOR<WorkflowUpdateWithoutRatingsInput, WorkflowUncheckedUpdateWithoutRatingsInput>
    create: XOR<WorkflowCreateWithoutRatingsInput, WorkflowUncheckedCreateWithoutRatingsInput>
    where?: WorkflowWhereInput
  }

  export type WorkflowUpdateToOneWithWhereWithoutRatingsInput = {
    where?: WorkflowWhereInput
    data: XOR<WorkflowUpdateWithoutRatingsInput, WorkflowUncheckedUpdateWithoutRatingsInput>
  }

  export type WorkflowUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    variables?: StringFieldUpdateOperationsInput | string
    settings?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutWorkflowsNestedInput
    instances?: WorkflowInstanceUpdateManyWithoutWorkflowNestedInput
    templates?: WorkflowTemplateUpdateManyWithoutWorkflowNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutWorkflowNestedInput
  }

  export type WorkflowUncheckedUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    variables?: StringFieldUpdateOperationsInput | string
    settings?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: WorkflowInstanceUncheckedUpdateManyWithoutWorkflowNestedInput
    templates?: WorkflowTemplateUncheckedUpdateManyWithoutWorkflowNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutWorkflowNestedInput
  }

  export type UserUpsertWithoutWorkflowRatingsInput = {
    update: XOR<UserUpdateWithoutWorkflowRatingsInput, UserUncheckedUpdateWithoutWorkflowRatingsInput>
    create: XOR<UserCreateWithoutWorkflowRatingsInput, UserUncheckedCreateWithoutWorkflowRatingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkflowRatingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkflowRatingsInput, UserUncheckedUpdateWithoutWorkflowRatingsInput>
  }

  export type UserUpdateWithoutWorkflowRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUpdateManyWithoutExecutorNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkflowRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type WorkflowCreateWithoutScheduledTasksInput = {
    id?: string
    name: string
    description?: string | null
    version?: string
    status?: string
    isTemplate?: boolean
    isPublic?: boolean
    category?: string
    tags?: string
    definition: string
    variables?: string
    settings?: string
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutWorkflowsInput
    instances?: WorkflowInstanceCreateNestedManyWithoutWorkflowInput
    templates?: WorkflowTemplateCreateNestedManyWithoutWorkflowInput
    ratings?: WorkflowRatingCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowUncheckedCreateWithoutScheduledTasksInput = {
    id?: string
    name: string
    description?: string | null
    creatorId: string
    version?: string
    status?: string
    isTemplate?: boolean
    isPublic?: boolean
    category?: string
    tags?: string
    definition: string
    variables?: string
    settings?: string
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: WorkflowInstanceUncheckedCreateNestedManyWithoutWorkflowInput
    templates?: WorkflowTemplateUncheckedCreateNestedManyWithoutWorkflowInput
    ratings?: WorkflowRatingUncheckedCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowCreateOrConnectWithoutScheduledTasksInput = {
    where: WorkflowWhereUniqueInput
    create: XOR<WorkflowCreateWithoutScheduledTasksInput, WorkflowUncheckedCreateWithoutScheduledTasksInput>
  }

  export type UserCreateWithoutScheduledTasksInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    workflows?: WorkflowCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutScheduledTasksInput = {
    id?: string
    username: string
    email: string
    passwordHash?: string | null
    avatar?: string | null
    bio?: string | null
    role?: string
    credits?: number
    subscriptionTier?: string
    subscriptionExpiresAt?: Date | string | null
    isActive?: boolean
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCreatorInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    favorites?: CharacterFavoriteUncheckedCreateNestedManyWithoutUserInput
    ratings?: CharacterRatingUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    ownedChatRooms?: ChatRoomUncheckedCreateNestedManyWithoutOwnerInput
    chatParticipants?: ChatParticipantUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutCreatorInput
    workflowInstances?: WorkflowInstanceUncheckedCreateNestedManyWithoutExecutorInput
    workflowRatings?: WorkflowRatingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutScheduledTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutScheduledTasksInput, UserUncheckedCreateWithoutScheduledTasksInput>
  }

  export type WorkflowUpsertWithoutScheduledTasksInput = {
    update: XOR<WorkflowUpdateWithoutScheduledTasksInput, WorkflowUncheckedUpdateWithoutScheduledTasksInput>
    create: XOR<WorkflowCreateWithoutScheduledTasksInput, WorkflowUncheckedCreateWithoutScheduledTasksInput>
    where?: WorkflowWhereInput
  }

  export type WorkflowUpdateToOneWithWhereWithoutScheduledTasksInput = {
    where?: WorkflowWhereInput
    data: XOR<WorkflowUpdateWithoutScheduledTasksInput, WorkflowUncheckedUpdateWithoutScheduledTasksInput>
  }

  export type WorkflowUpdateWithoutScheduledTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    variables?: StringFieldUpdateOperationsInput | string
    settings?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutWorkflowsNestedInput
    instances?: WorkflowInstanceUpdateManyWithoutWorkflowNestedInput
    templates?: WorkflowTemplateUpdateManyWithoutWorkflowNestedInput
    ratings?: WorkflowRatingUpdateManyWithoutWorkflowNestedInput
  }

  export type WorkflowUncheckedUpdateWithoutScheduledTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    variables?: StringFieldUpdateOperationsInput | string
    settings?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: WorkflowInstanceUncheckedUpdateManyWithoutWorkflowNestedInput
    templates?: WorkflowTemplateUncheckedUpdateManyWithoutWorkflowNestedInput
    ratings?: WorkflowRatingUncheckedUpdateManyWithoutWorkflowNestedInput
  }

  export type UserUpsertWithoutScheduledTasksInput = {
    update: XOR<UserUpdateWithoutScheduledTasksInput, UserUncheckedUpdateWithoutScheduledTasksInput>
    create: XOR<UserCreateWithoutScheduledTasksInput, UserUncheckedCreateWithoutScheduledTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutScheduledTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutScheduledTasksInput, UserUncheckedUpdateWithoutScheduledTasksInput>
  }

  export type UserUpdateWithoutScheduledTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutScheduledTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    subscriptionExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCreatorNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutUserNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    ownedChatRooms?: ChatRoomUncheckedUpdateManyWithoutOwnerNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutCreatorNestedInput
    workflowInstances?: WorkflowInstanceUncheckedUpdateManyWithoutExecutorNestedInput
    workflowRatings?: WorkflowRatingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CharacterCreateManyCreatorInput = {
    id?: string
    name: string
    description: string
    fullDescription?: string | null
    personality?: string | null
    backstory?: string | null
    speakingStyle?: string | null
    scenario?: string | null
    firstMessage?: string | null
    systemPrompt?: string | null
    exampleDialogs?: string | null
    avatar?: string | null
    coverImage?: string | null
    category?: string
    tags?: string
    language?: string
    model?: string
    temperature?: number
    maxTokens?: number
    isPublic?: boolean
    isNSFW?: boolean
    isFeatured?: boolean
    rating?: number
    ratingCount?: number
    chatCount?: number
    favoriteCount?: number
    importedFrom?: string | null
    version?: number
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatSessionCreateManyUserInput = {
    id?: string
    characterId: string
    title?: string | null
    model?: string
    presetId?: string | null
    worldInfoId?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isArchived?: boolean
    isPinned?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageCreateManyUserInput = {
    id?: string
    sessionId: string
    characterId?: string | null
    role: string
    content: string
    tokens?: number
    edited?: boolean
    deleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterFavoriteCreateManyUserInput = {
    id?: string
    characterId: string
    createdAt?: Date | string
  }

  export type CharacterRatingCreateManyUserInput = {
    id?: string
    characterId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyUserInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    status: string
    method: string
    externalId?: string | null
    description: string
    metadata?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OAuthAccountCreateManyUserInput = {
    id?: string
    provider: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RefreshTokenCreateManyUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type ChatRoomCreateManyOwnerInput = {
    id?: string
    name: string
    description?: string | null
    maxParticipants?: number
    isPrivate?: boolean
    allowSpectators?: boolean
    roomType?: string
    settings?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatParticipantCreateManyUserInput = {
    id?: string
    roomId: string
    characterId?: string | null
    role?: string
    permissions?: string
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    isActive?: boolean
    isMuted?: boolean
  }

  export type ChatMessageCreateManySenderInput = {
    id?: string
    roomId: string
    characterId?: string | null
    content: string
    messageType?: string
    replyToId?: string | null
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowCreateManyCreatorInput = {
    id?: string
    name: string
    description?: string | null
    version?: string
    status?: string
    isTemplate?: boolean
    isPublic?: boolean
    category?: string
    tags?: string
    definition: string
    variables?: string
    settings?: string
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowInstanceCreateManyExecutorInput = {
    id?: string
    workflowId: string
    name?: string | null
    status?: string
    priority?: string
    input?: string | null
    output?: string | null
    variables?: string
    currentStep?: string | null
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    failureReason?: string | null
    retryCount?: number
    maxRetries?: number
    timeout?: number | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowRatingCreateManyUserInput = {
    id?: string
    workflowId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduledTaskCreateManyCreatorInput = {
    id?: string
    name: string
    workflowId: string
    cronExpression: string
    timezone?: string
    isEnabled?: boolean
    input?: string | null
    lastRunAt?: Date | string | null
    nextRunAt?: Date | string | null
    runCount?: number
    failureCount?: number
    maxRuns?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatSessions?: ChatSessionUpdateManyWithoutCharacterNestedInput
    messages?: MessageUpdateManyWithoutCharacterNestedInput
    favorites?: CharacterFavoriteUpdateManyWithoutCharacterNestedInput
    ratings?: CharacterRatingUpdateManyWithoutCharacterNestedInput
    chatParticipants?: ChatParticipantUpdateManyWithoutCharacterNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutCharacterNestedInput
    messages?: MessageUncheckedUpdateManyWithoutCharacterNestedInput
    favorites?: CharacterFavoriteUncheckedUpdateManyWithoutCharacterNestedInput
    ratings?: CharacterRatingUncheckedUpdateManyWithoutCharacterNestedInput
    chatParticipants?: ChatParticipantUncheckedUpdateManyWithoutCharacterNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    backstory?: NullableStringFieldUpdateOperationsInput | string | null
    speakingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    scenario?: NullableStringFieldUpdateOperationsInput | string | null
    firstMessage?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    exampleDialogs?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    isNSFW?: BoolFieldUpdateOperationsInput | boolean
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    chatCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    importedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    model?: StringFieldUpdateOperationsInput | string
    presetId?: NullableStringFieldUpdateOperationsInput | string | null
    worldInfoId?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutChatSessionsNestedInput
    messages?: MessageUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    model?: StringFieldUpdateOperationsInput | string
    presetId?: NullableStringFieldUpdateOperationsInput | string | null
    worldInfoId?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    model?: StringFieldUpdateOperationsInput | string
    presetId?: NullableStringFieldUpdateOperationsInput | string | null
    worldInfoId?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    edited?: BoolFieldUpdateOperationsInput | boolean
    deleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: ChatSessionUpdateOneRequiredWithoutMessagesNestedInput
    character?: CharacterUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    edited?: BoolFieldUpdateOperationsInput | boolean
    deleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    edited?: BoolFieldUpdateOperationsInput | boolean
    deleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterFavoriteUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type CharacterFavoriteUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterFavoriteUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterRatingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutRatingsNestedInput
  }

  export type CharacterRatingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterRatingUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OAuthAccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OAuthAccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OAuthAccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    allowSpectators?: BoolFieldUpdateOperationsInput | boolean
    roomType?: StringFieldUpdateOperationsInput | string
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: ChatParticipantUpdateManyWithoutRoomNestedInput
    messages?: ChatMessageUpdateManyWithoutRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    allowSpectators?: BoolFieldUpdateOperationsInput | boolean
    roomType?: StringFieldUpdateOperationsInput | string
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: ChatParticipantUncheckedUpdateManyWithoutRoomNestedInput
    messages?: ChatMessageUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxParticipants?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    allowSpectators?: BoolFieldUpdateOperationsInput | boolean
    roomType?: StringFieldUpdateOperationsInput | string
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatParticipantUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isMuted?: BoolFieldUpdateOperationsInput | boolean
    room?: ChatRoomUpdateOneRequiredWithoutParticipantsNestedInput
    character?: CharacterUpdateOneWithoutChatParticipantsNestedInput
  }

  export type ChatParticipantUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isMuted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChatParticipantUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isMuted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChatMessageUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
    character?: CharacterUpdateOneWithoutChatMessagesNestedInput
    replyTo?: ChatMessageUpdateOneWithoutRepliesNestedInput
    replies?: ChatMessageUpdateManyWithoutReplyToNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: ChatMessageUncheckedUpdateManyWithoutReplyToNestedInput
  }

  export type ChatMessageUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    variables?: StringFieldUpdateOperationsInput | string
    settings?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: WorkflowInstanceUpdateManyWithoutWorkflowNestedInput
    templates?: WorkflowTemplateUpdateManyWithoutWorkflowNestedInput
    ratings?: WorkflowRatingUpdateManyWithoutWorkflowNestedInput
    scheduledTasks?: ScheduledTaskUpdateManyWithoutWorkflowNestedInput
  }

  export type WorkflowUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    variables?: StringFieldUpdateOperationsInput | string
    settings?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: WorkflowInstanceUncheckedUpdateManyWithoutWorkflowNestedInput
    templates?: WorkflowTemplateUncheckedUpdateManyWithoutWorkflowNestedInput
    ratings?: WorkflowRatingUncheckedUpdateManyWithoutWorkflowNestedInput
    scheduledTasks?: ScheduledTaskUncheckedUpdateManyWithoutWorkflowNestedInput
  }

  export type WorkflowUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    variables?: StringFieldUpdateOperationsInput | string
    settings?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowInstanceUpdateWithoutExecutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: StringFieldUpdateOperationsInput | string
    currentStep?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: WorkflowUpdateOneRequiredWithoutInstancesNestedInput
    executions?: StepExecutionUpdateManyWithoutInstanceNestedInput
    logs?: WorkflowLogUpdateManyWithoutInstanceNestedInput
  }

  export type WorkflowInstanceUncheckedUpdateWithoutExecutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: StringFieldUpdateOperationsInput | string
    currentStep?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    executions?: StepExecutionUncheckedUpdateManyWithoutInstanceNestedInput
    logs?: WorkflowLogUncheckedUpdateManyWithoutInstanceNestedInput
  }

  export type WorkflowInstanceUncheckedUpdateManyWithoutExecutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: StringFieldUpdateOperationsInput | string
    currentStep?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowRatingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: WorkflowUpdateOneRequiredWithoutRatingsNestedInput
  }

  export type WorkflowRatingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowRatingUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledTaskUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    input?: NullableStringFieldUpdateOperationsInput | string | null
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    runCount?: IntFieldUpdateOperationsInput | number
    failureCount?: IntFieldUpdateOperationsInput | number
    maxRuns?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: WorkflowUpdateOneRequiredWithoutScheduledTasksNestedInput
  }

  export type ScheduledTaskUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    input?: NullableStringFieldUpdateOperationsInput | string | null
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    runCount?: IntFieldUpdateOperationsInput | number
    failureCount?: IntFieldUpdateOperationsInput | number
    maxRuns?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledTaskUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    input?: NullableStringFieldUpdateOperationsInput | string | null
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    runCount?: IntFieldUpdateOperationsInput | number
    failureCount?: IntFieldUpdateOperationsInput | number
    maxRuns?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionCreateManyCharacterInput = {
    id?: string
    userId: string
    title?: string | null
    model?: string
    presetId?: string | null
    worldInfoId?: string | null
    lastMessageAt?: Date | string | null
    messageCount?: number
    totalTokens?: number
    isArchived?: boolean
    isPinned?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageCreateManyCharacterInput = {
    id?: string
    sessionId: string
    userId?: string | null
    role: string
    content: string
    tokens?: number
    edited?: boolean
    deleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterFavoriteCreateManyCharacterInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type CharacterRatingCreateManyCharacterInput = {
    id?: string
    userId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatParticipantCreateManyCharacterInput = {
    id?: string
    roomId: string
    userId?: string | null
    role?: string
    permissions?: string
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    isActive?: boolean
    isMuted?: boolean
  }

  export type ChatMessageCreateManyCharacterInput = {
    id?: string
    roomId: string
    senderId?: string | null
    content: string
    messageType?: string
    replyToId?: string | null
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatSessionUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    model?: StringFieldUpdateOperationsInput | string
    presetId?: NullableStringFieldUpdateOperationsInput | string | null
    worldInfoId?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChatSessionsNestedInput
    messages?: MessageUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    model?: StringFieldUpdateOperationsInput | string
    presetId?: NullableStringFieldUpdateOperationsInput | string | null
    worldInfoId?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateManyWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    model?: StringFieldUpdateOperationsInput | string
    presetId?: NullableStringFieldUpdateOperationsInput | string | null
    worldInfoId?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: IntFieldUpdateOperationsInput | number
    totalTokens?: IntFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    edited?: BoolFieldUpdateOperationsInput | boolean
    deleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: ChatSessionUpdateOneRequiredWithoutMessagesNestedInput
    user?: UserUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    edited?: BoolFieldUpdateOperationsInput | boolean
    deleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    edited?: BoolFieldUpdateOperationsInput | boolean
    deleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterFavoriteUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type CharacterFavoriteUncheckedUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterFavoriteUncheckedUpdateManyWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterRatingUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRatingsNestedInput
  }

  export type CharacterRatingUncheckedUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterRatingUncheckedUpdateManyWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatParticipantUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isMuted?: BoolFieldUpdateOperationsInput | boolean
    room?: ChatRoomUpdateOneRequiredWithoutParticipantsNestedInput
    user?: UserUpdateOneWithoutChatParticipantsNestedInput
  }

  export type ChatParticipantUncheckedUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isMuted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChatParticipantUncheckedUpdateManyWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isMuted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChatMessageUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneWithoutChatMessagesNestedInput
    replyTo?: ChatMessageUpdateOneWithoutRepliesNestedInput
    replies?: ChatMessageUpdateManyWithoutReplyToNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: ChatMessageUncheckedUpdateManyWithoutReplyToNestedInput
  }

  export type ChatMessageUncheckedUpdateManyWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManySessionInput = {
    id?: string
    userId?: string | null
    characterId?: string | null
    role: string
    content: string
    tokens?: number
    edited?: boolean
    deleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    edited?: BoolFieldUpdateOperationsInput | boolean
    deleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutMessagesNestedInput
    character?: CharacterUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    edited?: BoolFieldUpdateOperationsInput | boolean
    deleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    edited?: BoolFieldUpdateOperationsInput | boolean
    deleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatParticipantCreateManyRoomInput = {
    id?: string
    userId?: string | null
    characterId?: string | null
    role?: string
    permissions?: string
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    isActive?: boolean
    isMuted?: boolean
  }

  export type ChatMessageCreateManyRoomInput = {
    id?: string
    senderId?: string | null
    characterId?: string | null
    content: string
    messageType?: string
    replyToId?: string | null
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatParticipantUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isMuted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneWithoutChatParticipantsNestedInput
    character?: CharacterUpdateOneWithoutChatParticipantsNestedInput
  }

  export type ChatParticipantUncheckedUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isMuted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChatParticipantUncheckedUpdateManyWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isMuted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChatMessageUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneWithoutChatMessagesNestedInput
    character?: CharacterUpdateOneWithoutChatMessagesNestedInput
    replyTo?: ChatMessageUpdateOneWithoutRepliesNestedInput
    replies?: ChatMessageUpdateManyWithoutReplyToNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: ChatMessageUncheckedUpdateManyWithoutReplyToNestedInput
  }

  export type ChatMessageUncheckedUpdateManyWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateManyReplyToInput = {
    id?: string
    roomId: string
    senderId?: string | null
    characterId?: string | null
    content: string
    messageType?: string
    tokens?: number
    isEdited?: boolean
    isDeleted?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatMessageUpdateWithoutReplyToInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneWithoutChatMessagesNestedInput
    character?: CharacterUpdateOneWithoutChatMessagesNestedInput
    replies?: ChatMessageUpdateManyWithoutReplyToNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutReplyToInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: ChatMessageUncheckedUpdateManyWithoutReplyToNestedInput
  }

  export type ChatMessageUncheckedUpdateManyWithoutReplyToInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    characterId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    tokens?: IntFieldUpdateOperationsInput | number
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowInstanceCreateManyWorkflowInput = {
    id?: string
    executorId: string
    name?: string | null
    status?: string
    priority?: string
    input?: string | null
    output?: string | null
    variables?: string
    currentStep?: string | null
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    failureReason?: string | null
    retryCount?: number
    maxRetries?: number
    timeout?: number | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowTemplateCreateManyWorkflowInput = {
    id?: string
    name: string
    description?: string | null
    category?: string
    tags?: string
    isOfficial?: boolean
    usageCount?: number
    rating?: number
    ratingCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowRatingCreateManyWorkflowInput = {
    id?: string
    userId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduledTaskCreateManyWorkflowInput = {
    id?: string
    name: string
    creatorId: string
    cronExpression: string
    timezone?: string
    isEnabled?: boolean
    input?: string | null
    lastRunAt?: Date | string | null
    nextRunAt?: Date | string | null
    runCount?: number
    failureCount?: number
    maxRuns?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowInstanceUpdateWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: StringFieldUpdateOperationsInput | string
    currentStep?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    executor?: UserUpdateOneRequiredWithoutWorkflowInstancesNestedInput
    executions?: StepExecutionUpdateManyWithoutInstanceNestedInput
    logs?: WorkflowLogUpdateManyWithoutInstanceNestedInput
  }

  export type WorkflowInstanceUncheckedUpdateWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    executorId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: StringFieldUpdateOperationsInput | string
    currentStep?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    executions?: StepExecutionUncheckedUpdateManyWithoutInstanceNestedInput
    logs?: WorkflowLogUncheckedUpdateManyWithoutInstanceNestedInput
  }

  export type WorkflowInstanceUncheckedUpdateManyWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    executorId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: StringFieldUpdateOperationsInput | string
    currentStep?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowTemplateUpdateWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    isOfficial?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowTemplateUncheckedUpdateWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    isOfficial?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowTemplateUncheckedUpdateManyWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    isOfficial?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowRatingUpdateWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWorkflowRatingsNestedInput
  }

  export type WorkflowRatingUncheckedUpdateWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowRatingUncheckedUpdateManyWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledTaskUpdateWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    input?: NullableStringFieldUpdateOperationsInput | string | null
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    runCount?: IntFieldUpdateOperationsInput | number
    failureCount?: IntFieldUpdateOperationsInput | number
    maxRuns?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutScheduledTasksNestedInput
  }

  export type ScheduledTaskUncheckedUpdateWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    input?: NullableStringFieldUpdateOperationsInput | string | null
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    runCount?: IntFieldUpdateOperationsInput | number
    failureCount?: IntFieldUpdateOperationsInput | number
    maxRuns?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledTaskUncheckedUpdateManyWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    input?: NullableStringFieldUpdateOperationsInput | string | null
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    runCount?: IntFieldUpdateOperationsInput | number
    failureCount?: IntFieldUpdateOperationsInput | number
    maxRuns?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepExecutionCreateManyInstanceInput = {
    id?: string
    stepId: string
    stepType: string
    status?: string
    input?: string | null
    output?: string | null
    error?: string | null
    duration?: number
    retryCount?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    metadata?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowLogCreateManyInstanceInput = {
    id?: string
    level?: string
    message: string
    data?: string | null
    stepId?: string | null
    timestamp?: Date | string
  }

  export type StepExecutionUpdateWithoutInstanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepId?: StringFieldUpdateOperationsInput | string
    stepType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    retryCount?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepExecutionUncheckedUpdateWithoutInstanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepId?: StringFieldUpdateOperationsInput | string
    stepType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    retryCount?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepExecutionUncheckedUpdateManyWithoutInstanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepId?: StringFieldUpdateOperationsInput | string
    stepType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    retryCount?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowLogUpdateWithoutInstanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    stepId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowLogUncheckedUpdateWithoutInstanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    stepId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowLogUncheckedUpdateManyWithoutInstanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    stepId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CharacterCountOutputTypeDefaultArgs instead
     */
    export type CharacterCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CharacterCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatSessionCountOutputTypeDefaultArgs instead
     */
    export type ChatSessionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatSessionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatRoomCountOutputTypeDefaultArgs instead
     */
    export type ChatRoomCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatMessageCountOutputTypeDefaultArgs instead
     */
    export type ChatMessageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatMessageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkflowCountOutputTypeDefaultArgs instead
     */
    export type WorkflowCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkflowCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkflowInstanceCountOutputTypeDefaultArgs instead
     */
    export type WorkflowInstanceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkflowInstanceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OAuthAccountDefaultArgs instead
     */
    export type OAuthAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OAuthAccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefreshTokenDefaultArgs instead
     */
    export type RefreshTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefreshTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CharacterDefaultArgs instead
     */
    export type CharacterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CharacterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatSessionDefaultArgs instead
     */
    export type ChatSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatSessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatRoomDefaultArgs instead
     */
    export type ChatRoomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatRoomDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatParticipantDefaultArgs instead
     */
    export type ChatParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatParticipantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatMessageDefaultArgs instead
     */
    export type ChatMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatMessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransactionDefaultArgs instead
     */
    export type TransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CharacterFavoriteDefaultArgs instead
     */
    export type CharacterFavoriteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CharacterFavoriteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CharacterRatingDefaultArgs instead
     */
    export type CharacterRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CharacterRatingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminLogDefaultArgs instead
     */
    export type AdminLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsageLogDefaultArgs instead
     */
    export type UsageLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsageLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlertDefaultArgs instead
     */
    export type AlertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlertDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChannelDefaultArgs instead
     */
    export type ChannelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChannelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkflowDefaultArgs instead
     */
    export type WorkflowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkflowDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkflowInstanceDefaultArgs instead
     */
    export type WorkflowInstanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkflowInstanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StepExecutionDefaultArgs instead
     */
    export type StepExecutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StepExecutionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkflowLogDefaultArgs instead
     */
    export type WorkflowLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkflowLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkflowTemplateDefaultArgs instead
     */
    export type WorkflowTemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkflowTemplateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkflowRatingDefaultArgs instead
     */
    export type WorkflowRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkflowRatingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduledTaskDefaultArgs instead
     */
    export type ScheduledTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduledTaskDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}