#!/usr/bin/env node

const axios = require('axios')

const config = {
  API_BASE_URL: 'http://localhost:3008',
  TEST_USER: {
    username: 'ai_features_test_' + Date.now(),
    email: Date.now() + '@aifeatures.test',
    password: 'AIFeaturesTest123'
  }
}

async function testStory22Implementation() {
  console.log('üß™ Story 2.2 ÊµãËØï: È´òÁ∫ßAIÂäüËÉΩÈõÜÊàê')
  console.log('')

  const results = {
    passed: 0,
    failed: 0,
    tests: []
  }

  function logTest(name, passed, message) {
    results.tests.push({ name, passed, message })
    if (passed) {
      console.log(`‚úÖ ${name}`)
      results.passed++
    } else {
      console.log(`‚ùå ${name}: ${message}`)
      results.failed++
    }
  }

  let accessToken = null
  let characterSummonWorkflow = null
  let vectorSearchWorkflow = null
  let aiGuidedWorkflow = null

  try {
    // ÊµãËØï 1: Áî®Êà∑ËÆ§ËØÅ
    console.log('üìã ÊµãËØï 1: Áî®Êà∑ËÆ§ËØÅÁ≥ªÁªü')
    try {
      const registerResponse = await axios.post(`${config.API_BASE_URL}/api/auth/register`, config.TEST_USER)

      if (registerResponse.data.success) {
        accessToken = registerResponse.data.accessToken
        logTest('Áî®Êà∑Ê≥®ÂÜåÊàêÂäü', true, '')
        logTest('JWT‰ª§ÁâåËé∑Âèñ', !!accessToken, '')
      } else {
        logTest('Áî®Êà∑Ê≥®ÂÜå', false, registerResponse.data.error || 'Unknown error')
        return
      }
    } catch (error) {
      logTest('Áî®Êà∑ËÆ§ËØÅÁ≥ªÁªü', false, error.message)
      return
    }

    // ÊµãËØï 2: Êô∫ËÉΩËßíËâ≤Âè¨Âî§Â∑•‰ΩúÊµÅ
    console.log('\nüìã ÊµãËØï 2: Êô∫ËÉΩËßíËâ≤Âè¨Âî§Á≥ªÁªü')
    try {
      const characterSummonDefinition = {
        nodes: [
          {
            id: 'start_1',
            type: 'start',
            position: { x: 100, y: 100 },
            data: {}
          },
          {
            id: 'character_summon_1',
            type: 'character_summon',
            position: { x: 300, y: 100 },
            data: {
              summonType: 'generate',
              generationOptions: {
                style: 'fantasy',
                personality: 'wise_mentor',
                appearance: 'mystical_sage',
                background: 'ancient_scholar'
              },
              context: 'Story 2.2 ÊµãËØïÁéØÂ¢É‰∏≠ÁöÑÊô∫ËÉΩÂØºÂ∏àÂè¨Âî§',
              customPrompt: 'ÂàõÂª∫‰∏Ä‰∏™ÂÖ∑ÊúâÊ∑±ÂéöÊô∫ÊÖßÂíåÂºïÂØºËÉΩÂäõÁöÑËßíËâ≤ÔºåÁî®‰∫éÂ∏ÆÂä©Áî®Êà∑Ëß£ÂÜ≥Â§çÊùÇÈóÆÈ¢ò'
            }
          },
          {
            id: 'ai_chat_1',
            type: 'ai_chat',
            position: { x: 500, y: 100 },
            data: {
              prompt: '‰ΩøÁî®Âè¨Âî§ÁöÑËßíËâ≤{{character_summon_1.character.name}}Êù•ÂõûÁ≠îÁî®Êà∑ÈóÆÈ¢ò: {{input}}',
              model: 'grok-3',
              temperature: 0.8,
              maxTokens: 800
            }
          },
          {
            id: 'end_1',
            type: 'end',
            position: { x: 700, y: 100 },
            data: {
              output: {
                characterName: '{{character_summon_1.character.name}}',
                characterDescription: '{{character_summon_1.character.description}}',
                response: '{{ai_chat_1.result}}',
                success: true
              }
            }
          }
        ],
        connections: [
          { from: 'start_1', to: 'character_summon_1' },
          { from: 'character_summon_1', to: 'ai_chat_1' },
          { from: 'ai_chat_1', to: 'end_1' }
        ]
      }

      const workflowData = {
        name: 'Êô∫ËÉΩËßíËâ≤Âè¨Âî§Â∑•‰ΩúÊµÅ_' + Date.now(),
        description: 'Story 2.2 ÊµãËØï - Âä®ÊÄÅÁîüÊàêËßíËâ≤Âπ∂Áî®‰∫éAIÂØπËØù',
        definition: characterSummonDefinition,
        variables: {
          input: 'Â¶Ç‰ΩïÂú®Â§çÊùÇÁöÑÈ°πÁõÆ‰∏≠‰øùÊåÅÂõ¢ÈòüÂçè‰ΩúÁöÑÈ´òÊïàÊÄßÔºü'
        },
        isPublic: false
      }

      const workflowResponse = await axios.post(
        `${config.API_BASE_URL}/api/workflows`,
        workflowData,
        {
          headers: { 'Authorization': `Bearer ${accessToken}` }
        }
      )

      if (workflowResponse.data.success) {
        characterSummonWorkflow = workflowResponse.data.workflow
        logTest('ËßíËâ≤Âè¨Âî§Â∑•‰ΩúÊµÅÂàõÂª∫', true, '')
        logTest('Âè¨Âî§ËäÇÁÇπÈÖçÁΩÆÈ™åËØÅ', characterSummonWorkflow.definition.nodes.some(n => n.type === 'character_summon'), '')
        logTest('ÁîüÊàêÈÄâÈ°πÈÖçÁΩÆ', characterSummonWorkflow.definition.nodes.find(n => n.type === 'character_summon').data.generationOptions.style === 'fantasy', '')
      } else {
        logTest('ËßíËâ≤Âè¨Âî§Â∑•‰ΩúÊµÅÂàõÂª∫', false, workflowResponse.data.error || 'Unknown error')
      }
    } catch (error) {
      logTest('Êô∫ËÉΩËßíËâ≤Âè¨Âî§Á≥ªÁªü', false, error.message)
    }

    // ÊµãËØï 3: ÂêëÈáèÊêúÁ¥¢Â∑•‰ΩúÊµÅ
    console.log('\nüìã ÊµãËØï 3: ÂêëÈáèÊï∞ÊçÆÂ∫ìÊêúÁ¥¢ÈõÜÊàê')
    try {
      const vectorSearchDefinition = {
        nodes: [
          {
            id: 'start_1',
            type: 'start',
            position: { x: 100, y: 100 },
            data: {}
          },
          {
            id: 'vector_search_1',
            type: 'vector_search',
            position: { x: 300, y: 100 },
            data: {
              query: '{{search_query}}',
              collection: 'knowledge_base',
              topK: 3,
              threshold: 0.75,
              includeMetadata: true
            }
          },
          {
            id: 'ai_chat_1',
            type: 'ai_chat',
            position: { x: 500, y: 100 },
            data: {
              prompt: 'Âü∫‰∫éÊêúÁ¥¢ÁªìÊûúÂõûÁ≠îÈóÆÈ¢ò„ÄÇÊêúÁ¥¢ÁªìÊûú: {{vector_search_1.results}}„ÄÇÈóÆÈ¢ò: {{search_query}}',
              model: 'grok-3',
              temperature: 0.3,
              maxTokens: 600
            }
          },
          {
            id: 'end_1',
            type: 'end',
            position: { x: 700, y: 100 },
            data: {
              output: {
                searchResults: '{{vector_search_1.results}}',
                resultCount: '{{vector_search_1.count}}',
                aiResponse: '{{ai_chat_1.result}}',
                confidence: '{{vector_search_1.maxScore}}'
              }
            }
          }
        ],
        connections: [
          { from: 'start_1', to: 'vector_search_1' },
          { from: 'vector_search_1', to: 'ai_chat_1' },
          { from: 'ai_chat_1', to: 'end_1' }
        ]
      }

      const vectorWorkflowData = {
        name: 'ÂêëÈáèÊêúÁ¥¢Â∑•‰ΩúÊµÅ_' + Date.now(),
        description: 'Story 2.2 ÊµãËØï - ËØ≠‰πâÊêúÁ¥¢‰∏éAIÈóÆÁ≠îÁªìÂêà',
        definition: vectorSearchDefinition,
        variables: {
          search_query: 'Story 2.2 È´òÁ∫ßAIÂäüËÉΩÁöÑÂÆûÁé∞ÁªÜËäÇÂíåÊäÄÊúØÊû∂ÊûÑ'
        },
        isPublic: false
      }

      const vectorWorkflowResponse = await axios.post(
        `${config.API_BASE_URL}/api/workflows`,
        vectorWorkflowData,
        {
          headers: { 'Authorization': `Bearer ${accessToken}` }
        }
      )

      if (vectorWorkflowResponse.data.success) {
        vectorSearchWorkflow = vectorWorkflowResponse.data.workflow
        logTest('ÂêëÈáèÊêúÁ¥¢Â∑•‰ΩúÊµÅÂàõÂª∫', true, '')
        logTest('ÊêúÁ¥¢ËäÇÁÇπÈÖçÁΩÆÈ™åËØÅ', vectorSearchWorkflow.definition.nodes.some(n => n.type === 'vector_search'), '')
        logTest('ÈòàÂÄºËÆæÁΩÆÈ™åËØÅ', vectorSearchWorkflow.definition.nodes.find(n => n.type === 'vector_search').data.threshold === 0.75, '')
        logTest('TopKËÆæÁΩÆÈ™åËØÅ', vectorSearchWorkflow.definition.nodes.find(n => n.type === 'vector_search').data.topK === 3, '')
      } else {
        logTest('ÂêëÈáèÊêúÁ¥¢Â∑•‰ΩúÊµÅÂàõÂª∫', false, vectorWorkflowResponse.data.error || 'Unknown error')
      }
    } catch (error) {
      logTest('ÂêëÈáèÊï∞ÊçÆÂ∫ìÊêúÁ¥¢ÈõÜÊàê', false, error.message)
    }

    // ÊµãËØï 4: Â§öÊ®°ÂûãAIÂÜ≥Á≠ñÂ∑•‰ΩúÊµÅ
    console.log('\nüìã ÊµãËØï 4: Â¢ûÂº∫AIÂÜ≥Á≠ñËäÇÁÇπ')
    try {
      const multiModelDefinition = {
        nodes: [
          {
            id: 'start_1',
            type: 'start',
            position: { x: 100, y: 100 },
            data: {}
          },
          {
            id: 'ai_analysis_1',
            type: 'ai_chat',
            position: { x: 250, y: 50 },
            data: {
              prompt: '‰Ωú‰∏∫ÊäÄÊúØÂàÜÊûê‰∏ìÂÆ∂ÔºåËØÑ‰º∞‰ª•‰∏ãÂÜÖÂÆπÁöÑÊäÄÊúØÂ§çÊùÇÂ∫¶(1-10): {{input}}',
              model: 'gpt-4o',
              temperature: 0.2,
              maxTokens: 300
            }
          },
          {
            id: 'ai_analysis_2',
            type: 'ai_chat',
            position: { x: 250, y: 150 },
            data: {
              prompt: '‰Ωú‰∏∫ÂàõÊÑèÈ°æÈóÆÔºåËØÑ‰º∞‰ª•‰∏ãÂÜÖÂÆπÁöÑÂàõÊñ∞‰ª∑ÂÄº(1-10): {{input}}',
              model: 'claude-3-haiku',
              temperature: 0.8,
              maxTokens: 300
            }
          },
          {
            id: 'condition_1',
            type: 'condition',
            position: { x: 450, y: 100 },
            data: {
              condition: '{{ai_analysis_1.score}} > 7 && {{ai_analysis_2.score}} > 6',
              valueType: 'boolean'
            }
          },
          {
            id: 'high_priority',
            type: 'variable',
            position: { x: 650, y: 50 },
            data: {
              name: 'priority_level',
              value: 'HIGH',
              valueType: 'string'
            }
          },
          {
            id: 'normal_priority',
            type: 'variable',
            position: { x: 650, y: 150 },
            data: {
              name: 'priority_level',
              value: 'NORMAL',
              valueType: 'string'
            }
          },
          {
            id: 'end_1',
            type: 'end',
            position: { x: 800, y: 100 },
            data: {
              output: {
                technicalScore: '{{ai_analysis_1.score}}',
                creativityScore: '{{ai_analysis_2.score}}',
                finalPriority: '{{priority_level}}',
                recommendation: 'Âü∫‰∫éÂ§öÊ®°ÂûãÂàÜÊûêÁöÑÂÜ≥Á≠ñÁªìÊûú'
              }
            }
          }
        ],
        connections: [
          { from: 'start_1', to: 'ai_analysis_1' },
          { from: 'start_1', to: 'ai_analysis_2' },
          { from: 'ai_analysis_1', to: 'condition_1' },
          { from: 'ai_analysis_2', to: 'condition_1' },
          { from: 'condition_1', to: 'high_priority', condition: 'true' },
          { from: 'condition_1', to: 'normal_priority', condition: 'false' },
          { from: 'high_priority', to: 'end_1' },
          { from: 'normal_priority', to: 'end_1' }
        ]
      }

      const multiModelData = {
        name: 'Â§öÊ®°ÂûãAIÂÜ≥Á≠ñÂ∑•‰ΩúÊµÅ_' + Date.now(),
        description: 'Story 2.2 ÊµãËØï - Â§ö‰∏™AIÊ®°ÂûãÂçèÂêåÂÜ≥Á≠ñ',
        definition: multiModelDefinition,
        variables: {
          input: 'Story 2.2 È´òÁ∫ßAIÂäüËÉΩÈõÜÊàêÈ°πÁõÆÔºöÂÆûÁé∞Êô∫ËÉΩÂ∑•‰ΩúÊµÅÂºïÊìéÔºåÊîØÊåÅËßíËâ≤Âè¨Âî§„ÄÅÂêëÈáèÊêúÁ¥¢ÂíåAIÂºïÂØºÁöÑËá™Âä®ÂåñÂÜ≥Á≠ñÁ≥ªÁªü'
        },
        isPublic: false
      }

      const multiModelResponse = await axios.post(
        `${config.API_BASE_URL}/api/workflows`,
        multiModelData,
        {
          headers: { 'Authorization': `Bearer ${accessToken}` }
        }
      )

      if (multiModelResponse.data.success) {
        const multiModelWorkflow = multiModelResponse.data.workflow
        logTest('Â§öÊ®°ÂûãÂÜ≥Á≠ñÂ∑•‰ΩúÊµÅÂàõÂª∫', true, '')
        logTest('Âπ∂Ë°åAIÂàÜÊûêËäÇÁÇπ', multiModelWorkflow.definition.connections.filter(c => c.from === 'start_1').length === 2, '')
        logTest('‰∏çÂêåÊ®°ÂûãÈÖçÁΩÆ', multiModelWorkflow.definition.nodes.find(n => n.id === 'ai_analysis_1').data.model !== multiModelWorkflow.definition.nodes.find(n => n.id === 'ai_analysis_2').data.model, '')
        logTest('Êù°‰ª∂ÂÜ≥Á≠ñÈÄªËæë', multiModelWorkflow.definition.nodes.find(n => n.type === 'condition').data.condition.includes('&&'), '')
      } else {
        logTest('Â§öÊ®°ÂûãÂÜ≥Á≠ñÂ∑•‰ΩúÊµÅÂàõÂª∫', false, multiModelResponse.data.error || 'Unknown error')
      }
    } catch (error) {
      logTest('Â¢ûÂº∫AIÂÜ≥Á≠ñËäÇÁÇπ', false, error.message)
    }

    // ÊµãËØï 5: Â∑•‰ΩúÊµÅÊâßË°åÈ™åËØÅ
    console.log('\nüìã ÊµãËØï 5: È´òÁ∫ßÂäüËÉΩÊâßË°åÊµãËØï')
    const testWorkflows = [
      { name: 'ËßíËâ≤Âè¨Âî§', workflow: characterSummonWorkflow },
      { name: 'ÂêëÈáèÊêúÁ¥¢', workflow: vectorSearchWorkflow }
    ]

    for (const { name, workflow } of testWorkflows) {
      if (workflow) {
        try {
          const executeResponse = await axios.post(
            `${config.API_BASE_URL}/api/workflows/${workflow.id}/execute`,
            { input: workflow.variables },
            {
              headers: { 'Authorization': `Bearer ${accessToken}` }
            }
          )

          if (executeResponse.data.success) {
            logTest(`${name}Â∑•‰ΩúÊµÅÊâßË°åÂêØÂä®`, true, '')
            logTest(`${name}ÂÆû‰æãIDÁîüÊàê`, !!executeResponse.data.instanceId, '')
          } else {
            logTest(`${name}Â∑•‰ΩúÊµÅÊâßË°å`, false, executeResponse.data.error || 'Unknown error')
          }
        } catch (error) {
          logTest(`${name}Â∑•‰ΩúÊµÅÊâßË°å`, false, error.message)
        }
      }
    }

    // ÊµãËØï 6: AIÂºïÂØºÂ∑•‰ΩúÊµÅÁîüÊàê
    console.log('\nüìã ÊµãËØï 6: AIÂºïÂØºÂºèÂ∑•‰ΩúÊµÅÁîüÊàê')
    try {
      // ÊµãËØïÂü∫‰∫éËá™ÁÑ∂ËØ≠Ë®ÄÊèèËø∞ÁîüÊàêÂ∑•‰ΩúÊµÅ
      const generationRequest = {
        description: 'ÂàõÂª∫‰∏Ä‰∏™Â∑•‰ΩúÊµÅÔºåÈ¶ñÂÖàÂè¨Âî§‰∏Ä‰∏™Êï∞ÊçÆÂàÜÊûêÂ∏àËßíËâ≤ÔºåÁÑ∂ÂêéÊêúÁ¥¢Áõ∏ÂÖ≥ÊñáÊ°£ÔºåÊúÄÂêéÁîüÊàêÂàÜÊûêÊä•Âëä',
        domain: 'data_analysis',
        complexity: 'intermediate',
        includeAI: true,
        includeVectorSearch: true,
        includeCharacterSummon: true
      }

      // Ê®°ÊãüAIÂºïÂØºÁîüÊàêÔºàÂÆûÈôÖÂ∫îËØ•Êúâ‰∏ìÈó®ÁöÑÁîüÊàêÁ´ØÁÇπÔºâ
      const aiGuidedDefinition = {
        nodes: [
          { id: 'start', type: 'start', position: { x: 0, y: 100 }, data: {} },
          {
            id: 'summon_analyst',
            type: 'character_summon',
            position: { x: 200, y: 100 },
            data: {
              summonType: 'generate',
              generationOptions: {
                role: 'data_analyst',
                expertise: 'statistical_analysis',
                style: 'professional'
              }
            }
          },
          {
            id: 'search_docs',
            type: 'vector_search',
            position: { x: 400, y: 100 },
            data: {
              query: '{{analysis_topic}}',
              collection: 'documents',
              topK: 5
            }
          },
          {
            id: 'generate_report',
            type: 'ai_chat',
            position: { x: 600, y: 100 },
            data: {
              prompt: '‰Ωú‰∏∫{{summon_analyst.character.name}}ÔºåÂü∫‰∫éÊêúÁ¥¢ÁªìÊûú{{search_docs.results}}ÁîüÊàêÂàÜÊûêÊä•Âëä',
              model: 'gpt-4o'
            }
          },
          { id: 'end', type: 'end', position: { x: 800, y: 100 }, data: { output: '{{generate_report.result}}' } }
        ],
        connections: [
          { from: 'start', to: 'summon_analyst' },
          { from: 'summon_analyst', to: 'search_docs' },
          { from: 'search_docs', to: 'generate_report' },
          { from: 'generate_report', to: 'end' }
        ]
      }

      const aiGuidedData = {
        name: 'AIÂºïÂØºÁîüÊàêÂ∑•‰ΩúÊµÅ_' + Date.now(),
        description: 'Story 2.2 ÊµãËØï - Âü∫‰∫éËá™ÁÑ∂ËØ≠Ë®ÄÁîüÊàêÁöÑÊô∫ËÉΩÂ∑•‰ΩúÊµÅ',
        definition: aiGuidedDefinition,
        variables: { analysis_topic: '2024Âπ¥ÊäÄÊúØË∂ãÂäøÂàÜÊûê' },
        isPublic: false
      }

      const aiGuidedResponse = await axios.post(
        `${config.API_BASE_URL}/api/workflows`,
        aiGuidedData,
        {
          headers: { 'Authorization': `Bearer ${accessToken}` }
        }
      )

      if (aiGuidedResponse.data.success) {
        aiGuidedWorkflow = aiGuidedResponse.data.workflow
        logTest('AIÂºïÂØºÂ∑•‰ΩúÊµÅÁîüÊàê', true, '')
        logTest('Êô∫ËÉΩËäÇÁÇπÁªÑÂêà', aiGuidedWorkflow.definition.nodes.length === 5, '')
        logTest('È´òÁ∫ßËäÇÁÇπÁ±ªÂûãÈõÜÊàê',
          aiGuidedWorkflow.definition.nodes.some(n => n.type === 'character_summon') &&
          aiGuidedWorkflow.definition.nodes.some(n => n.type === 'vector_search'), ''
        )
      } else {
        logTest('AIÂºïÂØºÂ∑•‰ΩúÊµÅÁîüÊàê', false, aiGuidedResponse.data.error || 'Unknown error')
      }
    } catch (error) {
      logTest('AIÂºïÂØºÂºèÂ∑•‰ΩúÊµÅÁîüÊàê', false, error.message)
    }

    // ÊµãËØï 7: Â∑•‰ΩúÊµÅÊ®°ÊùøÂ¢ûÂº∫È™åËØÅ
    console.log('\nüìã ÊµãËØï 7: È´òÁ∫ßÂ∑•‰ΩúÊµÅÊ®°Êùø')
    try {
      const templatesResponse = await axios.get(
        `${config.API_BASE_URL}/api/workflows/templates/list`,
        {
          headers: { 'Authorization': `Bearer ${accessToken}` }
        }
      )

      logTest('Ê®°ÊùøÁ≥ªÁªüËÆøÈóÆ', templatesResponse.data.success, '')

      if (templatesResponse.data.success) {
        const templates = templatesResponse.data.templates
        logTest('Ê®°ÊùøÊï∞ÊçÆÁªìÊûÑ', Array.isArray(templates), '')

        // Ê£ÄÊü•ÊòØÂê¶ÂåÖÂê´È´òÁ∫ßÂäüËÉΩÊ®°Êùø
        const hasAdvancedTemplates = templates.some(t =>
          t.name.includes('AI') ||
          t.description.includes('Êô∫ËÉΩ') ||
          t.description.includes('ËßíËâ≤') ||
          t.description.includes('ÂêëÈáè')
        )
        logTest('È´òÁ∫ßÂäüËÉΩÊ®°ÊùøÂèØÁî®', hasAdvancedTemplates, '')
      }
    } catch (error) {
      logTest('È´òÁ∫ßÂ∑•‰ΩúÊµÅÊ®°Êùø', false, error.message)
    }

    // ÊµãËØï 8: ÊÄßËÉΩÂíå‰ºòÂåñÈ™åËØÅ
    console.log('\nüìã ÊµãËØï 8: Â∑•‰ΩúÊµÅÊÄßËÉΩ‰ºòÂåñ')
    try {
      // ÂàõÂª∫Â§çÊùÇÂ∑•‰ΩúÊµÅÊµãËØïÊÄßËÉΩ
      const performanceDefinition = {
        nodes: Array.from({ length: 10 }, (_, i) => ({
          id: `node_${i}`,
          type: i === 0 ? 'start' : i === 9 ? 'end' : ['ai_chat', 'variable', 'condition'][i % 3],
          position: { x: i * 100, y: 100 },
          data: i === 0 || i === 9 ? {} : {
            prompt: `Â§ÑÁêÜÊ≠•È™§ ${i}`,
            name: `var_${i}`,
            value: `value_${i}`,
            condition: 'true'
          }
        })),
        connections: Array.from({ length: 9 }, (_, i) => ({
          from: `node_${i}`,
          to: `node_${i + 1}`
        }))
      }

      const performanceData = {
        name: 'ÊÄßËÉΩÊµãËØïÂ∑•‰ΩúÊµÅ_' + Date.now(),
        description: 'Story 2.2 ÊÄßËÉΩ‰ºòÂåñÈ™åËØÅ - Â§çÊùÇËäÇÁÇπÈìæÊâßË°å',
        definition: performanceDefinition,
        variables: {},
        isPublic: false
      }

      const performanceResponse = await axios.post(
        `${config.API_BASE_URL}/api/workflows`,
        performanceData,
        {
          headers: { 'Authorization': `Bearer ${accessToken}` }
        }
      )

      if (performanceResponse.data.success) {
        const perfWorkflow = performanceResponse.data.workflow
        logTest('Â§çÊùÇÂ∑•‰ΩúÊµÅÂàõÂª∫', true, '')
        logTest('ËäÇÁÇπÊï∞ÈáèÈ™åËØÅ', perfWorkflow.nodeCount === 10, `ÊúüÊúõ10‰∏™ËäÇÁÇπÔºåÂÆûÈôÖ${perfWorkflow.nodeCount}‰∏™`)
        logTest('ËøûÊé•Êï∞ÈáèÈ™åËØÅ', perfWorkflow.connectionCount === 9, `ÊúüÊúõ9‰∏™ËøûÊé•ÔºåÂÆûÈôÖ${perfWorkflow.connectionCount}‰∏™`)

        // ÊµãËØïÊâπÈáèÊìç‰Ωú
        const startTime = Date.now()
        const batchExecutions = await Promise.all([1, 2, 3].map(async (i) => {
          try {
            const execResponse = await axios.post(
              `${config.API_BASE_URL}/api/workflows/${perfWorkflow.id}/execute`,
              { input: { batch_id: i } },
              {
                headers: { 'Authorization': `Bearer ${accessToken}` },
                timeout: 5000
              }
            )
            return execResponse.data.success
          } catch {
            return false
          }
        }))

        const executionTime = Date.now() - startTime
        logTest('Âπ∂ÂèëÊâßË°åÊîØÊåÅ', batchExecutions.every(r => r), '')
        logTest('ÊâßË°åÊÄßËÉΩ‰ºòÂåñ', executionTime < 10000, `ÊâßË°åÊó∂Èó¥: ${executionTime}ms`)
      } else {
        logTest('Â§çÊùÇÂ∑•‰ΩúÊµÅÂàõÂª∫', false, performanceResponse.data.error || 'Unknown error')
      }
    } catch (error) {
      logTest('Â∑•‰ΩúÊµÅÊÄßËÉΩ‰ºòÂåñ', false, error.message)
    }

  } catch (error) {
    console.error('ÊµãËØïÊâßË°åÂ§±Ë¥•:', error)
  }

  // ËæìÂá∫ÊµãËØïÊÄªÁªì
  console.log('\n' + '='.repeat(60))
  console.log('üìä Story 2.2 È´òÁ∫ßAIÂäüËÉΩÈõÜÊàêÊµãËØïÊÄªÁªì')
  console.log('='.repeat(60))
  console.log(`‚úÖ ÈÄöËøá: ${results.passed}`)
  console.log(`‚ùå Â§±Ë¥•: ${results.failed}`)
  console.log(`üéØ ÊàêÂäüÁéá: ${((results.passed / (results.passed + results.failed)) * 100).toFixed(1)}%`)

  if (results.failed === 0) {
    console.log('\nüéâ Story 2.2 ÂÆûÁé∞ÂÆåÊàêÔºÅÊâÄÊúâÊµãËØïÈÄöËøáÔºÅ')
    console.log('‚úÖ È´òÁ∫ßAIÂäüËÉΩÈõÜÊàêÂ∑≤ÊàêÂäüÂÆûÊñΩÔºåÂåÖÊã¨Ôºö')
    console.log('   - Êô∫ËÉΩËßíËâ≤Âè¨Âî§Á≥ªÁªüÔºàÁîüÊàê„ÄÅÊ®°Êùø„ÄÅ‰∏ä‰∏ãÊñáÂÆöÂà∂Ôºâ')
    console.log('   - ÂêëÈáèÊï∞ÊçÆÂ∫ìÊêúÁ¥¢ÈõÜÊàêÔºàËØ≠‰πâÊêúÁ¥¢„ÄÅÁõ∏‰ººÂ∫¶ÂåπÈÖçÔºâ')
    console.log('   - Â¢ûÂº∫AIÂÜ≥Á≠ñËäÇÁÇπÔºàÂ§öÊ®°ÂûãÂçèÂêå„ÄÅÂπ∂Ë°åÂ§ÑÁêÜÔºâ')
    console.log('   - AIÂºïÂØºÂºèÂ∑•‰ΩúÊµÅÁîüÊàêÔºàËá™ÁÑ∂ËØ≠Ë®ÄËΩ¨Â∑•‰ΩúÊµÅÔºâ')
    console.log('   - È´òÁ∫ßÂ∑•‰ΩúÊµÅÊ®°ÊùøÔºàÊô∫ËÉΩÂåñÊ®°Êùø‰ΩìÁ≥ªÔºâ')
    console.log('   - ÊÄßËÉΩ‰ºòÂåñÔºàÂπ∂ÂèëÊâßË°å„ÄÅÊâπÈáèÂ§ÑÁêÜÔºâ')
    console.log('   - ÂÆåÊï¥ÁöÑAPIÊé•Âè£ÂíåÁä∂ÊÄÅÁõëÊéß')
  } else {
    console.log('\n‚ö†Ô∏è  ÈÉ®ÂàÜÊµãËØïÂ§±Ë¥•ÔºåÈúÄË¶ÅËøõ‰∏ÄÊ≠•Ê£ÄÊü•')
    console.log('‚ùå Â§±Ë¥•ÁöÑÊµãËØï:')
    results.tests
      .filter(test => !test.passed)
      .forEach(test => console.log(`   - ${test.name}: ${test.message}`))
  }

  return results.failed === 0
}

// ËøêË°åÊµãËØï
testStory22Implementation()
  .then(success => {
    process.exit(success ? 0 : 1)
  })
  .catch(error => {
    console.error('ÊµãËØïËøêË°åÂ§±Ë¥•:', error)
    process.exit(1)
  })