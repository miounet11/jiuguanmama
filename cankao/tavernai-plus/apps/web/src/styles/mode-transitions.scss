// =====================================
// 模式切换动画系统
// TavernAI Plus - Issue #16 Stream E
// =====================================

// 导入基础设计系统
@import 'variables';
@import 'mixins';

// ==================== 模式切换动画变量 ====================

:root {
  // 切换动画时长
  --mode-transition-duration: 400ms;
  --mode-transition-delay: 100ms;
  --mode-transition-stagger: 50ms;

  // 缓动函数
  --mode-ease-enter: cubic-bezier(0.25, 0.8, 0.25, 1);
  --mode-ease-exit: cubic-bezier(0.55, 0, 0.45, 1);
  --mode-ease-bounce: cubic-bezier(0.68, -0.55, 0.265, 1.55);

  // 动画距离
  --mode-slide-distance: 20px;
  --mode-scale-ratio: 0.95;
  --mode-fade-opacity: 0.3;

  // 切换效果颜色
  --transition-overlay: rgba(#{red($primary-500)}, #{green($primary-500)}, #{blue($primary-500)}, 0.1);
  --transition-border: rgba(#{red($primary-500)}, #{green($primary-500)}, #{blue($primary-500)}, 0.3);
  --transition-glow: rgba(#{red($primary-500)}, #{green($primary-500)}, #{blue($primary-500)}, 0.4);
}

// ==================== Vue 过渡动画类 ====================

// 功能解锁通知过渡
.feature-unlock-enter-active,
.feature-unlock-leave-active {
  transition: all var(--mode-transition-duration) var(--mode-ease-enter);
}

.feature-unlock-enter-from {
  transform: translateX(100%) scale(var(--mode-scale-ratio));
  opacity: 0;
}

.feature-unlock-leave-to {
  transform: translateX(100%) scale(var(--mode-scale-ratio));
  opacity: 0;
}

// 模式切换过渡
.mode-switch-enter-active {
  transition: all var(--mode-transition-duration) var(--mode-ease-enter);
}

.mode-switch-leave-active {
  transition: all var(--mode-transition-duration) var(--mode-ease-exit);
}

.mode-switch-enter-from,
.mode-switch-leave-to {
  opacity: var(--mode-fade-opacity);
  transform: translateY(var(--mode-slide-distance)) scale(var(--mode-scale-ratio));
}

// 功能项出现/消失过渡
.feature-item-enter-active {
  transition: all var(--mode-transition-duration) var(--mode-ease-bounce);
  transition-delay: var(--mode-transition-delay);
}

.feature-item-leave-active {
  transition: all var(--mode-transition-duration) var(--mode-ease-exit);
}

.feature-item-enter-from {
  opacity: 0;
  transform: translateY(var(--mode-slide-distance)) scale(var(--mode-scale-ratio));
}

.feature-item-leave-to {
  opacity: 0;
  transform: translateY(calc(-1 * var(--mode-slide-distance))) scale(var(--mode-scale-ratio));
  height: 0;
  margin: 0;
  padding: 0;
}

// 升级建议过渡
.upgrade-suggestion-enter-active {
  transition: all var(--mode-transition-duration) var(--mode-ease-bounce);
}

.upgrade-suggestion-leave-active {
  transition: all var(--mode-transition-duration) var(--mode-ease-exit);
}

.upgrade-suggestion-enter-from {
  opacity: 0;
  transform: translateY(-var(--mode-slide-distance)) scale(var(--mode-scale-ratio));
  max-height: 0;
  overflow: hidden;
}

.upgrade-suggestion-leave-to {
  opacity: 0;
  transform: translateY(-var(--mode-slide-distance)) scale(var(--mode-scale-ratio));
  max-height: 0;
  overflow: hidden;
}

// ==================== 模式切换容器动画 ====================

.progressive-disclosure-wrapper {
  // 切换时的容器效果
  &.mode-switching {
    position: relative;
    overflow: hidden;

    // 切换遮罩
    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        90deg,
        transparent,
        var(--transition-overlay),
        transparent
      );
      animation: modeSwitchSweep var(--mode-transition-duration) var(--mode-ease-enter);
      z-index: 10;
    }

    // 切换时的边框效果
    &::after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      border: 2px solid var(--transition-border);
      border-radius: $border-radius-lg;
      animation: modeSwitchGlow var(--mode-transition-duration) var(--mode-ease-enter);
      z-index: 5;
      pointer-events: none;
    }
  }

  // 模式切换状态指示
  &.simplified-mode {
    .mode-indicator {
      background: linear-gradient(135deg, rgba($gray-600, 0.1), rgba($gray-600, 0.05));
      border-left: 3px solid var(--mode-simplified);
    }
  }

  &.expert-mode {
    .mode-indicator {
      background: linear-gradient(135deg, rgba($primary-color, 0.1), rgba($primary-color, 0.05));
      border-left: 3px solid var(--mode-expert);
    }
  }
}

// ==================== 功能容器切换动画 ====================

.feature-container {
  // 基础过渡
  transition: all var(--mode-transition-duration) var(--mode-ease-enter);

  // 简洁模式切换动画
  &.switching-to-simplified {
    animation: switchToSimplified var(--mode-transition-duration) var(--mode-ease-enter);

    .expert-feature {
      animation: fadeOutExpert calc(var(--mode-transition-duration) * 0.7) var(--mode-ease-exit);
      animation-fill-mode: forwards;
    }

    .core-feature {
      animation: emphasizeCore calc(var(--mode-transition-duration) * 1.2) var(--mode-ease-bounce);
      animation-delay: calc(var(--mode-transition-duration) * 0.3);
    }
  }

  // 专家模式切换动画
  &.switching-to-expert {
    animation: switchToExpert var(--mode-transition-duration) var(--mode-ease-enter);

    .expert-feature {
      animation: revealExpert calc(var(--mode-transition-duration) * 1.2) var(--mode-ease-bounce);
      animation-delay: calc(var(--mode-transition-duration) * 0.2);
      animation-fill-mode: both;
    }

    .feature-item {
      // 错开动画，创建波浪效果
      &:nth-child(1) { animation-delay: calc(var(--mode-transition-stagger) * 1); }
      &:nth-child(2) { animation-delay: calc(var(--mode-transition-stagger) * 2); }
      &:nth-child(3) { animation-delay: calc(var(--mode-transition-stagger) * 3); }
      &:nth-child(4) { animation-delay: calc(var(--mode-transition-stagger) * 4); }
      &:nth-child(5) { animation-delay: calc(var(--mode-transition-stagger) * 5); }
      &:nth-child(n+6) { animation-delay: calc(var(--mode-transition-stagger) * 6); }
    }
  }

  // 功能项交错动画
  .feature-item {
    transition: all var(--mode-transition-duration) var(--mode-ease-enter);

    // 新功能高亮动画
    &.newly-unlocked {
      animation: newFeatureReveal 0.8s var(--mode-ease-bounce);
      animation-delay: 0.3s;
      animation-fill-mode: both;
    }

    // 功能禁用动画
    &.feature-disabled {
      animation: featureDisable 0.4s var(--mode-ease-exit);
      animation-fill-mode: forwards;
    }

    // 功能启用动画
    &.feature-enabled {
      animation: featureEnable 0.6s var(--mode-ease-bounce);
    }
  }
}

// ==================== 模式切换器动画 ====================

.mode-switcher {
  transition: all var(--mode-transition-duration) var(--mode-ease-enter);

  // 切换时的动画效果
  &.switching {
    position: relative;
    transform: scale(1.02);
    box-shadow: 0 0 20px var(--transition-glow);

    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(45deg, transparent, var(--transition-overlay), transparent);
      border-radius: inherit;
      animation: switcherPulse var(--mode-transition-duration) ease-in-out;
    }
  }

  // Element Plus Switch 动画增强
  :deep(.el-switch) {
    transition: all var(--mode-transition-duration) var(--mode-ease-enter);

    .el-switch__core {
      transition: all var(--mode-transition-duration) var(--mode-ease-bounce);
    }

    .el-switch__action {
      transition: all var(--mode-transition-duration) var(--mode-ease-bounce);
    }

    // 切换时的特殊效果
    &.is-checked {
      .el-switch__core {
        box-shadow: 0 0 10px rgba($primary-color, 0.4);
      }
    }
  }
}

// ==================== 升级建议动画 ====================

.upgrade-suggestion {
  // 基础动画
  transition: all var(--mode-transition-duration) var(--mode-ease-enter);

  // 出现动画
  &.suggestion-enter {
    animation: suggestionSlideIn 0.6s var(--mode-ease-bounce);
  }

  // 消失动画
  &.suggestion-leave {
    animation: suggestionSlideOut 0.4s var(--mode-ease-exit);
    animation-fill-mode: forwards;
  }

  // 交互状态动画
  &:hover {
    transform: translateY(-2px) scale(1.01);
    box-shadow: $shadow-lg, 0 0 20px rgba($primary-color, 0.2);
  }

  // 按钮动画
  .suggestion-actions {
    .el-button {
      transition: all 0.3s var(--mode-ease-enter);

      &:hover {
        transform: translateY(-1px);
      }
    }
  }
}

// ==================== 动画关键帧定义 ====================

// 模式切换扫描效果
@keyframes modeSwitchSweep {
  0% {
    left: -100%;
  }
  100% {
    left: 100%;
  }
}

// 模式切换发光效果
@keyframes modeSwitchGlow {
  0%, 100% {
    opacity: 0;
    box-shadow: 0 0 0 var(--transition-glow);
  }
  50% {
    opacity: 1;
    box-shadow: 0 0 20px var(--transition-glow);
  }
}

// 切换到简洁模式
@keyframes switchToSimplified {
  0% {
    transform: scale(1);
  }
  30% {
    transform: scale(0.98);
  }
  100% {
    transform: scale(1);
  }
}

// 切换到专家模式
@keyframes switchToExpert {
  0% {
    transform: scale(1);
  }
  30% {
    transform: scale(1.02);
  }
  100% {
    transform: scale(1);
  }
}

// 专家功能淡出
@keyframes fadeOutExpert {
  0% {
    opacity: 1;
    transform: translateX(0) scale(1);
    height: auto;
  }
  50% {
    opacity: 0.3;
    transform: translateX(-var(--mode-slide-distance)) scale(var(--mode-scale-ratio));
  }
  100% {
    opacity: 0;
    transform: translateX(calc(-2 * var(--mode-slide-distance))) scale(0.8);
    height: 0;
    margin: 0;
    padding: 0;
  }
}

// 专家功能显现
@keyframes revealExpert {
  0% {
    opacity: 0;
    transform: translateX(var(--mode-slide-distance)) scale(0.8);
    height: 0;
    margin: 0;
    padding: 0;
  }
  50% {
    opacity: 0.7;
    height: auto;
    margin: revert;
    padding: revert;
  }
  100% {
    opacity: 1;
    transform: translateX(0) scale(1);
  }
}

// 核心功能强调
@keyframes emphasizeCore {
  0%, 100% {
    transform: scale(1);
    box-shadow: none;
  }
  50% {
    transform: scale(1.03);
    box-shadow: 0 0 15px rgba($success-color, 0.3);
  }
}

// 新功能揭示
@keyframes newFeatureReveal {
  0% {
    opacity: 0;
    transform: translateY(var(--mode-slide-distance)) scale(0.8);
  }
  60% {
    opacity: 1;
    transform: translateY(0) scale(1.05);
  }
  100% {
    transform: scale(1);
  }
}

// 功能禁用
@keyframes featureDisable {
  0% {
    opacity: 1;
    filter: none;
    transform: scale(1);
  }
  100% {
    opacity: 0.4;
    filter: grayscale(50%);
    transform: scale(0.98);
  }
}

// 功能启用
@keyframes featureEnable {
  0% {
    opacity: 0.4;
    filter: grayscale(50%);
    transform: scale(0.98);
  }
  100% {
    opacity: 1;
    filter: none;
    transform: scale(1);
  }
}

// 切换器脉冲
@keyframes switcherPulse {
  0%, 100% {
    opacity: 0.3;
  }
  50% {
    opacity: 0.7;
  }
}

// 建议滑入
@keyframes suggestionSlideIn {
  0% {
    opacity: 0;
    transform: translateY(-30px) scale(0.9);
    max-height: 0;
  }
  50% {
    max-height: 200px;
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
    max-height: none;
  }
}

// 建议滑出
@keyframes suggestionSlideOut {
  0% {
    opacity: 1;
    transform: translateY(0) scale(1);
    max-height: none;
  }
  50% {
    max-height: 200px;
  }
  100% {
    opacity: 0;
    transform: translateY(-30px) scale(0.9);
    max-height: 0;
  }
}

// ==================== 响应式动画调整 ====================

// 移动端动画优化
@include mobile-only {
  :root {
    --mode-transition-duration: 300ms;
    --mode-slide-distance: 15px;
    --mode-scale-ratio: 0.97;
  }

  .feature-container {
    &.switching-to-simplified,
    &.switching-to-expert {
      animation-duration: 300ms;
    }
  }

  .upgrade-suggestion {
    &.suggestion-enter,
    &.suggestion-leave {
      animation-duration: 250ms;
    }
  }
}

// 平板端动画调整
@include tablet-portrait {
  :root {
    --mode-transition-stagger: 30ms;
  }
}

// ==================== 性能优化 ====================

// 使用 transform 和 opacity 进行硬件加速
.feature-item,
.mode-switcher,
.upgrade-suggestion,
.feature-unlock-notification {
  will-change: transform, opacity;
}

// 切换期间减少重绘
.progressive-disclosure-wrapper.mode-switching {
  .feature-item {
    will-change: transform, opacity, height;
  }
}

// ==================== 可访问性考虑 ====================

// 减少动效偏好
@include prefers-reduced-motion {
  // 禁用所有动画
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }

  // 保持功能性但移除视觉效果
  .progressive-disclosure-wrapper.mode-switching {
    &::before,
    &::after {
      display: none;
    }
  }

  .mode-switcher.switching {
    transform: none;
    box-shadow: none;

    &::before {
      display: none;
    }
  }

  .upgrade-suggestion:hover {
    transform: none;
  }
}

// 高对比度模式下的动画调整
@media (prefers-contrast: high) {
  .feature-item.newly-unlocked {
    border-width: 3px;
  }

  .mode-switcher.switching {
    border-width: 3px;
  }
}