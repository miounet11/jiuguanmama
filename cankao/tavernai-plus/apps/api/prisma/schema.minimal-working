generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id                    String    @id @default(uuid())
  username              String    @unique
  email                 String    @unique
  passwordHash          String?
  avatar                String?
  bio                   String?
  role                  String    @default("user")
  isAdmin               Boolean   @default(false)
  location              String?
  credits               Int       @default(100)
  subscriptionTier      String    @default("free")
  subscriptionExpiresAt DateTime? @map("subscription_expires_at")
  isActive              Boolean   @default(true) @map("is_active")
  isVerified            Boolean   @default(false) @map("is_verified")
  verificationToken     String?   @map("verification_token")
  resetPasswordToken    String?   @map("reset_password_token")
  resetPasswordExpires  DateTime? @map("reset_password_expires")
  lastLoginAt           DateTime? @map("last_login_at")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // 基础关系
  characters       Character[]
  chatSessions     ChatSession[]
  messages         Message[]
  favorites        CharacterFavorite[]
  ratings          CharacterRating[]
  transactions     Transaction[]
  oauthAccounts    OAuthAccount[]
  refreshTokens    RefreshToken[]
}

// 角色模型
model Character {
  id              String   @id @default(uuid())
  creatorId       String   @map("userId")
  name            String
  description     String
  fullDescription String?
  personality     String?
  backstory       String?
  speakingStyle   String?
  scenario        String?
  firstMessage    String?
  systemPrompt    String?
  exampleDialogs  String?
  avatar          String?
  coverImage      String?
  category        String   @default("原创")
  tags            String   @default("[]")
  language        String   @default("zh-CN")
  model           String   @default("gpt-3.5-turbo")
  temperature     Float    @default(0.7) @map("temperature_value")
  maxTokens       Int      @default(1000) @map("max_tokens")
  isPublic        Boolean  @default(true) @map("is_public")
  isNSFW          Boolean  @default(false) @map("is_nsfw")
  isFeatured      Boolean  @default(false) @map("is_featured")
  isDeleted       Boolean  @default(false)
  rating          Float    @default(0.0)
  ratingCount     Int      @default(0) @map("rating_count")
  chatCount       Int      @default(0) @map("chat_count")
  favoriteCount   Int      @default(0) @map("favorite_count")
  importedFrom    String?
  version         Int      @default(1)
  metadata        String   @default("{}")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // 基础关系
  creator      User                @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  chatSessions ChatSession[]
  messages     Message[]
  favorites    CharacterFavorite[]
  ratings      CharacterRating[]

  @@unique([name, creatorId])
  @@index([creatorId])
  @@index([isPublic])
  @@index([rating])
  @@index([category])
  @@index([isFeatured])
  @@index([createdAt])
  @@index([chatCount])
  @@index([favoriteCount])
  @@index([isPublic, isFeatured])
  @@index([isPublic, rating])
  @@index([category, rating])
  @@index([creatorId, isPublic])
}

// OAuth 账号
model OAuthAccount {
  id           String   @id @default(uuid())
  userId       String
  provider     String
  providerId   String
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([userId])
}

// 刷新令牌
model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// 聊天会话
model ChatSession {
  id             String    @id @default(uuid())
  userId         String
  characterId    String
  title          String?
  model          String    @default("gpt-3.5-turbo")
  presetId       String?
  worldInfoId    String?
  lastMessageAt  DateTime?
  messageCount   Int       @default(0)
  totalTokens    Int       @default(0)
  isArchived     Boolean   @default(false)
  isPinned       Boolean   @default(false)
  metadata       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  character Character   @relation(fields: [characterId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([userId])
  @@index([characterId])
  @@index([updatedAt])
}

// 交易记录
model Transaction {
  id          String   @id @default(uuid())
  userId      String
  type        String
  amount      Float
  currency    String   @default("USD")
  status      String
  method      String
  externalId  String?
  description String
  metadata    String?  @default("{}")
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// 消息
model Message {
  id          String   @id @default(uuid())
  sessionId   String
  userId      String?
  characterId String?
  role        String
  content     String
  tokens      Int      @default(0)
  edited      Boolean  @default(false)
  deleted     Boolean  @default(false)
  metadata    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  character Character?  @relation(fields: [characterId], references: [id], onDelete: SetNull)

  @@index([sessionId])
  @@index([userId])
}

// 角色收藏
model CharacterFavorite {
  id          String   @id @default(uuid())
  userId      String
  characterId String
  createdAt   DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([userId, characterId])
  @@index([userId])
  @@index([characterId])
}

// 角色评分
model CharacterRating {
  id          String   @id @default(uuid())
  userId      String
  characterId String
  rating      Float
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([userId, characterId])
  @@index([userId])
  @@index([characterId])
  @@index([rating])
}
