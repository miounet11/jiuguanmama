generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id                    String    @id @default(uuid())
  username              String    @unique
  email                 String    @unique
  passwordHash          String?
  avatar                String?
  bio                   String?
  role                  String    @default("user")
  isAdmin               Boolean   @default(false)
  location              String?
  credits               Int       @default(100)
  subscriptionTier      String    @default("free")
  subscriptionExpiresAt DateTime? @map("subscription_expires_at")
  isActive              Boolean   @default(true) @map("is_active")
  isVerified            Boolean   @default(false) @map("is_verified")
  verificationToken     String?   @map("verification_token")
  resetPasswordToken    String?   @map("reset_password_token")
  resetPasswordExpires  DateTime? @map("reset_password_expires")
  lastLoginAt           DateTime? @map("last_login_at")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // 基础关系
  characters    Character[]
  chatSessions  ChatSession[]
  messages      Message[]
  favorites     CharacterFavorite[]
  ratings       CharacterRating[]
  transactions  Transaction[]
  oauthAccounts OAuthAccount[]
  refreshTokens RefreshToken[]

  // 修复后的关注关系
  following Follow[] @relation("UserFollowing") // 我关注的人
  followers Follow[] @relation("UserFollowers") // 关注我的人

  // 社交功能关系
  posts        Post[]
  comments     Comment[]
  postLikes    PostLike[]
  commentLikes CommentLike[]
  postShares   PostShare[]

  // AI和媒体关系
  mediaFiles       MediaFile[]
  aiRequests       AIRequest[]
  voiceProfiles    VoiceProfile[]
  imageGenerations ImageGeneration[]
  userBehaviors    UserBehavior[]

  // 推荐系统关系
  userProfile        UserProfile?
  recommendationLogs RecommendationLog[]
  userSimilarities1  UserSimilarity[]    @relation("UserSimilarity1")
  userSimilarities2  UserSimilarity[]    @relation("UserSimilarity2")

  // 工作流和管理关系
  workflows         Workflow[]
  workflowInstances WorkflowInstance[]
  workflowRatings   WorkflowRating[]
  adminLogs         AdminLog[]

  // 聊天室相关
  chatRooms        ChatRoom[]
  chatParticipants ChatParticipant[]
  chatMessages     ChatMessage[]

  // 系统管理
  usageLogs      UsageLog[]
  scheduledTasks ScheduledTask[]

  // 渐进式功能披露
  userMode          UserMode?
  featureUsageLogs  FeatureUsageLog[]
  featureUnlocks    FeatureUnlock[]
  modeTransitions   ModeTransition[]

  // 情景剧本系统
  scenarios          Scenario[]
  scenarioFavorites  ScenarioFavorite[]
  scenarioRatings    ScenarioRating[]
}

// 角色模型
model Character {
  id              String   @id @default(uuid())
  creatorId       String   @map("userId")
  name            String
  description     String
  fullDescription String?
  personality     String?
  backstory       String?
  speakingStyle   String?
  scenario        String?
  firstMessage    String?
  systemPrompt    String?
  exampleDialogs  String?
  avatar          String?
  coverImage      String?
  category        String   @default("原创")
  tags            String   @default("[]")
  language        String   @default("zh-CN")
  model           String   @default("gpt-3.5-turbo")
  temperature     Float    @default(0.7) @map("temperature_value")
  maxTokens       Int      @default(1000) @map("max_tokens")
  isPublic        Boolean  @default(true) @map("is_public")
  isNSFW          Boolean  @default(false) @map("is_nsfw")
  isFeatured      Boolean  @default(false) @map("is_featured")
  isDeleted       Boolean  @default(false)
  rating          Float    @default(0.0)
  ratingCount     Int      @default(0) @map("rating_count")
  chatCount       Int      @default(0) @map("chat_count")
  favoriteCount   Int      @default(0) @map("favorite_count")
  importedFrom    String?
  version         Int      @default(1)
  metadata        String   @default("{}")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // 基础关系
  creator      User                @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  chatSessions ChatSession[]
  messages     Message[]
  favorites    CharacterFavorite[]
  ratings      CharacterRating[]

  // 社交功能关系
  posts Post[]

  // 情景剧本系统关系
  scenarios CharacterScenario[]

  @@unique([name, creatorId])
  @@index([creatorId])
  @@index([isPublic])
  @@index([rating])
  @@index([category])
  @@index([isFeatured])
  @@index([createdAt])
  @@index([chatCount])
  @@index([favoriteCount])
  @@index([isPublic, isFeatured])
  @@index([isPublic, rating])
  @@index([category, rating])
  @@index([creatorId, isPublic])
}

// 修复后的关注模型
model Follow {
  id          String   @id @default(uuid())
  followerId  String // 关注者ID (谁在关注)
  followingId String // 被关注者ID (被谁关注)
  createdAt   DateTime @default(now())

  // 修复关系定义
  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade) // 关注者
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade) // 被关注者

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// OAuth 账号
model OAuthAccount {
  id           String    @id @default(uuid())
  userId       String
  provider     String
  providerId   String
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([userId])
}

// 刷新令牌
model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// 聊天会话
model ChatSession {
  id            String    @id @default(uuid())
  userId        String
  characterId   String
  title         String?
  model         String    @default("gpt-3.5-turbo")
  presetId      String?
  worldInfoId   String?
  lastMessageAt DateTime?
  messageCount  Int       @default(0)
  totalTokens   Int       @default(0)
  isArchived    Boolean   @default(false)
  isPinned      Boolean   @default(false)
  metadata      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([userId])
  @@index([characterId])
  @@index([updatedAt])
}

// 交易记录
model Transaction {
  id          String    @id @default(uuid())
  userId      String
  type        String
  amount      Float
  currency    String    @default("USD")
  status      String
  method      String
  externalId  String?
  description String
  metadata    String?   @default("{}")
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// 消息
model Message {
  id          String   @id @default(uuid())
  sessionId   String
  userId      String?
  characterId String?
  role        String
  content     String
  tokens      Int      @default(0)
  edited      Boolean  @default(false)
  deleted     Boolean  @default(false)
  metadata    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  character Character?  @relation(fields: [characterId], references: [id], onDelete: SetNull)

  @@index([sessionId])
  @@index([userId])
}

// 角色收藏
model CharacterFavorite {
  id          String   @id @default(uuid())
  userId      String
  characterId String
  createdAt   DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([userId, characterId])
  @@index([userId])
  @@index([characterId])
}

// 角色评分
model CharacterRating {
  id          String   @id @default(uuid())
  userId      String
  characterId String
  rating      Float
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([userId, characterId])
  @@index([userId])
  @@index([characterId])
  @@index([rating])
}

// 社区动态/帖子
model Post {
  id           String   @id @default(uuid())
  authorId     String // 作者ID
  characterId  String? // 关联的角色ID（如果是角色分享）
  content      String // 动态内容
  images       String? // 图片列表，JSON格式
  isPublic     Boolean  @default(true)
  likeCount    Int      @default(0) @map("like_count")
  shareCount   Int      @default(0) @map("share_count")
  commentCount Int      @default(0) @map("comment_count")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // 关系
  author    User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  character Character?  @relation(fields: [characterId], references: [id], onDelete: SetNull)
  comments  Comment[]
  likes     PostLike[]
  shares    PostShare[]

  @@index([authorId])
  @@index([characterId])
  @@index([createdAt])
  @@index([isPublic])
}

// 评论模型
model Comment {
  id        String   @id @default(uuid())
  postId    String // 帖子ID
  authorId  String // 评论者ID
  content   String // 评论内容
  likeCount Int      @default(0) @map("like_count")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关系
  post   Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes  CommentLike[]

  @@index([postId])
  @@index([authorId])
  @@index([createdAt])
}

// 帖子点赞
model PostLike {
  id        String   @id @default(uuid())
  postId    String // 帖子ID
  userId    String // 点赞用户ID
  createdAt DateTime @default(now()) @map("created_at")

  // 关系
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

// 使用日志
model UsageLog {
  id        String   @id @default(uuid())
  userId    String? // 用户ID
  action    String // 操作类型
  resource  String // 资源类型
  details   String? // 详细信息
  ipAddress String? // IP地址
  userAgent String? // 用户代理
  createdAt DateTime @default(now()) @map("created_at")

  // 关系
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

// 系统警报
model Alert {
  id         String    @id @default(uuid())
  type       String // 警报类型
  severity   String // 严重程度: low, medium, high, critical
  title      String // 标题
  message    String // 消息
  isRead     Boolean   @default(false)
  isResolved Boolean   @default(false)
  metadata   String? // 额外信息
  createdAt  DateTime  @default(now()) @map("created_at")
  resolvedAt DateTime? @map("resolved_at")

  @@index([type])
  @@index([severity])
  @@index([isRead])
  @@index([isResolved])
  @@index([createdAt])
}

// 频道
model Channel {
  id          String   @id @default(uuid())
  name        String   @unique // 频道名称
  description String? // 描述
  type        String   @default("public") // public, private, system
  isActive    Boolean  @default(true)
  metadata    String? // 额外配置
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([type])
  @@index([isActive])
}

// 定时任务
model ScheduledTask {
  id        String    @id @default(uuid())
  userId    String? // 关联用户ID
  name      String // 任务名称
  type      String // 任务类型
  schedule  String // 调度表达式
  payload   String? // 任务参数
  status    String    @default("pending") // pending, running, completed, failed
  lastRun   DateTime? @map("last_run")
  nextRun   DateTime? @map("next_run")
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // 关系
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([status])
  @@index([nextRun])
  @@index([isActive])
}

// AI提供商
model AIProvider {
  id         String   @id @default(uuid())
  name       String   @unique // openai, anthropic, elevenlabs, etc.
  apiKey     String // 加密存储的API密钥
  baseUrl    String? // 自定义API基础URL
  models     String // 支持的模型列表 JSON
  isActive   Boolean  @default(true)
  priority   Int      @default(1) // 优先级，数字越小优先级越高
  rateLimit  Int      @default(60) // 每分钟请求限制
  costFactor Float    @default(1.0) // 成本系数
  metadata   String   @default("{}") // 额外配置
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@index([isActive, priority])
  @@index([name])
}

// 多媒体文件管理
model MediaFile {
  id            String   @id @default(uuid())
  userId        String // 上传用户ID
  filename      String // 原始文件名
  path          String // 存储路径
  mimeType      String // MIME类型
  size          Int // 文件大小（字节）
  hash          String // 文件哈希值，用于去重
  metadata      String? // 额外元数据
  isPublic      Boolean  @default(false)
  downloadCount Int      @default(0) @map("download_count")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // 关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([hash])
  @@index([mimeType])
}

// AI请求记录
model AIRequest {
  id           String   @id @default(uuid())
  userId       String? // 请求用户ID
  provider     String // AI提供商
  model        String // 使用的模型
  type         String // 请求类型：chat, completion, image, audio, etc.
  inputTokens  Int      @default(0) @map("input_tokens")
  outputTokens Int      @default(0) @map("output_tokens")
  cost         Float    @default(0.0) // 成本
  duration     Int      @default(0) // 请求持续时间（毫秒）
  status       String   @default("pending") // pending, success, failed
  error        String? // 错误信息
  metadata     String? // 请求详情
  createdAt    DateTime @default(now()) @map("created_at")

  // 关系
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([provider, model])
  @@index([status])
  @@index([createdAt])
}

// 语音配置
model VoiceProfile {
  id        String   @id @default(uuid())
  userId    String // 用户ID
  name      String // 配置名称
  provider  String // 语音提供商
  voice     String // 语音ID
  speed     Float    @default(1.0) // 语速
  pitch     Float    @default(0.0) // 音调
  volume    Float    @default(1.0) // 音量
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isDefault])
}

// 图像生成记录
model ImageGeneration {
  id             String   @id @default(uuid())
  userId         String? // 用户ID
  prompt         String // 提示词
  negativePrompt String? // 负面提示词
  model          String // 使用的模型
  width          Int      @default(512) // 图像宽度
  height         Int      @default(512) // 图像高度
  steps          Int      @default(20) // 生成步数
  scale          Float    @default(7.5) // CFG scale
  seed           Int? // 随机种子
  imageUrl       String? // 生成的图像URL
  status         String   @default("pending") // pending, success, failed
  error          String? // 错误信息
  cost           Float    @default(0.0) // 生成成本
  createdAt      DateTime @default(now()) @map("created_at")

  // 关系
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// 用户行为记录
model UserBehavior {
  id         String   @id @default(uuid())
  userId     String // 用户ID
  action     String // 行为类型：view, like, share, chat, etc.
  targetType String // 目标类型：character, post, comment, etc.
  targetId   String // 目标ID
  metadata   String? // 额外数据
  sessionId  String? // 会话ID
  ipAddress  String? // IP地址
  userAgent  String? // 用户代理
  createdAt  DateTime @default(now()) @map("created_at")

  // 关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([targetType, targetId])
  @@index([createdAt])
}

// 用户档案（推荐系统）
model UserProfile {
  id             String   @id @default(uuid())
  userId         String   @unique // 用户ID
  preferences    String   @default("{}") // 偏好设置JSON
  interests      String   @default("[]") // 兴趣标签
  chatFrequency  Float    @default(0.0) // 聊天频率
  avgSessionTime Int      @default(0) // 平均会话时间
  favoriteGenres String   @default("[]") // 偏爱的角色类型
  lastActiveAt   DateTime @default(now()) @map("last_active_at")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // 关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lastActiveAt])
}

// 推荐日志
model RecommendationLog {
  id         String   @id @default(uuid())
  userId     String // 用户ID
  itemType   String // 推荐项类型：character, post, etc.
  itemId     String // 推荐项ID
  algorithm  String // 推荐算法
  score      Float // 推荐分数
  position   Int // 推荐位置
  clicked    Boolean  @default(false) // 是否点击
  interacted Boolean  @default(false) // 是否交互
  feedback   String? // 用户反馈
  metadata   String? // 额外信息
  createdAt  DateTime @default(now()) @map("created_at")

  // 关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([itemType, itemId])
  @@index([algorithm])
  @@index([createdAt])
}

// 用户相似度
model UserSimilarity {
  id          String   @id @default(uuid())
  userId1     String // 用户1 ID
  userId2     String // 用户2 ID
  similarity  Float // 相似度分数
  algorithm   String // 相似度算法
  lastUpdated DateTime @default(now()) @map("last_updated")

  // 关系
  user1 User @relation("UserSimilarity1", fields: [userId1], references: [id], onDelete: Cascade)
  user2 User @relation("UserSimilarity2", fields: [userId2], references: [id], onDelete: Cascade)

  @@unique([userId1, userId2, algorithm])
  @@index([userId1])
  @@index([userId2])
  @@index([similarity])
}

// 内容向量
model ContentVector {
  id          String   @id @default(uuid())
  contentType String // 内容类型：character, post, etc.
  contentId   String // 内容ID
  vector      String // 向量数据JSON
  model       String // 向量模型
  dimension   Int // 向量维度
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([contentType, contentId, model])
  @@index([contentType])
  @@index([model])
}

// 推荐配置
model RecommendationConfig {
  id        String   @id @default(uuid())
  algorithm String   @unique // 算法名称
  config    String // 配置JSON
  isActive  Boolean  @default(true)
  priority  Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([algorithm])
  @@index([isActive])
}

// 推荐统计
model RecommendationStats {
  id          String   @id @default(uuid())
  algorithm   String // 算法名称
  date        DateTime // 统计日期
  impressions Int      @default(0) // 展示次数
  clicks      Int      @default(0) // 点击次数
  conversions Int      @default(0) // 转换次数
  ctr         Float    @default(0.0) // 点击率
  cvr         Float    @default(0.0) // 转换率
  createdAt   DateTime @default(now()) @map("created_at")

  @@unique([algorithm, date])
  @@index([algorithm])
  @@index([date])
}

// 推荐反馈
model RecommendationFeedback {
  id           String   @id @default(uuid())
  userId       String // 用户ID
  itemType     String // 推荐项类型
  itemId       String // 推荐项ID
  feedbackType String // 反馈类型: like, dislike, not_interested
  reason       String? // 反馈原因
  createdAt    DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([itemType, itemId])
  @@index([feedbackType])
}

// 模型性能
model ModelPerformance {
  id        String   @id @default(uuid())
  modelName String // 模型名称
  metric    String // 性能指标
  value     Float // 指标值
  dataset   String? // 数据集
  timestamp DateTime @default(now())
  metadata  String? // 额外信息

  @@index([modelName])
  @@index([metric])
  @@index([timestamp])
}

// 用户偏好
model UserPreference {
  id         String   @id @default(uuid())
  userId     String // 用户ID
  category   String // 偏好类别
  preference String // 偏好内容
  weight     Float    @default(1.0) // 权重
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([userId, category, preference])
  @@index([userId])
  @@index([category])
}

// 工作流定义
model Workflow {
  id          String   @id @default(uuid())
  creatorId   String // 创建者ID
  name        String // 工作流名称
  description String? // 描述
  definition  String // 工作流定义JSON
  version     Int      @default(1) // 版本号
  isPublic    Boolean  @default(false) // 是否公开
  isActive    Boolean  @default(true) // 是否激活
  tags        String   @default("[]") // 标签
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关系
  creator   User               @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  instances WorkflowInstance[]
  ratings   WorkflowRating[]

  @@index([creatorId])
  @@index([isPublic])
  @@index([isActive])
}

// 工作流实例
model WorkflowInstance {
  id          String    @id @default(uuid())
  workflowId  String // 工作流ID
  userId      String // 执行用户ID
  status      String    @default("pending") // pending, running, completed, failed
  input       String? // 输入数据
  output      String? // 输出数据
  error       String? // 错误信息
  startedAt   DateTime  @default(now()) @map("started_at")
  completedAt DateTime? @map("completed_at")

  // 关系
  workflow    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflowDef Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([userId])
  @@index([status])
}

// 步骤执行
model StepExecution {
  id          String    @id @default(uuid())
  instanceId  String // 工作流实例ID
  stepName    String // 步骤名称
  status      String    @default("pending") // pending, running, completed, failed
  input       String? // 输入数据
  output      String? // 输出数据
  error       String? // 错误信息
  startedAt   DateTime  @default(now()) @map("started_at")
  completedAt DateTime? @map("completed_at")

  @@index([instanceId])
  @@index([status])
  @@index([stepName])
}

// 工作流日志
model WorkflowLog {
  id         String   @id @default(uuid())
  instanceId String // 工作流实例ID
  level      String // 日志级别: info, warn, error
  message    String // 日志消息
  details    String? // 详细信息
  timestamp  DateTime @default(now())

  @@index([instanceId])
  @@index([level])
  @@index([timestamp])
}

// 工作流模板
model WorkflowTemplate {
  id          String   @id @default(uuid())
  name        String // 模板名称
  description String? // 描述
  category    String // 分类
  template    String // 模板内容JSON
  isPublic    Boolean  @default(true)
  downloads   Int      @default(0) // 下载次数
  rating      Float    @default(0.0) // 评分
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([category])
  @@index([isPublic])
  @@index([rating])
}

// 管理日志
model AdminLog {
  id        String   @id @default(uuid())
  adminId   String // 管理员ID
  action    String // 操作类型
  target    String // 操作目标
  targetId  String? // 目标ID
  details   String? // 操作详情
  ipAddress String? // IP地址
  createdAt DateTime @default(now()) @map("created_at")

  // 关系
  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([action])
  @@index([createdAt])
}

// 工作流评分
model WorkflowRating {
  id         String   @id @default(uuid())
  workflowId String // 工作流ID
  userId     String // 评分用户ID
  rating     Float // 评分
  comment    String? // 评论
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // 关系
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workflowId, userId])
  @@index([workflowId])
  @@index([userId])
  @@index([rating])
}

// 聊天室
model ChatRoom {
  id          String   @id @default(uuid())
  creatorId   String // 创建者ID
  name        String // 房间名称
  description String? // 房间描述
  isPublic    Boolean  @default(true) // 是否公开
  maxUsers    Int      @default(50) // 最大用户数
  isActive    Boolean  @default(true) // 是否激活
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关系
  creator      User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  participants ChatParticipant[]
  messages     ChatMessage[]

  @@index([creatorId])
  @@index([isPublic])
  @@index([isActive])
}

// 聊天室参与者
model ChatParticipant {
  id       String    @id @default(uuid())
  roomId   String // 房间ID
  userId   String // 用户ID
  role     String    @default("member") // member, moderator, admin
  joinedAt DateTime  @default(now()) @map("joined_at")
  leftAt   DateTime? @map("left_at")

  // 关系
  room ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@index([roomId])
  @@index([userId])
}

// 聊天室消息
model ChatMessage {
  id        String   @id @default(uuid())
  roomId    String // 房间ID
  userId    String // 发送者ID
  content   String // 消息内容
  type      String   @default("text") // text, image, file, system
  metadata  String? // 额外数据
  isEdited  Boolean  @default(false)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关系
  room ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([userId])
  @@index([createdAt])
}

// 评论点赞
model CommentLike {
  id        String   @id @default(uuid())
  commentId String // 评论ID
  userId    String // 点赞用户ID
  createdAt DateTime @default(now()) @map("created_at")

  // 关系
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
}

// 帖子分享
model PostShare {
  id        String   @id @default(uuid())
  postId    String // 帖子ID
  userId    String // 分享用户ID
  createdAt DateTime @default(now()) @map("created_at")

  // 关系
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

// 渐进式功能披露系统

// 用户模式表
model UserMode {
  id           String   @id @default(uuid())
  userId       String   @unique @map("user_id")
  currentMode  String   @default("simplified") @map("current_mode") // 'simplified' | 'expert'
  totalSessions Int     @default(0) @map("total_sessions")
  messagesCount Int     @default(0) @map("messages_count")
  charactersUsed Int    @default(0) @map("characters_used")
  skillLevel   String   @default("beginner") @map("skill_level") // 'beginner' | 'intermediate' | 'advanced' | 'expert'
  preferences  String   @default("{}") // JSON字段存储用户偏好
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([currentMode])
  @@index([skillLevel])
}

// 功能使用记录表
model FeatureUsageLog {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  featureId      String   @map("feature_id")
  isExpertFeature Boolean @default(false) @map("is_expert_feature")
  usageCount     Int      @default(1) @map("usage_count")
  firstUsedAt    DateTime @default(now()) @map("first_used_at")
  lastUsedAt     DateTime @default(now()) @map("last_used_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, featureId], name: "user_feature_unique")
  @@index([userId])
  @@index([featureId])
  @@index([lastUsedAt])
  @@index([isExpertFeature])
}

// 功能解锁记录表
model FeatureUnlock {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  featureId      String   @map("feature_id")
  unlockTrigger  String   @map("unlock_trigger") // 'usage' | 'time' | 'manual' | 'achievement'
  unlockCondition String? @map("unlock_condition")
  unlockedAt     DateTime @default(now()) @map("unlocked_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([featureId])
  @@index([unlockedAt])
  @@index([unlockTrigger])
}

// 模式切换历史表
model ModeTransition {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  fromMode      String   @map("from_mode") // 'simplified' | 'expert'
  toMode        String   @map("to_mode") // 'simplified' | 'expert'
  reason        String?  // 切换原因
  userInitiated Boolean  @default(true) @map("user_initiated")
  transitionedAt DateTime @default(now()) @map("transitioned_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([transitionedAt])
  @@index([toMode])
}

// 情景剧本系统

// 情景剧本模型
model Scenario {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  name        String
  description String?
  content     String?  // 剧本详细内容
  isPublic    Boolean  @default(true) @map("is_public")
  isActive    Boolean  @default(true) @map("is_active")
  tags        String   @default("[]") // JSON字符串存储标签数组
  category    String   @default("通用") // 剧本分类
  language    String   @default("zh-CN") // 语言设置

  // 统计信息
  viewCount     Int @default(0) @map("view_count")
  useCount      Int @default(0) @map("use_count")
  favoriteCount Int @default(0) @map("favorite_count")
  rating        Float @default(0.0)
  ratingCount   Int @default(0) @map("rating_count")

  // 版本控制
  version     Int    @default(1)
  parentId    String? @map("parent_id") // 父剧本ID，用于版本分支

  // 时间戳
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关系
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent     Scenario?        @relation("ScenarioVersions", fields: [parentId], references: [id], onDelete: SetNull)
  versions   Scenario[]       @relation("ScenarioVersions")
  worldInfos WorldInfoEntry[]

  // 多对多关系：角色可以使用多个剧本，剧本可以被多个角色使用
  characters CharacterScenario[]

  // 收藏和评分关系
  favorites ScenarioFavorite[]
  ratings   ScenarioRating[]

  // 索引
  @@index([userId])
  @@index([isPublic])
  @@index([isActive])
  @@index([category])
  @@index([rating])
  @@index([viewCount])
  @@index([useCount])
  @@index([favoriteCount])
  @@index([createdAt])
  @@index([parentId])
  @@index([userId, isPublic])
  @@index([category, rating])
  @@index([isPublic, rating])
}

// 世界信息条目模型
model WorldInfoEntry {
  id          String  @id @default(uuid())
  scenarioId  String  @map("scenario_id")
  title       String
  content     String
  keywords    String  @default("[]") // JSON数组存储关键词

  // 触发和优先级设置
  priority      Int     @default(0) // 优先级，数字越大优先级越高
  insertDepth   Int     @default(4) @map("insert_depth") // 插入深度
  probability   Float   @default(1.0) // 触发概率 0.0-1.0
  matchType     String  @default("contains") @map("match_type") // 匹配类型: contains, exact, regex, starts_with, ends_with
  caseSensitive Boolean @default(false) @map("case_sensitive") // 是否区分大小写

  // 条件设置
  isActive        Boolean @default(true) @map("is_active")
  triggerOnce     Boolean @default(false) @map("trigger_once") // 是否只触发一次
  excludeRecursion Boolean @default(true) @map("exclude_recursion") // 是否排除递归触发

  // 分组和分类
  category String  @default("通用") // 世界信息分类
  group    String? // 分组标识

  // 显示位置设置
  position String @default("before") // before, after, replace

  // 统计信息
  triggerCount Int @default(0) @map("trigger_count") // 触发次数

  // 时间戳
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关系
  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  // 索引
  @@index([scenarioId])
  @@index([priority])
  @@index([isActive])
  @@index([category])
  @@index([matchType])
  @@index([triggerCount])
  @@index([createdAt])
  @@index([scenarioId, priority]) // 复合索引用于优化查询性能
  @@index([scenarioId, isActive])
  @@index([isActive, priority])
}

// 角色剧本关联表（多对多）
model CharacterScenario {
  id          String @id @default(uuid())
  characterId String @map("character_id")
  scenarioId  String @map("scenario_id")

  // 关联配置
  isDefault Boolean @default(false) @map("is_default") // 是否为角色的默认剧本
  isActive  Boolean @default(true) @map("is_active")

  // 个性化设置
  customSettings String? @map("custom_settings") // JSON字符串存储个性化配置

  // 时间戳
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关系
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  scenario  Scenario  @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  // 约束
  @@unique([characterId, scenarioId])
  @@index([characterId])
  @@index([scenarioId])
  @@index([isDefault])
  @@index([isActive])
}

// 剧本收藏表
model ScenarioFavorite {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  scenarioId String   @map("scenario_id")
  createdAt  DateTime @default(now()) @map("created_at")

  // 关系
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  // 约束
  @@unique([userId, scenarioId])
  @@index([userId])
  @@index([scenarioId])
}

// 剧本评分表
model ScenarioRating {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  scenarioId String   @map("scenario_id")
  rating     Float
  comment    String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // 关系
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  // 约束
  @@unique([userId, scenarioId])
  @@index([userId])
  @@index([scenarioId])
  @@index([rating])
}
